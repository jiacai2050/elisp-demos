{"version":3,"sources":["node_modules/algoliasearch/dist/algoliasearch.umd.js","src/app.js"],"names":["client","index","initIndex","$searchBox","document","querySelector","$hits","renderHits","query","search","then","result","innerHTML","hits","map","hit","_highlightResult","name","value","demo_src","demo_result","join","addEventListener","event","target"],"mappings":"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","file":"app.aa484c5f.js","sourceRoot":"..","sourcesContent":["/*! algoliasearch.umd.js | 4.10.3 | © Algolia, inc. | https://github.com/algolia/algoliasearch-client-javascript */\n!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=t||self).algoliasearch=e()}(this,(function(){\"use strict\";function t(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function e(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function r(r){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?e(Object(a),!0).forEach((function(e){t(r,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(r,Object.getOwnPropertyDescriptors(a)):e(Object(a)).forEach((function(t){Object.defineProperty(r,t,Object.getOwnPropertyDescriptor(a,t))}))}return r}function n(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},o=Object.keys(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(n=0;n<o.length;n++)r=o[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}function a(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){if(!(Symbol.iterator in Object(t)||\"[object Arguments]\"===Object.prototype.toString.call(t)))return;var r=[],n=!0,a=!1,o=void 0;try{for(var i,u=t[Symbol.iterator]();!(n=(i=u.next()).done)&&(r.push(i.value),!e||r.length!==e);n=!0);}catch(t){a=!0,o=t}finally{try{n||null==u.return||u.return()}finally{if(a)throw o}}return r}(t,e)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance\")}()}function o(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||\"[object Arguments]\"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError(\"Invalid attempt to spread non-iterable instance\")}()}function i(t){var e,r=\"algoliasearch-client-js-\".concat(t.key),n=function(){return void 0===e&&(e=t.localStorage||window.localStorage),e},o=function(){return JSON.parse(n().getItem(r)||\"{}\")};return{get:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{miss:function(){return Promise.resolve()}};return Promise.resolve().then((function(){var r=JSON.stringify(t),n=o()[r];return Promise.all([n||e(),void 0!==n])})).then((function(t){var e=a(t,2),n=e[0],o=e[1];return Promise.all([n,o||r.miss(n)])})).then((function(t){return a(t,1)[0]}))},set:function(t,e){return Promise.resolve().then((function(){var a=o();return a[JSON.stringify(t)]=e,n().setItem(r,JSON.stringify(a)),e}))},delete:function(t){return Promise.resolve().then((function(){var e=o();delete e[JSON.stringify(t)],n().setItem(r,JSON.stringify(e))}))},clear:function(){return Promise.resolve().then((function(){n().removeItem(r)}))}}}function u(t){var e=o(t.caches),r=e.shift();return void 0===r?{get:function(t,e){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{miss:function(){return Promise.resolve()}},n=e();return n.then((function(t){return Promise.all([t,r.miss(t)])})).then((function(t){return a(t,1)[0]}))},set:function(t,e){return Promise.resolve(e)},delete:function(t){return Promise.resolve()},clear:function(){return Promise.resolve()}}:{get:function(t,n){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{miss:function(){return Promise.resolve()}};return r.get(t,n,a).catch((function(){return u({caches:e}).get(t,n,a)}))},set:function(t,n){return r.set(t,n).catch((function(){return u({caches:e}).set(t,n)}))},delete:function(t){return r.delete(t).catch((function(){return u({caches:e}).delete(t)}))},clear:function(){return r.clear().catch((function(){return u({caches:e}).clear()}))}}}function s(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{serializable:!0},e={};return{get:function(r,n){var a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{miss:function(){return Promise.resolve()}},o=JSON.stringify(r);if(o in e)return Promise.resolve(t.serializable?JSON.parse(e[o]):e[o]);var i=n(),u=a&&a.miss||function(){return Promise.resolve()};return i.then((function(t){return u(t)})).then((function(){return i}))},set:function(r,n){return e[JSON.stringify(r)]=t.serializable?JSON.stringify(n):n,Promise.resolve(n)},delete:function(t){return delete e[JSON.stringify(t)],Promise.resolve()},clear:function(){return e={},Promise.resolve()}}}function c(t,e,r){var n={\"x-algolia-api-key\":r,\"x-algolia-application-id\":e};return{headers:function(){return t===m.WithinHeaders?n:{}},queryParameters:function(){return t===m.WithinQueryParameters?n:{}}}}function f(t){var e=0;return t((function r(){return e++,new Promise((function(n){setTimeout((function(){n(t(r))}),Math.min(100*e,1e3))}))}))}function d(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(t,e){return Promise.resolve()};return Object.assign(t,{wait:function(r){return d(t.then((function(t){return Promise.all([e(t,r),t])})).then((function(t){return t[1]})))}})}function l(t){for(var e=t.length-1;e>0;e--){var r=Math.floor(Math.random()*(e+1)),n=t[e];t[e]=t[r],t[r]=n}return t}function p(t,e){return e?(Object.keys(e).forEach((function(r){t[r]=e[r](t)})),t):t}function h(t){for(var e=arguments.length,r=new Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];var a=0;return t.replace(/%s/g,(function(){return encodeURIComponent(r[a++])}))}var m={WithinQueryParameters:0,WithinHeaders:1};function y(t,e){var r=t||{},n=r.data||{};return Object.keys(r).forEach((function(t){-1===[\"timeout\",\"headers\",\"queryParameters\",\"data\",\"cacheable\"].indexOf(t)&&(n[t]=r[t])})),{data:Object.entries(n).length>0?n:void 0,timeout:r.timeout||e,headers:r.headers||{},queryParameters:r.queryParameters||{},cacheable:r.cacheable}}var g={Read:1,Write:2,Any:3},v=1,b=2,P=3;function w(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:v;return r(r({},t),{},{status:e,lastUpdate:Date.now()})}function O(t){return\"string\"==typeof t?{protocol:\"https\",url:t,accept:g.Any}:{protocol:t.protocol||\"https\",url:t.url,accept:t.accept||g.Any}}var I=\"DELETE\",x=\"GET\",j=\"POST\",D=\"PUT\";function q(t,e){return Promise.all(e.map((function(e){return t.get(e,(function(){return Promise.resolve(w(e))}))}))).then((function(t){var r=t.filter((function(t){return function(t){return t.status===v||Date.now()-t.lastUpdate>12e4}(t)})),n=t.filter((function(t){return function(t){return t.status===P&&Date.now()-t.lastUpdate<=12e4}(t)})),a=[].concat(o(r),o(n));return{getTimeout:function(t,e){return(0===n.length&&0===t?1:n.length+3+t)*e},statelessHosts:a.length>0?a.map((function(t){return O(t)})):e}}))}function S(t,e,n,a){var i=[],u=function(t,e){if(t.method===x||void 0===t.data&&void 0===e.data)return;var n=Array.isArray(t.data)?t.data:r(r({},t.data),e.data);return JSON.stringify(n)}(n,a),s=function(t,e){var n=r(r({},t.headers),e.headers),a={};return Object.keys(n).forEach((function(t){var e=n[t];a[t.toLowerCase()]=e})),a}(t,a),c=n.method,f=n.method!==x?{}:r(r({},n.data),a.data),d=r(r(r({\"x-algolia-agent\":t.userAgent.value},t.queryParameters),f),a.queryParameters),l=0,p=function e(r,o){var f=r.pop();if(void 0===f)throw{name:\"RetryError\",message:\"Unreachable hosts - your application id may be incorrect. If the error persists, contact support@algolia.com.\",transporterStackTrace:R(i)};var p={data:u,headers:s,method:c,url:N(f,n.path,d),connectTimeout:o(l,t.timeouts.connect),responseTimeout:o(l,a.timeout)},h=function(t){var e={request:p,response:t,host:f,triesLeft:r.length};return i.push(e),e},m={onSuccess:function(t){return function(t){try{return JSON.parse(t.content)}catch(e){throw function(t,e){return{name:\"DeserializationError\",message:t,response:e}}(e.message,t)}}(t)},onRetry:function(n){var a=h(n);return n.isTimedOut&&l++,Promise.all([t.logger.info(\"Retryable failure\",A(a)),t.hostsCache.set(f,w(f,n.isTimedOut?P:b))]).then((function(){return e(r,o)}))},onFail:function(t){throw h(t),function(t,e){var r=t.content,n=t.status,a=r;try{a=JSON.parse(r).message}catch(t){}return function(t,e,r){return{name:\"ApiError\",message:t,status:e,transporterStackTrace:r}}(a,n,e)}(t,R(i))}};return t.requester.send(p).then((function(t){return function(t,e){return function(t){var e=t.status;return t.isTimedOut||function(t){var e=t.isTimedOut,r=t.status;return!e&&0==~~r}(t)||2!=~~(e/100)&&4!=~~(e/100)}(t)?e.onRetry(t):2==~~(t.status/100)?e.onSuccess(t):e.onFail(t)}(t,m)}))};return q(t.hostsCache,e).then((function(t){return p(o(t.statelessHosts).reverse(),t.getTimeout)}))}function k(t){var e=t.hostsCache,r=t.logger,n=t.requester,o=t.requestsCache,i=t.responsesCache,u=t.timeouts,s=t.userAgent,c=t.hosts,f=t.queryParameters,d={hostsCache:e,logger:r,requester:n,requestsCache:o,responsesCache:i,timeouts:u,userAgent:s,headers:t.headers,queryParameters:f,hosts:c.map((function(t){return O(t)})),read:function(t,e){var r=y(e,d.timeouts.read),n=function(){return S(d,d.hosts.filter((function(t){return 0!=(t.accept&g.Read)})),t,r)};if(!0!==(void 0!==r.cacheable?r.cacheable:t.cacheable))return n();var o={request:t,mappedRequestOptions:r,transporter:{queryParameters:d.queryParameters,headers:d.headers}};return d.responsesCache.get(o,(function(){return d.requestsCache.get(o,(function(){return d.requestsCache.set(o,n()).then((function(t){return Promise.all([d.requestsCache.delete(o),t])}),(function(t){return Promise.all([d.requestsCache.delete(o),Promise.reject(t)])})).then((function(t){var e=a(t,2);e[0];return e[1]}))}))}),{miss:function(t){return d.responsesCache.set(o,t)}})},write:function(t,e){return S(d,d.hosts.filter((function(t){return 0!=(t.accept&g.Write)})),t,y(e,d.timeouts.write))}};return d}function T(t){var e={value:\"Algolia for JavaScript (\".concat(t,\")\"),add:function(t){var r=\"; \".concat(t.segment).concat(void 0!==t.version?\" (\".concat(t.version,\")\"):\"\");return-1===e.value.indexOf(r)&&(e.value=\"\".concat(e.value).concat(r)),e}};return e}function N(t,e,r){var n=E(r),a=\"\".concat(t.protocol,\"://\").concat(t.url,\"/\").concat(\"/\"===e.charAt(0)?e.substr(1):e);return n.length&&(a+=\"?\".concat(n)),a}function E(t){return Object.keys(t).map((function(e){return h(\"%s=%s\",e,(r=t[e],\"[object Object]\"===Object.prototype.toString.call(r)||\"[object Array]\"===Object.prototype.toString.call(r)?JSON.stringify(t[e]):t[e]));var r})).join(\"&\")}function R(t){return t.map((function(t){return A(t)}))}function A(t){var e=t.request.headers[\"x-algolia-api-key\"]?{\"x-algolia-api-key\":\"*****\"}:{};return r(r({},t),{},{request:r(r({},t.request),{},{headers:r(r({},t.request.headers),e)})})}var C=function(t){return function(e,r){return t.transporter.write({method:j,path:\"2/abtests\",data:e},r)}},U=function(t){return function(e,r){return t.transporter.write({method:I,path:h(\"2/abtests/%s\",e)},r)}},z=function(t){return function(e,r){return t.transporter.read({method:x,path:h(\"2/abtests/%s\",e)},r)}},J=function(t){return function(e){return t.transporter.read({method:x,path:\"2/abtests\"},e)}},F=function(t){return function(e,r){return t.transporter.write({method:j,path:h(\"2/abtests/%s/stop\",e)},r)}},H=function(t){return function(e){return t.transporter.read({method:x,path:\"1/strategies/personalization\"},e)}},M=function(t){return function(e,r){return t.transporter.write({method:j,path:\"1/strategies/personalization\",data:e},r)}};function K(t){return function e(r){return t.request(r).then((function(n){if(void 0!==t.batch&&t.batch(n.hits),!t.shouldStop(n))return n.cursor?e({cursor:n.cursor}):e({page:(r.page||0)+1})}))}({})}var W=function(t){return function(e,a){var o=a||{},i=o.queryParameters,u=n(o,[\"queryParameters\"]),s=r({acl:e},void 0!==i?{queryParameters:i}:{});return d(t.transporter.write({method:j,path:\"1/keys\",data:s},u),(function(e,r){return f((function(n){return $(t)(e.key,r).catch((function(t){if(404!==t.status)throw t;return n()}))}))}))}},B=function(t){return function(e,r,n){var a=y(n);return a.queryParameters[\"X-Algolia-User-ID\"]=e,t.transporter.write({method:j,path:\"1/clusters/mapping\",data:{cluster:r}},a)}},Q=function(t){return function(e,r,n){return t.transporter.write({method:j,path:\"1/clusters/mapping/batch\",data:{users:e,cluster:r}},n)}},G=function(t){return function(e,r){return d(t.transporter.write({method:j,path:h(\"/1/dictionaries/%s/batch\",e),data:{clearExistingDictionaryEntries:!0,requests:{action:\"addEntry\",body:[]}}},r),(function(e,r){return xt(t)(e.taskID,r)}))}},L=function(t){return function(e,r,n){return d(t.transporter.write({method:j,path:h(\"1/indexes/%s/operation\",e),data:{operation:\"copy\",destination:r}},n),(function(r,n){return it(t)(e,{methods:{waitTask:fe}}).waitTask(r.taskID,n)}))}},V=function(t){return function(e,n,a){return L(t)(e,n,r(r({},a),{},{scope:[le.Rules]}))}},_=function(t){return function(e,n,a){return L(t)(e,n,r(r({},a),{},{scope:[le.Settings]}))}},X=function(t){return function(e,n,a){return L(t)(e,n,r(r({},a),{},{scope:[le.Synonyms]}))}},Y=function(t){return function(e,r){return d(t.transporter.write({method:I,path:h(\"1/keys/%s\",e)},r),(function(r,n){return f((function(r){return $(t)(e,n).then(r).catch((function(t){if(404!==t.status)throw t}))}))}))}},Z=function(t){return function(e,r,n){var a=r.map((function(t){return{action:\"deleteEntry\",body:{objectID:t}}}));return d(t.transporter.write({method:j,path:h(\"/1/dictionaries/%s/batch\",e),data:{clearExistingDictionaryEntries:!1,requests:a}},n),(function(e,r){return xt(t)(e.taskID,r)}))}},$=function(t){return function(e,r){return t.transporter.read({method:x,path:h(\"1/keys/%s\",e)},r)}},tt=function(t){return function(e){return t.transporter.read({method:x,path:\"/1/dictionaries/*/settings\"},e)}},et=function(t){return function(e){return t.transporter.read({method:x,path:\"1/logs\"},e)}},rt=function(t){return function(e){return t.transporter.read({method:x,path:\"1/clusters/mapping/top\"},e)}},nt=function(t){return function(e,r){return t.transporter.read({method:x,path:h(\"1/task/%s\",e.toString())},r)}},at=function(t){return function(e,r){return t.transporter.read({method:x,path:h(\"1/clusters/mapping/%s\",e)},r)}},ot=function(t){return function(e){var r=e||{},a=r.retrieveMappings,o=n(r,[\"retrieveMappings\"]);return!0===a&&(o.getClusters=!0),t.transporter.read({method:x,path:\"1/clusters/mapping/pending\"},o)}},it=function(t){return function(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n={transporter:t.transporter,appId:t.appId,indexName:e};return p(n,r.methods)}},ut=function(t){return function(e){return t.transporter.read({method:x,path:\"1/keys\"},e)}},st=function(t){return function(e){return t.transporter.read({method:x,path:\"1/clusters\"},e)}},ct=function(t){return function(e){return t.transporter.read({method:x,path:\"1/indexes\"},e)}},ft=function(t){return function(e){return t.transporter.read({method:x,path:\"1/clusters/mapping\"},e)}},dt=function(t){return function(e,r,n){return d(t.transporter.write({method:j,path:h(\"1/indexes/%s/operation\",e),data:{operation:\"move\",destination:r}},n),(function(r,n){return it(t)(e,{methods:{waitTask:fe}}).waitTask(r.taskID,n)}))}},lt=function(t){return function(e,r){return d(t.transporter.write({method:j,path:\"1/indexes/*/batch\",data:{requests:e}},r),(function(e,r){return Promise.all(Object.keys(e.taskID).map((function(n){return it(t)(n,{methods:{waitTask:fe}}).waitTask(e.taskID[n],r)})))}))}},pt=function(t){return function(e,r){return t.transporter.read({method:j,path:\"1/indexes/*/objects\",data:{requests:e}},r)}},ht=function(t){return function(e,n){var a=e.map((function(t){return r(r({},t),{},{params:E(t.params||{})})}));return t.transporter.read({method:j,path:\"1/indexes/*/queries\",data:{requests:a},cacheable:!0},n)}},mt=function(t){return function(e,a){return Promise.all(e.map((function(e){var o=e.params,i=o.facetName,u=o.facetQuery,s=n(o,[\"facetName\",\"facetQuery\"]);return it(t)(e.indexName,{methods:{searchForFacetValues:ie}}).searchForFacetValues(i,u,r(r({},a),s))})))}},yt=function(t){return function(e,r){var n=y(r);return n.queryParameters[\"X-Algolia-User-ID\"]=e,t.transporter.write({method:I,path:\"1/clusters/mapping\"},n)}},gt=function(t){return function(e,r,n){var a=r.map((function(t){return{action:\"addEntry\",body:t}}));return d(t.transporter.write({method:j,path:h(\"/1/dictionaries/%s/batch\",e),data:{clearExistingDictionaryEntries:!0,requests:a}},n),(function(e,r){return xt(t)(e.taskID,r)}))}},vt=function(t){return function(e,r){return d(t.transporter.write({method:j,path:h(\"1/keys/%s/restore\",e)},r),(function(r,n){return f((function(r){return $(t)(e,n).catch((function(t){if(404!==t.status)throw t;return r()}))}))}))}},bt=function(t){return function(e,r,n){var a=r.map((function(t){return{action:\"addEntry\",body:t}}));return d(t.transporter.write({method:j,path:h(\"/1/dictionaries/%s/batch\",e),data:{clearExistingDictionaryEntries:!1,requests:a}},n),(function(e,r){return xt(t)(e.taskID,r)}))}},Pt=function(t){return function(e,r,n){return t.transporter.read({method:j,path:h(\"/1/dictionaries/%s/search\",e),data:{query:r},cacheable:!0},n)}},wt=function(t){return function(e,r){return t.transporter.read({method:j,path:\"1/clusters/mapping/search\",data:{query:e}},r)}},Ot=function(t){return function(e,r){return d(t.transporter.write({method:D,path:\"/1/dictionaries/*/settings\",data:e},r),(function(e,r){return xt(t)(e.taskID,r)}))}},It=function(t){return function(e,r){var a=Object.assign({},r),o=r||{},i=o.queryParameters,u=n(o,[\"queryParameters\"]),s=i?{queryParameters:i}:{},c=[\"acl\",\"indexes\",\"referers\",\"restrictSources\",\"queryParameters\",\"description\",\"maxQueriesPerIPPerHour\",\"maxHitsPerQuery\"];return d(t.transporter.write({method:D,path:h(\"1/keys/%s\",e),data:s},u),(function(r,n){return f((function(r){return $(t)(e,n).then((function(t){return function(t){return Object.keys(a).filter((function(t){return-1!==c.indexOf(t)})).every((function(e){return t[e]===a[e]}))}(t)?Promise.resolve():r()}))}))}))}},xt=function(t){return function(e,r){return f((function(n){return nt(t)(e,r).then((function(t){return\"published\"!==t.status?n():void 0}))}))}},jt=function(t){return function(e,r){return d(t.transporter.write({method:j,path:h(\"1/indexes/%s/batch\",t.indexName),data:{requests:e}},r),(function(e,r){return fe(t)(e.taskID,r)}))}},Dt=function(t){return function(e){return K(r(r({shouldStop:function(t){return void 0===t.cursor}},e),{},{request:function(r){return t.transporter.read({method:j,path:h(\"1/indexes/%s/browse\",t.indexName),data:r},e)}}))}},qt=function(t){return function(e){var n=r({hitsPerPage:1e3},e);return K(r(r({shouldStop:function(t){return t.hits.length<n.hitsPerPage}},n),{},{request:function(e){return ue(t)(\"\",r(r({},n),e)).then((function(t){return r(r({},t),{},{hits:t.hits.map((function(t){return delete t._highlightResult,t}))})}))}}))}},St=function(t){return function(e){var n=r({hitsPerPage:1e3},e);return K(r(r({shouldStop:function(t){return t.hits.length<n.hitsPerPage}},n),{},{request:function(e){return se(t)(\"\",r(r({},n),e)).then((function(t){return r(r({},t),{},{hits:t.hits.map((function(t){return delete t._highlightResult,t}))})}))}}))}},kt=function(t){return function(e,r,a){var o=a||{},i=o.batchSize,u=n(o,[\"batchSize\"]),s={taskIDs:[],objectIDs:[]};return d(function n(){var a,o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,c=[];for(a=o;a<e.length&&(c.push(e[a]),c.length!==(i||1e3));a++);return 0===c.length?Promise.resolve(s):jt(t)(c.map((function(t){return{action:r,body:t}})),u).then((function(t){return s.objectIDs=s.objectIDs.concat(t.objectIDs),s.taskIDs.push(t.taskID),a++,n(a)}))}(),(function(e,r){return Promise.all(e.taskIDs.map((function(e){return fe(t)(e,r)})))}))}},Tt=function(t){return function(e){return d(t.transporter.write({method:j,path:h(\"1/indexes/%s/clear\",t.indexName)},e),(function(e,r){return fe(t)(e.taskID,r)}))}},Nt=function(t){return function(e){var r=e||{},a=r.forwardToReplicas,o=y(n(r,[\"forwardToReplicas\"]));return a&&(o.queryParameters.forwardToReplicas=1),d(t.transporter.write({method:j,path:h(\"1/indexes/%s/rules/clear\",t.indexName)},o),(function(e,r){return fe(t)(e.taskID,r)}))}},Et=function(t){return function(e){var r=e||{},a=r.forwardToReplicas,o=y(n(r,[\"forwardToReplicas\"]));return a&&(o.queryParameters.forwardToReplicas=1),d(t.transporter.write({method:j,path:h(\"1/indexes/%s/synonyms/clear\",t.indexName)},o),(function(e,r){return fe(t)(e.taskID,r)}))}},Rt=function(t){return function(e,r){return d(t.transporter.write({method:j,path:h(\"1/indexes/%s/deleteByQuery\",t.indexName),data:e},r),(function(e,r){return fe(t)(e.taskID,r)}))}},At=function(t){return function(e){return d(t.transporter.write({method:I,path:h(\"1/indexes/%s\",t.indexName)},e),(function(e,r){return fe(t)(e.taskID,r)}))}},Ct=function(t){return function(e,r){return d(Ut(t)([e],r).then((function(t){return{taskID:t.taskIDs[0]}})),(function(e,r){return fe(t)(e.taskID,r)}))}},Ut=function(t){return function(e,r){var n=e.map((function(t){return{objectID:t}}));return kt(t)(n,de.DeleteObject,r)}},zt=function(t){return function(e,r){var a=r||{},o=a.forwardToReplicas,i=y(n(a,[\"forwardToReplicas\"]));return o&&(i.queryParameters.forwardToReplicas=1),d(t.transporter.write({method:I,path:h(\"1/indexes/%s/rules/%s\",t.indexName,e)},i),(function(e,r){return fe(t)(e.taskID,r)}))}},Jt=function(t){return function(e,r){var a=r||{},o=a.forwardToReplicas,i=y(n(a,[\"forwardToReplicas\"]));return o&&(i.queryParameters.forwardToReplicas=1),d(t.transporter.write({method:I,path:h(\"1/indexes/%s/synonyms/%s\",t.indexName,e)},i),(function(e,r){return fe(t)(e.taskID,r)}))}},Ft=function(t){return function(e){return Gt(t)(e).then((function(){return!0})).catch((function(t){if(404!==t.status)throw t;return!1}))}},Ht=function(t){return function(e,r,n){return t.transporter.read({method:j,path:h(\"1/answers/%s/prediction\",t.indexName),data:{query:e,queryLanguages:r},cacheable:!0},n)}},Mt=function(t){return function(e,o){var i=o||{},u=i.query,s=i.paginate,c=n(i,[\"query\",\"paginate\"]),f=0;return function n(){return oe(t)(u||\"\",r(r({},c),{},{page:f})).then((function(t){for(var r=0,o=Object.entries(t.hits);r<o.length;r++){var i=a(o[r],2),u=i[0],c=i[1];if(e(c))return{object:c,position:parseInt(u,10),page:f}}if(f++,!1===s||f>=t.nbPages)throw{name:\"ObjectNotFoundError\",message:\"Object not found.\"};return n()}))}()}},Kt=function(t){return function(e,r){return t.transporter.read({method:x,path:h(\"1/indexes/%s/%s\",t.indexName,e)},r)}},Wt=function(){return function(t,e){for(var r=0,n=Object.entries(t.hits);r<n.length;r++){var o=a(n[r],2),i=o[0];if(o[1].objectID===e)return parseInt(i,10)}return-1}},Bt=function(t){return function(e,a){var o=a||{},i=o.attributesToRetrieve,u=n(o,[\"attributesToRetrieve\"]),s=e.map((function(e){return r({indexName:t.indexName,objectID:e},i?{attributesToRetrieve:i}:{})}));return t.transporter.read({method:j,path:\"1/indexes/*/objects\",data:{requests:s}},u)}},Qt=function(t){return function(e,r){return t.transporter.read({method:x,path:h(\"1/indexes/%s/rules/%s\",t.indexName,e)},r)}},Gt=function(t){return function(e){return t.transporter.read({method:x,path:h(\"1/indexes/%s/settings\",t.indexName),data:{getVersion:2}},e)}},Lt=function(t){return function(e,r){return t.transporter.read({method:x,path:h(\"1/indexes/%s/synonyms/%s\",t.indexName,e)},r)}},Vt=function(t){return function(e,r){return d(_t(t)([e],r).then((function(t){return{objectID:t.objectIDs[0],taskID:t.taskIDs[0]}})),(function(e,r){return fe(t)(e.taskID,r)}))}},_t=function(t){return function(e,r){var a=r||{},o=a.createIfNotExists,i=n(a,[\"createIfNotExists\"]),u=o?de.PartialUpdateObject:de.PartialUpdateObjectNoCreate;return kt(t)(e,u,i)}},Xt=function(t){return function(e,i){var u=i||{},s=u.safe,c=u.autoGenerateObjectIDIfNotExist,f=u.batchSize,l=n(u,[\"safe\",\"autoGenerateObjectIDIfNotExist\",\"batchSize\"]),p=function(e,r,n,a){return d(t.transporter.write({method:j,path:h(\"1/indexes/%s/operation\",e),data:{operation:n,destination:r}},a),(function(e,r){return fe(t)(e.taskID,r)}))},m=Math.random().toString(36).substring(7),y=\"\".concat(t.indexName,\"_tmp_\").concat(m),g=te({appId:t.appId,transporter:t.transporter,indexName:y}),v=[],b=p(t.indexName,y,\"copy\",r(r({},l),{},{scope:[\"settings\",\"synonyms\",\"rules\"]}));return v.push(b),d((s?b.wait(l):b).then((function(){var t=g(e,r(r({},l),{},{autoGenerateObjectIDIfNotExist:c,batchSize:f}));return v.push(t),s?t.wait(l):t})).then((function(){var e=p(y,t.indexName,\"move\",l);return v.push(e),s?e.wait(l):e})).then((function(){return Promise.all(v)})).then((function(t){var e=a(t,3),r=e[0],n=e[1],i=e[2];return{objectIDs:n.objectIDs,taskIDs:[r.taskID].concat(o(n.taskIDs),[i.taskID])}})),(function(t,e){return Promise.all(v.map((function(t){return t.wait(e)})))}))}},Yt=function(t){return function(e,n){return re(t)(e,r(r({},n),{},{clearExistingRules:!0}))}},Zt=function(t){return function(e,n){return ae(t)(e,r(r({},n),{},{clearExistingSynonyms:!0}))}},$t=function(t){return function(e,r){return d(te(t)([e],r).then((function(t){return{objectID:t.objectIDs[0],taskID:t.taskIDs[0]}})),(function(e,r){return fe(t)(e.taskID,r)}))}},te=function(t){return function(e,r){var a=r||{},o=a.autoGenerateObjectIDIfNotExist,i=n(a,[\"autoGenerateObjectIDIfNotExist\"]),u=o?de.AddObject:de.UpdateObject;if(u===de.UpdateObject){var s=!0,c=!1,f=void 0;try{for(var l,p=e[Symbol.iterator]();!(s=(l=p.next()).done);s=!0){if(void 0===l.value.objectID)return d(Promise.reject({name:\"MissingObjectIDError\",message:\"All objects must have an unique objectID (like a primary key) to be valid. Algolia is also able to generate objectIDs automatically but *it's not recommended*. To do it, use the `{'autoGenerateObjectIDIfNotExist': true}` option.\"}))}}catch(t){c=!0,f=t}finally{try{s||null==p.return||p.return()}finally{if(c)throw f}}}return kt(t)(e,u,i)}},ee=function(t){return function(e,r){return re(t)([e],r)}},re=function(t){return function(e,r){var a=r||{},o=a.forwardToReplicas,i=a.clearExistingRules,u=y(n(a,[\"forwardToReplicas\",\"clearExistingRules\"]));return o&&(u.queryParameters.forwardToReplicas=1),i&&(u.queryParameters.clearExistingRules=1),d(t.transporter.write({method:j,path:h(\"1/indexes/%s/rules/batch\",t.indexName),data:e},u),(function(e,r){return fe(t)(e.taskID,r)}))}},ne=function(t){return function(e,r){return ae(t)([e],r)}},ae=function(t){return function(e,r){var a=r||{},o=a.forwardToReplicas,i=a.clearExistingSynonyms,u=a.replaceExistingSynonyms,s=y(n(a,[\"forwardToReplicas\",\"clearExistingSynonyms\",\"replaceExistingSynonyms\"]));return o&&(s.queryParameters.forwardToReplicas=1),(u||i)&&(s.queryParameters.replaceExistingSynonyms=1),d(t.transporter.write({method:j,path:h(\"1/indexes/%s/synonyms/batch\",t.indexName),data:e},s),(function(e,r){return fe(t)(e.taskID,r)}))}},oe=function(t){return function(e,r){return t.transporter.read({method:j,path:h(\"1/indexes/%s/query\",t.indexName),data:{query:e},cacheable:!0},r)}},ie=function(t){return function(e,r,n){return t.transporter.read({method:j,path:h(\"1/indexes/%s/facets/%s/query\",t.indexName,e),data:{facetQuery:r},cacheable:!0},n)}},ue=function(t){return function(e,r){return t.transporter.read({method:j,path:h(\"1/indexes/%s/rules/search\",t.indexName),data:{query:e}},r)}},se=function(t){return function(e,r){return t.transporter.read({method:j,path:h(\"1/indexes/%s/synonyms/search\",t.indexName),data:{query:e}},r)}},ce=function(t){return function(e,r){var a=r||{},o=a.forwardToReplicas,i=y(n(a,[\"forwardToReplicas\"]));return o&&(i.queryParameters.forwardToReplicas=1),d(t.transporter.write({method:D,path:h(\"1/indexes/%s/settings\",t.indexName),data:e},i),(function(e,r){return fe(t)(e.taskID,r)}))}},fe=function(t){return function(e,r){return f((function(n){return function(t){return function(e,r){return t.transporter.read({method:x,path:h(\"1/indexes/%s/task/%s\",t.indexName,e.toString())},r)}}(t)(e,r).then((function(t){return\"published\"!==t.status?n():void 0}))}))}},de={AddObject:\"addObject\",UpdateObject:\"updateObject\",PartialUpdateObject:\"partialUpdateObject\",PartialUpdateObjectNoCreate:\"partialUpdateObjectNoCreate\",DeleteObject:\"deleteObject\",DeleteIndex:\"delete\",ClearIndex:\"clear\"},le={Settings:\"settings\",Synonyms:\"synonyms\",Rules:\"rules\"},pe=1,he=2,me=3;function ye(t,e,n){var a,o={appId:t,apiKey:e,timeouts:{connect:1,read:2,write:30},requester:{send:function(t){return new Promise((function(e){var r=new XMLHttpRequest;r.open(t.method,t.url,!0),Object.keys(t.headers).forEach((function(e){return r.setRequestHeader(e,t.headers[e])}));var n,a=function(t,n){return setTimeout((function(){r.abort(),e({status:0,content:n,isTimedOut:!0})}),1e3*t)},o=a(t.connectTimeout,\"Connection timeout\");r.onreadystatechange=function(){r.readyState>r.OPENED&&void 0===n&&(clearTimeout(o),n=a(t.responseTimeout,\"Socket timeout\"))},r.onerror=function(){0===r.status&&(clearTimeout(o),clearTimeout(n),e({content:r.responseText||\"Network request failed\",status:r.status,isTimedOut:!1}))},r.onload=function(){clearTimeout(o),clearTimeout(n),e({content:r.responseText,status:r.status,isTimedOut:!1})},r.send(t.data)}))}},logger:(a=me,{debug:function(t,e){return pe>=a&&console.debug(t,e),Promise.resolve()},info:function(t,e){return he>=a&&console.info(t,e),Promise.resolve()},error:function(t,e){return console.error(t,e),Promise.resolve()}}),responsesCache:s(),requestsCache:s({serializable:!1}),hostsCache:u({caches:[i({key:\"\".concat(\"4.10.3\",\"-\").concat(t)}),s()]}),userAgent:T(\"4.10.3\").add({segment:\"Browser\"})},f=r(r({},o),n),d=function(){return function(t){return function(t){var e=t.region||\"us\",n=c(m.WithinHeaders,t.appId,t.apiKey),a=k(r(r({hosts:[{url:\"personalization.\".concat(e,\".algolia.com\")}]},t),{},{headers:r(r(r({},n.headers()),{\"content-type\":\"application/json\"}),t.headers),queryParameters:r(r({},n.queryParameters()),t.queryParameters)}));return p({appId:t.appId,transporter:a},t.methods)}(r(r(r({},o),t),{},{methods:{getPersonalizationStrategy:H,setPersonalizationStrategy:M}}))}};return function(t){var e=t.appId,n=c(void 0!==t.authMode?t.authMode:m.WithinHeaders,e,t.apiKey),a=k(r(r({hosts:[{url:\"\".concat(e,\"-dsn.algolia.net\"),accept:g.Read},{url:\"\".concat(e,\".algolia.net\"),accept:g.Write}].concat(l([{url:\"\".concat(e,\"-1.algolianet.com\")},{url:\"\".concat(e,\"-2.algolianet.com\")},{url:\"\".concat(e,\"-3.algolianet.com\")}]))},t),{},{headers:r(r(r({},n.headers()),{\"content-type\":\"application/x-www-form-urlencoded\"}),t.headers),queryParameters:r(r({},n.queryParameters()),t.queryParameters)}));return p({transporter:a,appId:e,addAlgoliaAgent:function(t,e){a.userAgent.add({segment:t,version:e})},clearCache:function(){return Promise.all([a.requestsCache.clear(),a.responsesCache.clear()]).then((function(){}))}},t.methods)}(r(r({},f),{},{methods:{search:ht,searchForFacetValues:mt,multipleBatch:lt,multipleGetObjects:pt,multipleQueries:ht,copyIndex:L,copySettings:_,copySynonyms:X,copyRules:V,moveIndex:dt,listIndices:ct,getLogs:et,listClusters:st,multipleSearchForFacetValues:mt,getApiKey:$,addApiKey:W,listApiKeys:ut,updateApiKey:It,deleteApiKey:Y,restoreApiKey:vt,assignUserID:B,assignUserIDs:Q,getUserID:at,searchUserIDs:wt,listUserIDs:ft,getTopUserIDs:rt,removeUserID:yt,hasPendingMappings:ot,clearDictionaryEntries:G,deleteDictionaryEntries:Z,getDictionarySettings:tt,getAppTask:nt,replaceDictionaryEntries:gt,saveDictionaryEntries:bt,searchDictionaryEntries:Pt,setDictionarySettings:Ot,waitAppTask:xt,initIndex:function(t){return function(e){return it(t)(e,{methods:{batch:jt,delete:At,findAnswers:Ht,getObject:Kt,getObjects:Bt,saveObject:$t,saveObjects:te,search:oe,searchForFacetValues:ie,waitTask:fe,setSettings:ce,getSettings:Gt,partialUpdateObject:Vt,partialUpdateObjects:_t,deleteObject:Ct,deleteObjects:Ut,deleteBy:Rt,clearObjects:Tt,browseObjects:Dt,getObjectPosition:Wt,findObject:Mt,exists:Ft,saveSynonym:ne,saveSynonyms:ae,getSynonym:Lt,searchSynonyms:se,browseSynonyms:St,deleteSynonym:Jt,clearSynonyms:Et,replaceAllObjects:Xt,replaceAllSynonyms:Zt,searchRules:ue,getRule:Qt,deleteRule:zt,saveRule:ee,saveRules:re,replaceAllRules:Yt,browseRules:qt,clearRules:Nt}})}},initAnalytics:function(){return function(t){return function(t){var e=t.region||\"us\",n=c(m.WithinHeaders,t.appId,t.apiKey),a=k(r(r({hosts:[{url:\"analytics.\".concat(e,\".algolia.com\")}]},t),{},{headers:r(r(r({},n.headers()),{\"content-type\":\"application/json\"}),t.headers),queryParameters:r(r({},n.queryParameters()),t.queryParameters)}));return p({appId:t.appId,transporter:a},t.methods)}(r(r(r({},o),t),{},{methods:{addABTest:C,getABTest:z,getABTests:J,stopABTest:F,deleteABTest:U}}))}},initPersonalization:d,initRecommendation:function(){return function(t){return f.logger.info(\"The `initRecommendation` method is deprecated. Use `initPersonalization` instead.\"),d()(t)}}}}))}return ye.version=\"4.10.3\",ye}));\n","import algoliasearch from 'algoliasearch';\n\nconst client = algoliasearch('9ALKW0EDLK', 'e26f227f28a5434dd8f751fce0959525');\nconst index = client.initIndex('elisp-demos');\n\nconst $searchBox = document.querySelector('#searchBox input[type=search]');\nconst $hits = document.querySelector('#hits');\n\nfunction renderHits(query) {\n  index.search(query).then((result) => {\n    // Please sanitize user-provided data when using `innerHTML` to avoid XSS\n    $hits.innerHTML = `\n      <ol class=\"ais-hits\">\n        ${result.hits\n          .map(\n            (hit) =>\n              `<li class=\"ais-hits--item\">\n      <article>\n      <h1>${hit._highlightResult.name.value}</h1>\n      <h5>Example</h5>\n      <p><code>${hit.demo_src}</code></p>\n      <h5>Result</h5>\n      <p><code>${hit.demo_result}</code></p>\n      </article>\n      </li>`\n          )\n          .join('')}\n      </ol>`;\n  });\n}\n\n$searchBox.addEventListener('input', (event) => {\n  const query = event.target.value;\n\n  renderHits(query);\n});\n\nrenderHits('');\n"]}