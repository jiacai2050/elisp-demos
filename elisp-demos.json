[
  {
    "name": "%",
    "demo_src": "(% 9 4)<br>",
    "demo_result": "1"
  },
  {
    "name": "*",
    "demo_src": "(* 2 3)<br>",
    "demo_result": "6"
  },
  {
    "name": "+",
    "demo_src": "(+ 1 2 3)<br>",
    "demo_result": "6"
  },
  {
    "name": "-",
    "demo_src": "(- 3 1)<br>",
    "demo_result": "2"
  },
  {
    "name": "-->",
    "demo_src": "(--> \"def\" (concat \"abc\" it \"ghi\") (upcase it))<br>",
    "demo_result": "\"ABCDEFGHI\""
  },
  {
    "name": "--all?",
    "demo_src": "(--all? (= 0 (% it 2)) '(2 4 6))<br>",
    "demo_result": "t"
  },
  {
    "name": "--annotate",
    "demo_src": "(--annotate (< 1 it) '(0 1 2 3))<br>",
    "demo_result": "((nil . 0)<br> (nil . 1)<br> (t . 2)<br> (t . 3))"
  },
  {
    "name": "--any?",
    "demo_src": "(--any? (> it 3) '(1 2 3 4))<br>",
    "demo_result": "t"
  },
  {
    "name": "--count",
    "demo_src": "(--count (< it 4) '(1 2 3 4))<br>",
    "demo_result": "3"
  },
  {
    "name": "--dotimes",
    "demo_src": "(--dotimes 3 (princ it))<br>",
    "demo_result": "\"012\""
  },
  {
    "name": "--drop-while",
    "demo_src": "(--drop-while (< it 4) '(1 2 3 4 3 2 1))<br>",
    "demo_result": "(4 3 2 1)"
  },
  {
    "name": "--filter",
    "demo_src": "(--filter (= 0 (% it 2)) '(1 2 3 4))<br>",
    "demo_result": "(2 4)"
  },
  {
    "name": "--find-index",
    "demo_src": "(--find-index (< 5 it) '(2 4 1 6 3 3 5 8))<br>",
    "demo_result": "3"
  },
  {
    "name": "--find-indices",
    "demo_src": "(--find-indices (zerop (% it 2)) '(1 2 3 4))<br>",
    "demo_result": "(1 3)"
  },
  {
    "name": "--find-last-index",
    "demo_src": "(--find-last-index (< 5 it) '(2 7 1 6 3 8 5 2))<br>",
    "demo_result": "5"
  },
  {
    "name": "--fix",
    "demo_src": "(--fix (if (zerop it)<br>           it<br>         (1- it))<br>       5)<br>",
    "demo_result": "0"
  },
  {
    "name": "--if-let",
    "demo_src": "(--if-let (cl-evenp 4)<br>    it<br>  nil)<br>",
    "demo_result": "t"
  },
  {
    "name": "--iterate",
    "demo_src": "(--iterate (* it it) 2 5)<br>",
    "demo_result": "(2 4 16 256 65536)"
  },
  {
    "name": "--keep",
    "demo_src": "(--keep (and (cl-evenp it) (* it it))<br>        '(1 2 3 4))<br>",
    "demo_result": "(4 16)"
  },
  {
    "name": "--last",
    "demo_src": "(--last (> (length it) 3) '(\"a\" \"looong\" \"word\" \"and\" \"short\" \"one\"))<br>",
    "demo_result": "\"short\""
  },
  {
    "name": "--map",
    "demo_src": "(--map (* it it) '(1 2 3 4))<br>",
    "demo_result": "(1 4 9 16)"
  },
  {
    "name": "--map-first",
    "demo_src": "(--map-first (> it 2) (* it it) '(1 2 3 4))<br>",
    "demo_result": "(1 2 9 4)"
  },
  {
    "name": "--map-indexed",
    "demo_src": "(--map-indexed (cons it-index it) '(a b c d))<br>",
    "demo_result": "((0 . a)<br> (1 . b)<br> (2 . c)<br> (3 . d))"
  },
  {
    "name": "--map-last",
    "demo_src": "(--map-last (> it 2) (* it it) '(1 2 3 4))<br>",
    "demo_result": "(1 2 3 16)"
  },
  {
    "name": "--map-when",
    "demo_src": "(--map-when (numberp it) (* it it) '(a b 1 2 3))<br>",
    "demo_result": "(a b 1 4 9)"
  },
  {
    "name": "--mapcat",
    "demo_src": "(--mapcat<br> (list (car it) (cdr it))<br> '((x . 1) (y . 2) (z . 3)))<br>",
    "demo_result": "(x 1 y 2 z 3)"
  },
  {
    "name": "--min-by",
    "demo_src": "(--min-by (> (length it) (length other)) '((1 2 3) (2) (3 2)))<br>",
    "demo_result": "(2)"
  },
  {
    "name": "--none?",
    "demo_src": "(--none? (= 0 (% it 2)) '(1 3 5 7))<br>",
    "demo_result": "t"
  },
  {
    "name": "--only-some?",
    "demo_src": "(--only-some? (zerop (% it 2)) '(1 2 3))<br>",
    "demo_result": "t"
  },
  {
    "name": "--partition-by",
    "demo_src": "(--partition-by (< it 3) '(1 2 3 4 3 2 1))<br>",
    "demo_result": "((1 2)<br> (3 4 3)<br> (2 1))"
  },
  {
    "name": "--partition-by-header",
    "demo_src": "(--partition-by-header (= it 1) '(1 2 3 1 2 1 2 3 4))<br>",
    "demo_result": "((1 2 3)<br> (1 2)<br> (1 2 3 4))"
  },
  {
    "name": "--reduce",
    "demo_src": "(--reduce (format \"%s-%d\" acc it) '(1 2 3))<br>",
    "demo_result": "\"1-2-3\""
  },
  {
    "name": "--reduce-from",
    "demo_src": "(--reduce-from (concat acc \" \" it) \"START\" '(\"a\" \"b\" \"c\"))<br>",
    "demo_result": "\"START a b c\""
  },
  {
    "name": "--reduce-r",
    "demo_src": "(--reduce-r (format \"%s-%d\" acc it) '(1 2 3))<br>",
    "demo_result": "\"3-2-1\""
  },
  {
    "name": "--reduce-r-from",
    "demo_src": "(--reduce-r-from (concat it \" \" acc) \"END\" '(\"a\" \"b\" \"c\"))<br>",
    "demo_result": "\"a b c END\""
  },
  {
    "name": "--remove",
    "demo_src": "(--remove (= 0 (% it 2)) '(1 2 3 4))<br>",
    "demo_result": "(1 3)"
  },
  {
    "name": "--remove-first",
    "demo_src": "(--remove-first (zerop (% it 2)) '(1 2 3 4))<br>",
    "demo_result": "(1 3 4)"
  },
  {
    "name": "--remove-last",
    "demo_src": "(--remove-last #'cl-evenp '(1 2 3 4))<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "--separate",
    "demo_src": "(--separate (< it 5) '(3 7 5 9 3 2 1 4 6))<br>",
    "demo_result": "((3 3 2 1 4)<br> (7 5 9 6))"
  },
  {
    "name": "--some",
    "demo_src": "(--some (and (> it 0) it) '(0 1 2))<br>",
    "demo_result": "1"
  },
  {
    "name": "--splice",
    "demo_src": "(--splice t<br>          (list (car it) (cdr it))<br>          '((x . 1)<br>            (y . 2)<br>            (z . 3)))<br>",
    "demo_result": "(x 1 y 2 z 3)"
  },
  {
    "name": "--splice-list",
    "demo_src": "(--splice-list (keywordp it) '(a b c) '(1 :foo 2))<br>",
    "demo_result": "(1 a b c 2)"
  },
  {
    "name": "--split-when",
    "demo_src": "(--split-when (memq it '(&optional &rest))<br>              '(a b &optional c d &rest args))<br>",
    "demo_result": "((a b)<br> (c d)<br> (args))"
  },
  {
    "name": "--take-while",
    "demo_src": "(--take-while (< it 4) '(1 2 3 4 3 2 1))<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "--tree-map",
    "demo_src": "(--tree-map (length it) '(\"<body>\" (\"<p>\" \"text\" \"</p>\") \"</body>\"))<br>",
    "demo_result": "(6<br> (3 4 4)<br> 7)"
  },
  {
    "name": "--tree-reduce",
    "demo_src": "(--tree-reduce<br> (cond ((stringp it) (concat it \" \" acc))<br>       (t (let ((sn (symbol-name it)))<br>            (concat \"<\" sn \">\" acc \"</\" sn \">\"))))<br> '(body (p \"some words\") (div \"more\" (b \"bold\") \"words\")))<br>",
    "demo_result": "\"<body><p>some words</p> <div>more <b>bold</b> words</div></body>\""
  },
  {
    "name": "--unfold",
    "demo_src": "(--unfold (when it (cons it (cdr it))) '(1 2 3 4))<br>",
    "demo_result": "((1 2 3 4)<br> (2 3 4)<br> (3 4)<br> (4))"
  },
  {
    "name": "--update-at",
    "demo_src": "(--update-at 2 (length it) '(\"foo\" \"bar\" \"baz\" \"quux\"))<br>",
    "demo_result": "(\"foo\" \"bar\" 3 \"quux\")"
  },
  {
    "name": "--when-let",
    "demo_src": "(--when-let (string-match \"d\" \"abcd\")<br>  (+ it 2))<br>",
    "demo_result": "5"
  },
  {
    "name": "->",
    "demo_src": ";; (/ (- 5 1) 2)<br>(-> 5 (- 1) (/ 2))<br>",
    "demo_result": "2"
  },
  {
    "name": "->>",
    "demo_src": ";; (+ 40 (- (/ 25 (+ 20 5))))<br>(->> 5<br>     (+ 20)<br>     (/ 25)<br>     -<br>     (+ 40))<br>",
    "demo_result": "39"
  },
  {
    "name": "-all?",
    "demo_src": "(-all? #'cl-evenp '(2 4 6 8))<br>",
    "demo_result": "t"
  },
  {
    "name": "-andfn",
    "demo_src": "(funcall (-andfn #'numberp #'cl-evenp) 4)<br>",
    "demo_result": "t"
  },
  {
    "name": "-annotate",
    "demo_src": "(-annotate #'1+ '(1 2 3))<br>",
    "demo_result": "((2 . 1)<br> (3 . 2)<br> (4 . 3))"
  },
  {
    "name": "-any?",
    "demo_src": "(-any? #'cl-evenp '(1 2 3))<br>",
    "demo_result": "t"
  },
  {
    "name": "-applify",
    "demo_src": "(funcall (-applify #'<) '(3 6))<br>",
    "demo_result": "t"
  },
  {
    "name": "-as->",
    "demo_src": "(-as-> 3 my-var 1+ (/ my-var 2))<br>",
    "demo_result": "2"
  },
  {
    "name": "-butlast",
    "demo_src": "(-butlast '(1 2 3))<br>",
    "demo_result": "(1 2)"
  },
  {
    "name": "-clone",
    "demo_src": "(let* ((original '(:x (1 2 3)))<br>       (shallow (-copy original))<br>       (deep (-clone original)))<br>  (list (eq (plist-get original :x) (plist-get shallow :x))<br>        (eq (plist-get original :x) (plist-get deep :x))))<br>",
    "demo_result": "(t nil)"
  },
  {
    "name": "-common-prefix",
    "demo_src": "(-common-prefix '(1 2) '(1 2 3) '(1 2 3 4))<br>",
    "demo_result": "(1 2)"
  },
  {
    "name": "-compose",
    "demo_src": "(funcall (-compose #'string-trim #'upcase) \" hello \")<br>",
    "demo_result": "\"HELLO\""
  },
  {
    "name": "-concat",
    "demo_src": "(-concat '(1) '(2 3) '(4))<br>",
    "demo_result": "(1 2 3 4)"
  },
  {
    "name": "-cons*",
    "demo_src": "(-cons* 1 2 3)<br>",
    "demo_result": "(1 2 . 3)"
  },
  {
    "name": "-const",
    "demo_src": "(-map (-const 1) '(\"a\" \"b\" \"c\" \"d\"))<br>",
    "demo_result": "(1 1 1 1)"
  },
  {
    "name": "-contains?",
    "demo_src": "(-contains? '(1 2 3) 1)<br>",
    "demo_result": "t"
  },
  {
    "name": "-copy",
    "demo_src": "(-copy '(1 2 3))<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "-count",
    "demo_src": "(-count #'cl-evenp '(1 2 3 4 5))<br>",
    "demo_result": "2"
  },
  {
    "name": "-counter",
    "demo_src": "(let ((c (-counter 0)))<br>  (list (funcall c)<br>        (funcall c)<br>        (funcall c)))<br>",
    "demo_result": "(0 1 2)"
  },
  {
    "name": "-cut",
    "demo_src": "(funcall (-cut list 1 <> 3 <> 5) 2 4)<br>",
    "demo_result": "(1 2 3 4 5)"
  },
  {
    "name": "-cycle",
    "demo_src": "(-cycle '(1 2 3))<br>",
    "demo_result": "(1 2 3 1 2 . #2)"
  },
  {
    "name": "-difference",
    "demo_src": "(-difference '(1 2 3 4) '(3 4 5 6))<br>",
    "demo_result": "(1 2)"
  },
  {
    "name": "-distinct",
    "demo_src": "(-distinct '(1 2 2 4))<br>",
    "demo_result": "(1 2 4)"
  },
  {
    "name": "-dotimes",
    "demo_src": "(-dotimes 3 #'princ)<br>",
    "demo_result": "\"012\""
  },
  {
    "name": "-doto",
    "demo_src": "(-doto '(1 . 2) (setcar 3) (setcdr 4))<br>",
    "demo_result": "(3 . 4)"
  },
  {
    "name": "-drop",
    "demo_src": "(-drop 3 '(1 2 3 4 5))<br>",
    "demo_result": "(4 5)"
  },
  {
    "name": "-drop-last",
    "demo_src": "(-drop-last 3 '(1 2 3 4 5))<br>",
    "demo_result": "(1 2)"
  },
  {
    "name": "-drop-while",
    "demo_src": "(-drop-while #'cl-evenp '(1 2 3 4))<br>",
    "demo_result": "(1 2 3 4)"
  },
  {
    "name": "-each",
    "demo_src": "(-each '(1 2 3) #'princ)<br>",
    "demo_result": "\"123\""
  },
  {
    "name": "-each-indexed",
    "demo_src": "(-each-indexed '(a b c) (lambda (index item)<br>                          (princ index)<br>                          (princ item)))<br>",
    "demo_result": "\"0a1b2c\""
  },
  {
    "name": "-each-r",
    "demo_src": "(-each-r '(1 2 3) #'princ)<br>",
    "demo_result": "\"321\""
  },
  {
    "name": "-each-r-while",
    "demo_src": "(-each-r-while '(2 4 5 6) #'cl-evenp #'princ)<br>",
    "demo_result": "\"6\""
  },
  {
    "name": "-each-while",
    "demo_src": "(-each-while '(2 4 5 6) #'cl-evenp #'princ)<br>",
    "demo_result": "\"24\""
  },
  {
    "name": "-elem-index",
    "demo_src": "(-elem-index 2 '(6 7 8 2 3 4))<br>",
    "demo_result": "3"
  },
  {
    "name": "-elem-indices",
    "demo_src": "(-elem-indices 2 '(6 7 8 2 3 4 2 1))<br>",
    "demo_result": "(3 6)"
  },
  {
    "name": "-fifth-item",
    "demo_src": "(-fifth-item '(1 2 3 4 5))<br>",
    "demo_result": "5"
  },
  {
    "name": "-filter",
    "demo_src": "(-filter #'cl-evenp '(1 2 3 4))<br>",
    "demo_result": "(2 4)"
  },
  {
    "name": "-find-index",
    "demo_src": "(-find-index #'cl-evenp '(1 2 3 4))<br>",
    "demo_result": "1"
  },
  {
    "name": "-find-indices",
    "demo_src": "(-find-indices #'cl-evenp '(1 2 3 4))<br>",
    "demo_result": "(1 3)"
  },
  {
    "name": "-find-last-index",
    "demo_src": "(-find-last-index #'cl-evenp '(1 2 3 4))<br>",
    "demo_result": "3"
  },
  {
    "name": "-first",
    "demo_src": "(-first #'cl-evenp '(1 2 3))<br>",
    "demo_result": "2"
  },
  {
    "name": "-first-item",
    "demo_src": "(-first-item '(1 2 3))<br>",
    "demo_result": "1"
  },
  {
    "name": "-fix",
    "demo_src": "(-fix (lambda (x) (expt (+ x 10) 0.25))<br>      2.0)<br>",
    "demo_result": "1.8555845286409378"
  },
  {
    "name": "-fixfn",
    "demo_src": "(funcall (-fixfn (lambda (x) (expt (+ x 10) 0.25)))<br>         2.0)<br>",
    "demo_result": "1.8555845286409378"
  },
  {
    "name": "-flatten",
    "demo_src": "(-flatten '((1 (2 3) (((4 (5)))))))<br>",
    "demo_result": "(1 2 3 4 5)"
  },
  {
    "name": "-flatten-n",
    "demo_src": "(-flatten-n 1 '((1 2) ((3 4) ((5 6)))))<br>",
    "demo_result": "(1 2<br>   (3 4)<br>   ((5 6)))"
  },
  {
    "name": "-flip",
    "demo_src": "(funcall (-flip #'<) 2 1)<br>",
    "demo_result": "t"
  },
  {
    "name": "-fourth-item",
    "demo_src": "(-fourth-item '(1 2 3 4))<br>",
    "demo_result": "4"
  },
  {
    "name": "-group-by",
    "demo_src": "(-group-by #'cl-evenp '(1 2 3 4))<br>",
    "demo_result": "((nil 1 3)<br> (t 2 4))"
  },
  {
    "name": "-if-let",
    "demo_src": "(-if-let (match-index (string-match \"d\" \"abc\"))<br>    (+ match-index 3)<br>  7)<br>",
    "demo_result": "7"
  },
  {
    "name": "-inits",
    "demo_src": "(-inits '(1 2 3 4))<br>",
    "demo_result": "(nil<br> (1)<br> (1 2)<br> (1 2 3)<br> (1 2 3 4))"
  },
  {
    "name": "-insert-at",
    "demo_src": "(-insert-at 1 'x '(a b c))<br>",
    "demo_result": "(a x b c)"
  },
  {
    "name": "-interleave",
    "demo_src": "(-interleave '(1 2) '(\"a\" \"b\"))<br>",
    "demo_result": "(1 \"a\" 2 \"b\")"
  },
  {
    "name": "-interpose",
    "demo_src": "(-interpose \"-\" '(\"a\" \"b\" \"c\"))<br>",
    "demo_result": "(\"a\" \"-\" \"b\" \"-\" \"c\")"
  },
  {
    "name": "-intersection",
    "demo_src": "(-intersection '(1 2 3 4) '(3 4 5 6))<br>",
    "demo_result": "(3 4)"
  },
  {
    "name": "-is-infix?",
    "demo_src": "(-is-infix? '(2 3 4) '(1 2 3 4 5))<br>",
    "demo_result": "t"
  },
  {
    "name": "-is-prefix?",
    "demo_src": "(-is-prefix? '(1 2 3) '(1 2 3 4 5))<br>",
    "demo_result": "t"
  },
  {
    "name": "-is-suffix?",
    "demo_src": "(-is-suffix? '(3 4 5) '(1 2 3 4 5))<br>",
    "demo_result": "t"
  },
  {
    "name": "-iterate",
    "demo_src": "(-iterate #'1+ 1 10)<br>",
    "demo_result": "(1 2 3 4 5 6 7 8 9 10)"
  },
  {
    "name": "-iteratefn",
    "demo_src": "(funcall (-iteratefn #'1+ 3) 1)<br>",
    "demo_result": "4"
  },
  {
    "name": "-juxt",
    "demo_src": "(funcall (-juxt #'+ #'-) 3 5)<br>",
    "demo_result": "(8 -2)"
  },
  {
    "name": "-keep",
    "demo_src": "(-keep (lambda (num)<br>         (and (cl-evenp num) (* num num)))<br>       '(1 2 3 4))<br>",
    "demo_result": "(4 16)"
  },
  {
    "name": "-lambda",
    "demo_src": "(-map (-lambda ((x . y))<br>        (+ x y))<br>      '((1 . 2)<br>        (3 . 4)<br>        (5 . 6)))<br>",
    "demo_result": "(3 7 11)"
  },
  {
    "name": "-last",
    "demo_src": "(-last #'cl-evenp '(1 2 3 4 5 6 3 3 3))<br>",
    "demo_result": "6"
  },
  {
    "name": "-last-item",
    "demo_src": "(-last-item '(1 2 3))<br>",
    "demo_result": "3"
  },
  {
    "name": "-let",
    "demo_src": "(-let (([a (b c) d]<br>        [1 (2 3) 4]))<br>  (list a b c d))<br>",
    "demo_result": "(1 2 3 4)"
  },
  {
    "name": "-let*",
    "demo_src": "(-let* (((a b) '( 1 2))<br>        ((c d) (--map (+ it 2) (list a b))))<br>  (list a b c d))<br>",
    "demo_result": "(1 2 3 4)"
  },
  {
    "name": "-list",
    "demo_src": "(-list 1 2 3)<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "-map",
    "demo_src": "(-map #'1+ '(1 2 3))<br>",
    "demo_result": "(2 3 4)"
  },
  {
    "name": "-map-first",
    "demo_src": "(-map-first #'numberp #'1+ '(a b 1 2 3))<br>",
    "demo_result": "(a b 2 2 3)"
  },
  {
    "name": "-map-indexed",
    "demo_src": "(-map-indexed (lambda (index item)<br>                (cons index item))<br>              '(a b c d))<br>",
    "demo_result": "((0 . a)<br> (1 . b)<br> (2 . c)<br> (3 . d))"
  },
  {
    "name": "-map-last",
    "demo_src": "(-map-last #'numberp #'1+ '(a b c 1 2))<br>",
    "demo_result": "(a b c 1 3)"
  },
  {
    "name": "-map-when",
    "demo_src": "(-map-when #'numberp #'1+ '(a b 1 2 3))<br>",
    "demo_result": "(a b 2 3 4)"
  },
  {
    "name": "-mapcat",
    "demo_src": "(-mapcat<br> (pcase-lambda (`(,key . ,val))<br>   (list (intern (format \":%s\" key))<br>         val))<br> '((x . 1) (y . 2) (z . 3)))<br>",
    "demo_result": "(:x 1 :y 2 :z 3)"
  },
  {
    "name": "-max",
    "demo_src": "(-max '(1 2 3))<br>",
    "demo_result": "3"
  },
  {
    "name": "-max-by",
    "demo_src": "(--max-by (> (length it) (length other)) '((1 2 3) (2) (3 2)))<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "-min",
    "demo_src": "(-min '(3 2 1))<br>",
    "demo_result": "1"
  },
  {
    "name": "-min-by",
    "demo_src": "(-min-by #'> '(4 3 6 1))<br>",
    "demo_result": "1"
  },
  {
    "name": "-non-nil",
    "demo_src": "(-non-nil '(1 nil 2 nil nil 3 4 nil 5 nil))<br>",
    "demo_result": "(1 2 3 4 5)"
  },
  {
    "name": "-none?",
    "demo_src": "(-none? #'cl-evenp '(1 3 5 7))<br>",
    "demo_result": "t"
  },
  {
    "name": "-not",
    "demo_src": "(funcall (-not #'cl-evenp) 5)<br>",
    "demo_result": "t"
  },
  {
    "name": "-on",
    "demo_src": "(-sort (-on #'< #'length) '((1 2 3) (1) (1 2)))<br>",
    "demo_result": "((1)<br> (1 2)<br> (1 2 3))"
  },
  {
    "name": "-only-some?",
    "demo_src": "(-only-some? #'cl-evenp '(1 2 3))<br>",
    "demo_result": "t"
  },
  {
    "name": "-orfn",
    "demo_src": "(funcall (-orfn #'stringp #'cl-evenp) 4)<br>",
    "demo_result": "t"
  },
  {
    "name": "-pad",
    "demo_src": "(-pad 0 '(1 2 3) '(4 5))<br>",
    "demo_result": "((1 2 3)<br> (4 5 0))"
  },
  {
    "name": "-partial",
    "demo_src": "(funcall (-partial '- 5) 3)<br>",
    "demo_result": "2"
  },
  {
    "name": "-partition",
    "demo_src": "(-partition 2 '(1 2 3 4 5))<br>",
    "demo_result": "((1 2)<br> (3 4))"
  },
  {
    "name": "-partition-after-item",
    "demo_src": "(-partition-after-item '| '(a | b | c))<br>",
    "demo_result": "((a |)<br> (b |)<br> (c))"
  },
  {
    "name": "-partition-after-pred",
    "demo_src": "(-partition-after-pred #'cl-oddp '(1 2 3 4))<br>",
    "demo_result": "((1)<br> (2 3)<br> (4))"
  },
  {
    "name": "-partition-all",
    "demo_src": "(-partition-all 2 '(1 2 3 4 5))<br>",
    "demo_result": "((1 2)<br> (3 4)<br> (5))"
  },
  {
    "name": "-partition-all-in-steps",
    "demo_src": "(-partition-all-in-steps 3 2 '(1 2 3 4))<br>",
    "demo_result": "((1 2 3)<br> (3 4))"
  },
  {
    "name": "-partition-before-item",
    "demo_src": "(-partition-before-item '| '(a | b | c))<br>",
    "demo_result": "((a)<br> (| b)<br> (| c))"
  },
  {
    "name": "-partition-before-pred",
    "demo_src": "(-partition-before-pred #'cl-oddp '(0 1 2 3 4))<br>",
    "demo_result": "((0)<br> (1 2)<br> (3 4))"
  },
  {
    "name": "-partition-by",
    "demo_src": "(-partition-by #'cl-evenp '(1 1 2 2 2 3 4 6 8))<br>",
    "demo_result": "((1 1)<br> (2 2 2)<br> (3)<br> (4 6 8))"
  },
  {
    "name": "-partition-by-header",
    "demo_src": "(-partition-by-header #'cl-evenp '(2 1 1 1 4 1 3 5 6 6 1))<br>",
    "demo_result": "((2 1 1 1)<br> (4 1 3 5)<br> (6 6 1))"
  },
  {
    "name": "-partition-in-steps",
    "demo_src": "(-partition-in-steps 2 1 '(1 2 3 4))<br>",
    "demo_result": "((1 2)<br> (2 3)<br> (3 4))"
  },
  {
    "name": "-permutations",
    "demo_src": "(-permutations '(a b c))<br>",
    "demo_result": "((a b c)<br> (a c b)<br> (b a c)<br> (b c a)<br> (c a b)<br> (c b a))"
  },
  {
    "name": "-powerset",
    "demo_src": "(-powerset '(x y z))<br>",
    "demo_result": "((x y z)<br> (x y)<br> (x z)<br> (x)<br> (y z)<br> (y)<br> (z)<br> nil)"
  },
  {
    "name": "-prodfn",
    "demo_src": "(funcall (-prodfn '1+ '1- 'number-to-string)<br>         '(1 2 3))<br>",
    "demo_result": "(2 1 \"3\")"
  },
  {
    "name": "-product",
    "demo_src": "(-product '(1 2 3 4))<br>",
    "demo_result": "24"
  },
  {
    "name": "-reduce",
    "demo_src": "(-reduce #'- '(1 2 3 4))<br>",
    "demo_result": "-8"
  },
  {
    "name": "-reduce-from",
    "demo_src": "(-reduce-from #'- 10 '(1 2 3))<br>",
    "demo_result": "4"
  },
  {
    "name": "-reduce-r",
    "demo_src": ";; (- 1 (- 2 (- 3 4)))<br>(-reduce-r #'- '(1 2 3 4))<br>",
    "demo_result": "-2"
  },
  {
    "name": "-reduce-r-from",
    "demo_src": ";; (- 3 (- 2 (- 1 10)))<br>(-reduce-r-from #'- 10 '(1 2 3))<br>",
    "demo_result": "-8"
  },
  {
    "name": "-reductions",
    "demo_src": "(-reductions '+ '(1 2 3 4))<br>",
    "demo_result": "(1 3 6 10)"
  },
  {
    "name": "-reductions-from",
    "demo_src": "(-reductions-from '*  1 '(1 2 3 4))<br>",
    "demo_result": "(1 1 2 6 24)"
  },
  {
    "name": "-reductions-r",
    "demo_src": "(-reductions-r #'+ '(1 2 3 4))<br>",
    "demo_result": "(10 9 7 4)"
  },
  {
    "name": "-reductions-r-from",
    "demo_src": "(-reductions-r-from '* 1 '(1 2 3 4))<br>",
    "demo_result": "(24 24 12 4 1)"
  },
  {
    "name": "-remove",
    "demo_src": "(-remove #'cl-evenp '(1 2 3 4))<br>",
    "demo_result": "(1 3)"
  },
  {
    "name": "-remove-at",
    "demo_src": "(-remove-at 0 '(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\"))<br>",
    "demo_result": "(\"1\" \"2\" \"3\" \"4\" \"5\")"
  },
  {
    "name": "-remove-at-indices",
    "demo_src": "(-remove-at-indices '(0 3) '(a b c d))<br>",
    "demo_result": "(b c)"
  },
  {
    "name": "-remove-first",
    "demo_src": "(-remove-first #'cl-evenp '(1 2 3 4))<br>",
    "demo_result": "(1 3 4)"
  },
  {
    "name": "-remove-item",
    "demo_src": "(-remove-item 'foo '(foo bar baz foo))<br>",
    "demo_result": "(bar baz)"
  },
  {
    "name": "-remove-last",
    "demo_src": "(-remove-last #'cl-evenp '(1 2 3 4))<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "-repeat",
    "demo_src": "(-repeat 3 'a)<br>",
    "demo_result": "(a a a)"
  },
  {
    "name": "-replace",
    "demo_src": "(-replace 1 \"1\" '(1 2 3 4 3 2 1))<br>",
    "demo_result": "(\"1\" 2 3 4 3 2 \"1\")"
  },
  {
    "name": "-replace-at",
    "demo_src": "(-replace-at 0 9 '(0 1 2 3 4 5))<br>",
    "demo_result": "(9 1 2 3 4 5)"
  },
  {
    "name": "-replace-first",
    "demo_src": "(-replace-first 1 \"1\" '(1 2 3 4 3 2 1))<br>",
    "demo_result": "(\"1\" 2 3 4 3 2 1)"
  },
  {
    "name": "-replace-last",
    "demo_src": "(-replace-last 1 \"1\" '(1 2 3 4 3 2 1))<br>",
    "demo_result": "(1 2 3 4 3 2 \"1\")"
  },
  {
    "name": "-rotate",
    "demo_src": "(-rotate 3 '(1 2 3 4 5 6 7))<br>",
    "demo_result": "(5 6 7 1 2 3 4)"
  },
  {
    "name": "-rpartial",
    "demo_src": "(funcall (-rpartial '- 5) 8)<br>",
    "demo_result": "3"
  },
  {
    "name": "-running-product",
    "demo_src": "(-running-product '(1 2 3 4))<br>",
    "demo_result": "(1 2 6 24)"
  },
  {
    "name": "-running-sum",
    "demo_src": "(-running-sum '(1 2 3 4))<br>",
    "demo_result": "(1 3 6 10)"
  },
  {
    "name": "-same-items?",
    "demo_src": "(-same-items? '(1 2 3) '(3 2 1))<br>",
    "demo_result": "t"
  },
  {
    "name": "-second-item",
    "demo_src": "(-second-item '(1 2 3))<br>",
    "demo_result": "2"
  },
  {
    "name": "-select-by-indices",
    "demo_src": "(-select-by-indices '(2 1 0) '(a b c))<br>",
    "demo_result": "(c b a)"
  },
  {
    "name": "-select-column",
    "demo_src": "(-select-column 1 '((1 2 3)<br>                    (a b c)<br>                    (:a :b :c)))<br>",
    "demo_result": "(2 b :b)"
  },
  {
    "name": "-select-columns",
    "demo_src": "(-select-columns '(0 2)<br>                 '((1 2 3)<br>                   (a b c)<br>                   (:a :b :c)))<br>",
    "demo_result": "((1 3)<br> (a c)<br> (:a :c))"
  },
  {
    "name": "-separate",
    "demo_src": "(-separate #'cdr '((1 2) (1) (1 2 3) (4)))<br>",
    "demo_result": "(((1 2)<br>  (1 2 3))<br> ((1)<br>  (4)))"
  },
  {
    "name": "-setq",
    "demo_src": "(let (a b)<br>  (-setq [a b] [1 2 3])<br>  (list a b))<br>",
    "demo_result": "(1 2)"
  },
  {
    "name": "-slice",
    "demo_src": "(-slice '(a b c d e) 1 4)<br>",
    "demo_result": "(b c d)"
  },
  {
    "name": "-snoc",
    "demo_src": "(-snoc '(1 2 3) 4 5 6)<br>",
    "demo_result": "(1 2 3 4 5 6)"
  },
  {
    "name": "-some",
    "demo_src": "(-some #'cl-evenp '(1 2 3))<br>",
    "demo_result": "t"
  },
  {
    "name": "-some-->",
    "demo_src": "(-some--> \"def\" (concat \"abc\" it \"ghi\"))<br>",
    "demo_result": "\"abcdefghi\""
  },
  {
    "name": "-some->",
    "demo_src": "(-some-> 6 (/ 2))<br>",
    "demo_result": "3"
  },
  {
    "name": "-some->>",
    "demo_src": "(-some->> '(2 4 6) (-last #'cl-evenp) (+ 100))<br>",
    "demo_result": "106"
  },
  {
    "name": "-sort",
    "demo_src": "(-sort #'< '(3 1 2))<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "-splice",
    "demo_src": "(-splice #'cl-evenp (lambda (x) (list x x)) '(1 2 3 4))<br>",
    "demo_result": "(1 2 2 3 4 4)"
  },
  {
    "name": "-splice-list",
    "demo_src": "(-splice-list 'keywordp '(a b c) '(1 :foo 2))<br>",
    "demo_result": "(1 a b c 2)"
  },
  {
    "name": "-split-at",
    "demo_src": "(-split-at 3 '(1 2 3 4 5))<br>",
    "demo_result": "((1 2 3)<br> (4 5))"
  },
  {
    "name": "-split-on",
    "demo_src": "(-split-on '| '(Nil | Leaf a | Node [Tree a]))<br>",
    "demo_result": "((Nil)<br> (Leaf a)<br> (Node<br>  [Tree a]))"
  },
  {
    "name": "-split-when",
    "demo_src": "(-split-when #'cl-evenp '(1 2 3 4 5 6))<br>",
    "demo_result": "((1)<br> (3)<br> (5))"
  },
  {
    "name": "-split-with",
    "demo_src": "(-split-with #'cl-evenp '(2 4 5 6))<br>",
    "demo_result": "((2 4)<br> (5 6))"
  },
  {
    "name": "-sum",
    "demo_src": "(-sum '(1 2 3 4))<br>",
    "demo_result": "10"
  },
  {
    "name": "-table",
    "demo_src": "(-table #'* '(1 2 3) '(1 2 3))<br>",
    "demo_result": "((1 2 3)<br> (2 4 6)<br> (3 6 9))"
  },
  {
    "name": "-table-flat",
    "demo_src": "(-table-flat #'list '(1 2 3) '(a b c))<br>",
    "demo_result": "((1 a)<br> (2 a)<br> (3 a)<br> (1 b)<br> (2 b)<br> (3 b)<br> (1 c)<br> (2 c)<br> (3 c))"
  },
  {
    "name": "-tails",
    "demo_src": "(-tails '(1 2 3 4))<br>",
    "demo_result": "((1 2 3 4)<br> (2 3 4)<br> (3 4)<br> (4)<br> nil)"
  },
  {
    "name": "-take",
    "demo_src": "(-take 3 '(1 2 3 4 5))<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "-take-last",
    "demo_src": "(-take-last 3 '(1 2 3 4 5))<br>",
    "demo_result": "(3 4 5)"
  },
  {
    "name": "-take-while",
    "demo_src": "(-take-while #'cl-evenp '(2 4 5 6))<br>",
    "demo_result": "(2 4)"
  },
  {
    "name": "-third-item",
    "demo_src": "(-third-item '(1 2 3))<br>",
    "demo_result": "3"
  },
  {
    "name": "-tree-map",
    "demo_src": "(-tree-map #'1+ '(1 (2 3) (4 (5 6) 7)))<br>",
    "demo_result": "(2<br> (3 4)<br> (5<br>  (6 7)<br>  8))"
  },
  {
    "name": "-tree-map-nodes",
    "demo_src": "(-tree-map-nodes<br> 'keywordp<br> (lambda (x) (symbol-name x))<br> '(1 :foo 4 ((5 6 :bar) :baz 8)))<br>",
    "demo_result": "(1 \":foo\" 4<br>   ((5 6 \":bar\")<br>    \":baz\" 8))"
  },
  {
    "name": "-tree-reduce",
    "demo_src": "(-tree-reduce #'+ '(1 (2 3) (4 5)))<br>",
    "demo_result": "15"
  },
  {
    "name": "-tree-reduce-from",
    "demo_src": "(-tree-reduce-from '+ 1 '(1 (1 1) ((1))))<br>",
    "demo_result": "8"
  },
  {
    "name": "-unfold",
    "demo_src": "(-unfold (lambda (x)<br>           (unless (= x 0) (cons x (1- x))))<br>         10)<br>",
    "demo_result": "(10 9 8 7 6 5 4 3 2 1)"
  },
  {
    "name": "-union",
    "demo_src": "(-union '(1 1 2 2) '(3 2 1))<br>",
    "demo_result": "(1 1 2 2 3)"
  },
  {
    "name": "-unzip",
    "demo_src": "(-unzip '((1 2) (3 4) (5 6) (7 8) (9 10)))<br>",
    "demo_result": "((1 3 5 7 9)<br> (2 4 6 8 10))"
  },
  {
    "name": "-update-at",
    "demo_src": "(-update-at 0 (lambda (x) (+ x 9)) '(0 1 2 3 4 5))<br>",
    "demo_result": "(9 1 2 3 4 5)"
  },
  {
    "name": "-when-let",
    "demo_src": "(-when-let (match-index (string-match \"d\" \"abcd\"))<br>  (+ match-index 2))<br>",
    "demo_result": "5"
  },
  {
    "name": "-when-let*",
    "demo_src": "(-when-let* ((x 5)<br>             (y 3)<br>             (z (+ y 4)))<br>  (+ x y z))<br>",
    "demo_result": "15"
  },
  {
    "name": "-zip",
    "demo_src": "(-zip '(1 2 3) '(4 5 6))<br>",
    "demo_result": "((1 . 4)<br> (2 . 5)<br> (3 . 6))"
  },
  {
    "name": "-zip-fill",
    "demo_src": "(-zip-fill 0 '(1 2 3 4 5) '(6 7 8 9))<br>",
    "demo_result": "((1 . 6)<br> (2 . 7)<br> (3 . 8)<br> (4 . 9)<br> (5 . 0))"
  },
  {
    "name": "-zip-with",
    "demo_src": "(-zip-with 'cons '(1 2 3) '(4 5 6))<br>",
    "demo_result": "((1 . 4)<br> (2 . 5)<br> (3 . 6))"
  },
  {
    "name": "/",
    "demo_src": "(/ 6 2)<br>",
    "demo_result": "3"
  },
  {
    "name": "/=",
    "demo_src": "(/= 2 3)<br>",
    "demo_result": "t"
  },
  {
    "name": "1+",
    "demo_src": "(1+ 2)<br>",
    "demo_result": "3"
  },
  {
    "name": "1-",
    "demo_src": "(1- 2)<br>",
    "demo_result": "1"
  },
  {
    "name": "<",
    "demo_src": "(< 2 3)<br>",
    "demo_result": "t"
  },
  {
    "name": "<=",
    "demo_src": "(<= 2 2.0)<br>",
    "demo_result": "t"
  },
  {
    "name": "=",
    "demo_src": "(= 1 1.0)<br>",
    "demo_result": "t"
  },
  {
    "name": ">",
    "demo_src": "(> 3 2)<br>",
    "demo_result": "t"
  },
  {
    "name": ">=",
    "demo_src": "(>= 2 2.0)<br>",
    "demo_result": "t"
  },
  {
    "name": "`",
    "demo_src": "(apply #'+ `(1 ,@(number-sequence 2 4) 5))<br>",
    "demo_result": "15"
  },
  {
    "name": "abbreviate-file-name",
    "demo_src": "(abbreviate-file-name user-init-file)<br>",
    "demo_result": "\"~/.emacs.d/init.el\""
  },
  {
    "name": "abs",
    "demo_src": "(abs -4)<br>",
    "demo_result": "4"
  },
  {
    "name": "accept-process-output",
    "demo_src": ";; Block untill the process is done<br>(accept-process-output<br> (start-process-shell-command \"sh\" nil \"sleep 3\"))<br>",
    "demo_result": "nil"
  },
  {
    "name": "access-file",
    "demo_src": "(access-file user-init-file \"Can't open your init file\")<br>",
    "demo_result": "nil"
  },
  {
    "name": "acos",
    "demo_src": "(acos 0)<br>",
    "demo_result": "1.5707963267948966"
  },
  {
    "name": "active-minibuffer-window",
    "demo_src": "(active-minibuffer-window)<br>",
    "demo_result": "nil"
  },
  {
    "name": "add-face-text-property",
    "demo_src": "(let ((s \"RED|GREEN\"))<br>  (add-face-text-property 0 3 '(:foreground \"red\") 'append s)<br>  (add-face-text-property 4 9 '(:foreground \"green\") 'append s)<br>  (message s))<br>",
    "demo_result": "#(\"RED|GREEN\" 0 3<br>  (face<br>   (:foreground \"red\"))<br>  4 9<br>  (face<br>   (:foreground \"green\")))"
  },
  {
    "name": "add-hook",
    "demo_src": "(add-hook 'lisp-interaction-mode-hook #'prettify-symbols-mode)<br>",
    "demo_result": ""
  },
  {
    "name": "add-text-properties",
    "demo_src": "(let ((s \"hello\"))<br>  (add-text-properties 0 (length s) '(display \"world\") s)<br>  s)<br>",
    "demo_result": "#(\"hello\" 0 5<br>  (display \"world\"))"
  },
  {
    "name": "add-to-list",
    "demo_src": "(let ((l '(1 2)))<br>  (add-to-list 'l 1)<br>  (add-to-list 'l 2)<br>  (add-to-list 'l 3)<br>  l)<br>",
    "demo_result": "(3 1 2)"
  },
  {
    "name": "advice-add",
    "demo_src": "(advice-add 'emacs-version :around #'ignore)<br>",
    "demo_result": ""
  },
  {
    "name": "advice-eval-interactive-spec",
    "demo_src": "(advice-eval-interactive-spec \"r\\nP\")<br>",
    "demo_result": ""
  },
  {
    "name": "advice-remove",
    "demo_src": "(advice-remove 'emacs-version #'ignore)<br>",
    "demo_result": ""
  },
  {
    "name": "aio-defun",
    "demo_src": "(aio-defun foo (url)<br>  (aio-await (aio-sleep 3))<br>  (message \"Done sleeping. Now fetching %s\" url)<br>  (let* ((result (aio-await (aio-url-retrieve url)))<br>         (contents (with-current-buffer (cdr result)<br>                     (prog1 (buffer-string)<br>                       (kill-buffer)))))<br>    (message \"Result: %s\" contents)))<br><br>(foo \"http://example.com\")<br>",
    "demo_result": "#s(aio-promise nil nil)"
  },
  {
    "name": "aio-lambda",
    "demo_src": "(funcall<br> (aio-lambda ()<br>   (aio-await (aio-sleep 3))<br>   (message \"Done sleeping 3 seconds\")))<br>",
    "demo_result": "#s(aio-promise nil nil)"
  },
  {
    "name": "alist-get",
    "demo_src": "(alist-get 'y '((x . 1) (y . 2)))<br>",
    "demo_result": "2"
  },
  {
    "name": "all-completions",
    "demo_src": "(all-completions \"b\" '(\"foo\" \"bar\" \"baz\"))<br>",
    "demo_result": "(\"bar\" \"baz\")"
  },
  {
    "name": "and",
    "demo_src": "(list (and 1 2 3)<br>      (and 1 nil 3))<br>",
    "demo_result": "(3 nil)"
  },
  {
    "name": "and-let*",
    "demo_src": "(and-let* ((bashrc (expand-file-name \"~/.bashrc\"))<br>           ((file-readable-p bashrc))<br>           (attrs (file-attributes bashrc))<br>           (mt (file-attribute-modification-time attrs))<br>           ((format-time-string \"%Y-%m-%d\" mt))))<br>",
    "demo_result": "\"2018-10-27\""
  },
  {
    "name": "ansi-color-apply",
    "demo_src": "(ansi-color-apply (concat \"\\e[31m\" \"Hello world\" \"\\e[0m\"))<br>",
    "demo_result": "#(\"Hello world\" 0 11<br>  (font-lock-face<br>   (foreground-color . \"red3\")))"
  },
  {
    "name": "append",
    "demo_src": "(append '(1) '(2 3 4) nil)<br>",
    "demo_result": "(1 2 3 4)"
  },
  {
    "name": "apply",
    "demo_src": "(apply #'+ 1 2 '(3 4))<br>",
    "demo_result": "10"
  },
  {
    "name": "apply-partially",
    "demo_src": "(mapcar (apply-partially #'* 2) '(1 2 3))<br>",
    "demo_result": "(2 4 6)"
  },
  {
    "name": "aref",
    "demo_src": "(aref [1 2 3] 0)<br>",
    "demo_result": "1"
  },
  {
    "name": "arrayp",
    "demo_src": "(arrayp [])<br>",
    "demo_result": "t"
  },
  {
    "name": "aset",
    "demo_src": "(let ((array [vector 1 2 3]))<br>  (aset array 0 100)<br>  array)<br>",
    "demo_result": "[100 1 2 3]"
  },
  {
    "name": "ash",
    "demo_src": "(ash #B111 1)<br>",
    "demo_result": "14"
  },
  {
    "name": "asin",
    "demo_src": "(asin 1)<br>",
    "demo_result": "1.5707963267948966"
  },
  {
    "name": "assoc",
    "demo_src": "(assoc \"two\" '((\"one\" 1)<br>               (\"two\" 2)<br>               (\"three\" 3)))<br>",
    "demo_result": "(\"two\" 2)"
  },
  {
    "name": "assoc-default",
    "demo_src": "(list (assoc-default 'x '(x (y 2)) #'eq 1)<br>      (assoc-default 'y '(x (y 2)) #'eq 1)<br>      (assoc-default 'z '(x (y 2)) #'eq 1))<br>",
    "demo_result": "(1<br> (2)<br> nil)"
  },
  {
    "name": "assoc-delete-all",
    "demo_src": "(assoc-delete-all \"a\" '((\"a\" 1)<br>                        (\"b\" 2)<br>                        (\"c\" 3)<br>                        (\"a\" 4)))<br>",
    "demo_result": "((\"b\" 2)<br> (\"c\" 3))"
  },
  {
    "name": "assoc-string",
    "demo_src": "(assoc-string \"path\"<br>              '((\"Domain\" . \"example.com\")<br>                (\"Path\" . \"/\"))<br>              'ignore-case)<br>",
    "demo_result": "(\"Path\" . \"/\")"
  },
  {
    "name": "assq",
    "demo_src": "(assq 'y '((x . 1)<br>           (y . 2)<br>           (z . 3)))<br>",
    "demo_result": "(y . 2)"
  },
  {
    "name": "assq-delete-all",
    "demo_src": "(let ((alist (list (cons 1 11)<br>                   (cons 2 22)<br>                   (cons 3 33)<br>                   (cons 1 1111))))<br>  (setq alist (assq-delete-all 1 alist)))<br>",
    "demo_result": "((2 . 22)<br> (3 . 33))"
  },
  {
    "name": "atan",
    "demo_src": "(atan 1)<br>",
    "demo_result": "0.7853981633974483"
  },
  {
    "name": "atom",
    "demo_src": "(atom 42)<br>",
    "demo_result": "t"
  },
  {
    "name": "atomic-change-group",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello\")<br>  (ignore-errors<br>    (atomic-change-group<br>      (insert \"world\")<br>      (error \"I cannot do it\")))<br>  (buffer-string))<br>",
    "demo_result": "\"hello\""
  },
  {
    "name": "auth-source-forget-all-cached",
    "demo_src": "(auth-source-forget-all-cached)<br>",
    "demo_result": "nil"
  },
  {
    "name": "auth-source-pick-first-password",
    "demo_src": "(auth-source-pick-first-password :host \"vlc\")<br>",
    "demo_result": "\"secret\""
  },
  {
    "name": "auth-source-search",
    "demo_src": "(let ((tmpfile (make-temp-file \"elisp-demos-authinfo-\")))<br>  (write-region<br>   (concat \"machine foo.com login user1 password pass1\" \"\\n\"<br>           \"machine bar.com login user2 password pass2\" \"\\n\"<br>           \"machine baz.com login user3 password pass2\" \"\\n\")<br>   nil tmpfile)<br>  (unwind-protect<br>      (let ((auth-source-do-cache nil)<br>            (auth-sources (list tmpfile)))<br>        (when-let ((plist (car (auth-source-search :host \"bar.com\" :max 1)))<br>                   (user (plist-get plist :user))<br>                   (pass (funcall (plist-get plist :secret))))<br>          (list user pass)))<br>    (delete-file tmpfile)))<br>",
    "demo_result": "(\"user2\" \"pass2\")"
  },
  {
    "name": "autoload",
    "demo_src": "(autoload #'dired-omit-mode \"dired-x\")<br>",
    "demo_result": "nil"
  },
  {
    "name": "autoloadp",
    "demo_src": "(autoloadp (symbol-function 'run-python))<br>",
    "demo_result": "t"
  },
  {
    "name": "base64-decode-region",
    "demo_src": "(with-temp-buffer<br>  (insert \"aGVsbG8=\")<br>  (base64-decode-region (point-min) (point-max))<br>  (buffer-string))<br>",
    "demo_result": "\"hello\""
  },
  {
    "name": "base64-decode-string",
    "demo_src": "(base64-decode-string \"aGVsbG8=\")<br>",
    "demo_result": "\"hello\""
  },
  {
    "name": "base64-encode-region",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello\")<br>  (base64-encode-region (point-min) (point-max))<br>  (buffer-string))<br>",
    "demo_result": "\"aGVsbG8=\""
  },
  {
    "name": "base64-encode-string",
    "demo_src": "(base64-encode-string \"hello\")<br>",
    "demo_result": "\"aGVsbG8=\""
  },
  {
    "name": "beginning-of-line",
    "demo_src": "(beginning-of-line)<br>",
    "demo_result": "nil"
  },
  {
    "name": "benchmark",
    "demo_src": "(benchmark 10 '(sit-for 0.1))<br>",
    "demo_result": "\"Elapsed time: 1.087937s\""
  },
  {
    "name": "benchmark-elapse",
    "demo_src": "(benchmark-elapse<br>  (sit-for 1))<br>",
    "demo_result": "1.011088"
  },
  {
    "name": "benchmark-progn",
    "demo_src": "(benchmark-progn<br>  (dotimes (i 1000000 i)))<br>",
    "demo_result": "1000000"
  },
  {
    "name": "benchmark-run",
    "demo_src": "(benchmark-run 10 (sit-for 0.1))<br>",
    "demo_result": "(1.072229 0 0.0)"
  },
  {
    "name": "benchmark-run-compiled",
    "demo_src": "(benchmark-run 1<br>  (let ((i 10000000))<br>    (while (> (setq i (1- i)) 0))))<br>",
    "demo_result": "(1.377883 0 0.0)"
  },
  {
    "name": "bind-keys",
    "demo_src": "(bind-keys :map winner-mode-map<br>           (\"M-N\" . winner-redo)<br>           (\"M-P\" . winner-undo))<br>",
    "demo_result": ""
  },
  {
    "name": "bindat-get-field",
    "demo_src": "(let* ((binary-data [192 168 1 100 192 168 1 101 4 210 17 215])<br>       (spec '((dest-ip ip)<br>               (src-ip ip)<br>               (dest-port u16)<br>               (src-port u16)))<br>       (decoded (bindat-unpack spec binary-data)))<br>  (bindat-get-field decoded 'src-ip))<br>",
    "demo_result": "[192 168 1 101]"
  },
  {
    "name": "bindat-ip-to-string",
    "demo_src": "(bindat-ip-to-string [127 0 0 1])<br>",
    "demo_result": "\"127.0.0.1\""
  },
  {
    "name": "bindat-length",
    "demo_src": "(bindat-length '((id strz 8)<br>                 (ip ip))<br>               '((id . [?A ?B ?C ?D ?E ?F ?G 0])<br>                 (ip . [192 168 1 100])))<br>",
    "demo_result": "12"
  },
  {
    "name": "bindat-pack",
    "demo_src": "(string-to-vector<br> (bindat-pack '((dest-ip ip)<br>                (src-ip ip)<br>                (dest-port u16)<br>                (src-port u16))<br>              '((dest-ip   . [192 168 1 100])<br>                (src-ip    . [192 168 1 101])<br>                (dest-port . 1234)<br>                (src-port  . 4567))))<br>",
    "demo_result": "[192 168 1 100 192 168 1 101 4 210 17 215]"
  },
  {
    "name": "bindat-unpack",
    "demo_src": "(bindat-unpack '((dest-ip ip)<br>                 (src-ip ip)<br>                 (dest-port u16)<br>                 (src-port u16))<br>               [192 168 1 100 192 168 1 101 4 210 17 215])<br>",
    "demo_result": "((src-port . 4567)<br> (dest-port . 1234)<br> (src-ip .<br>         [192 168 1 101])<br> (dest-ip .<br>          [192 168 1 100]))"
  },
  {
    "name": "bindat-vector-to-hex",
    "demo_src": "(bindat-vector-to-hex [0 1 2 255 256] \" \")<br>",
    "demo_result": "\"00 01 02 ff 100\""
  },
  {
    "name": "bobp",
    "demo_src": "(with-temp-buffer (bobp))<br>",
    "demo_result": "t"
  },
  {
    "name": "bolp",
    "demo_src": "(with-temp-buffer (bolp))<br>",
    "demo_result": "t"
  },
  {
    "name": "bool-vector",
    "demo_src": "(vconcat (bool-vector nil t nil t))<br>",
    "demo_result": "[nil t nil t]"
  },
  {
    "name": "bool-vector-count-consecutive",
    "demo_src": "(bool-vector-count-consecutive<br> (bool-vector nil t nil t t t t t nil)<br> t 3)<br>",
    "demo_result": "5"
  },
  {
    "name": "bool-vector-count-population",
    "demo_src": "(bool-vector-count-population (bool-vector nil t nil t t))<br>",
    "demo_result": "3"
  },
  {
    "name": "bool-vector-exclusive-or",
    "demo_src": "(vconcat<br> (bool-vector-exclusive-or (bool-vector nil t nil t)<br>                           (bool-vector nil t t nil)))<br>",
    "demo_result": "[nil nil t t]"
  },
  {
    "name": "bool-vector-intersection",
    "demo_src": "(vconcat<br> (bool-vector-intersection (bool-vector nil nil t t)<br>                           (bool-vector nil t nil t)))<br>",
    "demo_result": "[nil nil nil t]"
  },
  {
    "name": "bool-vector-not",
    "demo_src": "(vconcat (bool-vector-not (bool-vector nil t)))<br>",
    "demo_result": "[t nil]"
  },
  {
    "name": "bool-vector-p",
    "demo_src": "(bool-vector-p (bool-vector))<br>",
    "demo_result": "t"
  },
  {
    "name": "bool-vector-set-difference",
    "demo_src": "(vconcat<br> (bool-vector-set-difference (bool-vector nil nil t t)<br>                             (bool-vector nil t nil t)))<br>",
    "demo_result": "[nil nil t nil]"
  },
  {
    "name": "bool-vector-subsetp",
    "demo_src": "(bool-vector-subsetp (bool-vector t nil t nil)<br>                     (bool-vector t t t t))<br>",
    "demo_result": "t"
  },
  {
    "name": "bool-vector-union",
    "demo_src": "(vconcat<br> (bool-vector-union (bool-vector nil nil t t)<br>                    (bool-vector nil t nil t)))<br>",
    "demo_result": "[nil t t t]"
  },
  {
    "name": "booleanp",
    "demo_src": "(booleanp nil)<br>",
    "demo_result": "t"
  },
  {
    "name": "boundp",
    "demo_src": "(boundp 'emacs-version)<br>",
    "demo_result": "t"
  },
  {
    "name": "buffer-chars-modified-tick",
    "demo_src": "(buffer-chars-modified-tick)<br>",
    "demo_result": "62893"
  },
  {
    "name": "buffer-end",
    "demo_src": "(cl-assert (buffer-end +1) (point-max))<br>(cl-assert (buffer-end -1) (point-min))<br>",
    "demo_result": "nil"
  },
  {
    "name": "buffer-file-name",
    "demo_src": "(buffer-file-name)<br>",
    "demo_result": "\"/Users/xcy/src/elisp-demos/elisp-demos.org\""
  },
  {
    "name": "buffer-hash",
    "demo_src": "(with-temp-buffer<br>  (buffer-hash))<br>",
    "demo_result": "\"da39a3ee5e6b4b0d3255bfef95601890afd80709\""
  },
  {
    "name": "buffer-list",
    "demo_src": "(message \"There are %d buffers\" (length (buffer-list)))<br>",
    "demo_result": "\"There are 32 buffers\""
  },
  {
    "name": "buffer-live-p",
    "demo_src": "(let ((buffer (generate-new-buffer \"*test*\")))<br>  (list buffer<br>        (buffer-live-p buffer)<br>        (kill-buffer buffer)<br>        (buffer-live-p buffer)<br>        buffer))<br>",
    "demo_result": "(#<killed buffer> t t nil #<killed buffer>)"
  },
  {
    "name": "buffer-local-value",
    "demo_src": "(buffer-local-value 'major-mode (get-buffer \"*Messages*\"))<br>",
    "demo_result": "messages-buffer-mode"
  },
  {
    "name": "buffer-modified-p",
    "demo_src": "(buffer-modified-p)<br>",
    "demo_result": "t"
  },
  {
    "name": "buffer-modified-tick",
    "demo_src": "(buffer-modified-tick)<br>",
    "demo_result": "62561"
  },
  {
    "name": "buffer-name",
    "demo_src": "(buffer-name)<br>",
    "demo_result": "\"elisp-demos.org\""
  },
  {
    "name": "buffer-narrowed-p",
    "demo_src": "(list (buffer-narrowed-p)<br>      (with-temp-buffer<br>        (insert \"hello\")<br>        (narrow-to-region 1 2)<br>        (buffer-narrowed-p)))<br>",
    "demo_result": "(nil t)"
  },
  {
    "name": "buffer-size",
    "demo_src": "(buffer-size)<br>",
    "demo_result": "14480"
  },
  {
    "name": "buffer-string",
    "demo_src": "(with-temp-buffer<br>  (insert (propertize \"hello\" 'face 'bold))<br>  (buffer-string))<br>",
    "demo_result": "#(\"hello\" 0 5<br>  (face bold))"
  },
  {
    "name": "buffer-swap-text",
    "demo_src": "(let ((b1 (generate-new-buffer \"*buffer 1*\"))<br>      (b2 (generate-new-buffer \"*buffer 2*\")))<br>  (with-current-buffer b1<br>    (insert \"hello\")<br>    (with-current-buffer b2 (insert \"world\"))<br>    (buffer-swap-text b2)<br>    (list (buffer-string)<br>          (with-current-buffer b2 (buffer-string)))))<br>",
    "demo_result": "(\"world\" \"hello\")"
  },
  {
    "name": "bufferp",
    "demo_src": "(mapcar #'bufferp (list \"*Messages*\" (get-buffer \"*Messages*\")))<br>",
    "demo_result": "(nil t)"
  },
  {
    "name": "butlast",
    "demo_src": "(butlast '(1 2 3 4 5) 2)<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "byte-code-function-p",
    "demo_src": "(byte-code-function-p (symbol-function 'next-line))<br>",
    "demo_result": "t"
  },
  {
    "name": "byte-compile",
    "demo_src": "(byte-compile '(lambda (a b) (+ a a b)))<br>",
    "demo_result": ";; byte-compiled code is more efficient than interpreted code<br>(let* ((form '(let ((i 10000000))<br>                (while (> (setq i (- i 1)) 0))))<br>       (fun `(lambda () ,form))<br>       (compiled (byte-compile fun)))<br>  (list (benchmark-elapse 1 (funcall fun))<br>        (benchmark-elapse 1 (funcall compiled))))<br>"
  },
  {
    "name": "byte-to-position",
    "demo_src": "(with-temp-buffer<br>  (insert \"lambda λ\")<br>  (byte-to-position 10))<br>",
    "demo_result": "9"
  },
  {
    "name": "byte-to-string",
    "demo_src": "(byte-to-string 65)<br>",
    "demo_result": "\"A\""
  },
  {
    "name": "caar",
    "demo_src": "(caar '((42)))<br>",
    "demo_result": "42"
  },
  {
    "name": "cadr",
    "demo_src": "(cadr '(1 2 3))<br>",
    "demo_result": "2"
  },
  {
    "name": "calc-eval",
    "demo_src": "(calc-eval \"2 + 3\")<br>",
    "demo_result": "\"5\""
  },
  {
    "name": "calendar-absolute-from-gregorian",
    "demo_src": ";; How many days since the Gregorian date 12/31/1 BC<br>(calendar-absolute-from-gregorian<br> (calendar-current-date))<br>",
    "demo_result": "737031"
  },
  {
    "name": "calendar-chinese-from-absolute",
    "demo_src": "(calendar-chinese-from-absolute<br> (calendar-absolute-from-gregorian<br>  (calendar-current-date)))<br>",
    "demo_result": "(78 35 10 26)"
  },
  {
    "name": "calendar-current-date",
    "demo_src": "(calendar-current-date)<br>",
    "demo_result": "(12 3 2018)"
  },
  {
    "name": "call-interactively",
    "demo_src": "(call-interactively #'emacs-version)<br>",
    "demo_result": "\"GNU Emacs 26.1 (build 1, x86_64-apple-darwin18.2.0, Carbon Version 158 AppKit 1671.1) of 2018-11-11\""
  },
  {
    "name": "call-process",
    "demo_src": "(with-temp-buffer<br>  (list :exit-status<br>        (call-process \"echo\" nil t nil \"hello\" \"world\")<br>        :output<br>        (buffer-string)))<br>",
    "demo_result": "(:exit-status 0 :output \"hello world\\n\")"
  },
  {
    "name": "call-process-region",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello\\n\")<br>  (call-process-region (point-min) (point-max) \"wc\" t t)<br>  (buffer-string))<br>",
    "demo_result": "\"       1       1       6\\n\""
  },
  {
    "name": "call-process-shell-command",
    "demo_src": "(with-temp-buffer<br>  (list :exit-status<br>        (call-process-shell-command \"echo hello | wc\" nil t)<br>        :output<br>        (buffer-string)))<br>",
    "demo_result": "(:exit-status 0 :output \"       1       1       6\\n\")"
  },
  {
    "name": "cancel-timer",
    "demo_src": "(cancel-timer (run-at-time 1 nil #'ignore))<br>",
    "demo_result": "nil"
  },
  {
    "name": "capitalize",
    "demo_src": "(capitalize \"THE cat in the hat\")<br>",
    "demo_result": "\"The Cat In The Hat\""
  },
  {
    "name": "car",
    "demo_src": "(car '(a b c))<br>",
    "demo_result": "a"
  },
  {
    "name": "car-safe",
    "demo_src": "(car-safe '(1))<br>",
    "demo_result": "1"
  },
  {
    "name": "catch",
    "demo_src": "(catch 'break<br>  (while t<br>    (throw 'break 42)))<br>",
    "demo_result": "42"
  },
  {
    "name": "category-docstring",
    "demo_src": "(category-docstring ?a)<br>",
    "demo_result": "\"ASCII\\nASCII graphic characters 32-126 (ISO646 IRV:1983[4/0])\""
  },
  {
    "name": "category-set-mnemonics",
    "demo_src": "(category-set-mnemonics (char-category-set ?a))<br>",
    "demo_result": "\".Lalr\""
  },
  {
    "name": "cdar",
    "demo_src": "(cdar '((1 2 3)))<br>",
    "demo_result": "(2 3)"
  },
  {
    "name": "cddr",
    "demo_src": "(cddr '(1 2 3 4))<br>",
    "demo_result": "(3 4)"
  },
  {
    "name": "cdr",
    "demo_src": "(cdr '(a b c))<br>",
    "demo_result": "(b c)"
  },
  {
    "name": "cdr-safe",
    "demo_src": "(cdr-safe '(1 2 3))<br>",
    "demo_result": "(2 3)"
  },
  {
    "name": "ceiling",
    "demo_src": ";; -> +∞<br>(ceiling 1.2)<br>",
    "demo_result": "2"
  },
  {
    "name": "char-after",
    "demo_src": "(with-temp-buffer<br>  (insert \"ABC\")<br>  (string (char-after (point-min))))<br>",
    "demo_result": "\"A\""
  },
  {
    "name": "char-before",
    "demo_src": "(with-temp-buffer<br>  (insert \"ABC\")<br>  (string (char-before)))<br>",
    "demo_result": "\"C\""
  },
  {
    "name": "char-category-set",
    "demo_src": "(aref (char-category-set ?A) ?a)<br>",
    "demo_result": "t"
  },
  {
    "name": "char-equal",
    "demo_src": "(list (char-equal ?x ?X)<br>      (let ((case-fold-search nil))<br>        (char-equal ?x ?X)))<br>",
    "demo_result": "(t nil)"
  },
  {
    "name": "char-fold-to-regexp",
    "demo_src": "(char-fold-to-regexp \"(\")<br>",
    "demo_result": "\"[(⁽₍︵﹙（]\""
  },
  {
    "name": "char-from-name",
    "demo_src": "(string (char-from-name \"GREEK SMALL LETTER LAMBDA\"))<br>",
    "demo_result": "\"λ\""
  },
  {
    "name": "char-or-string-p",
    "demo_src": "(mapcar #'char-or-string-p '(\"\" ?x 42 nil t))<br>",
    "demo_result": "(t t t nil nil)"
  },
  {
    "name": "char-syntax",
    "demo_src": "(string (char-syntax ?a))<br>",
    "demo_result": "\"w\""
  },
  {
    "name": "char-table-range",
    "demo_src": ";; (aref char-width-table ?💯)<br>;; => 2<br><br>(char-table-range char-width-table ?💯)<br>",
    "demo_result": "2"
  },
  {
    "name": "char-to-string",
    "demo_src": "(char-to-string ?A)<br>",
    "demo_result": "\"A\""
  },
  {
    "name": "char-width",
    "demo_src": "(char-width ?你)<br>",
    "demo_result": "2"
  },
  {
    "name": "characterp",
    "demo_src": "(characterp 97)<br>",
    "demo_result": "t"
  },
  {
    "name": "chart-bar-quickie",
    "demo_src": ";; http://francismurillo.github.io/2017-04-15-Exploring-Emacs-chart-Library/<br>(chart-bar-quickie<br> 'vertical<br> \"Eye Colors\"<br> '(\"Green\" \"Hazel\" \"Blue\" \"Brown\") \"Colors\"<br> '(64 93 215 220) \"Frequency\")<br>",
    "demo_result": ""
  },
  {
    "name": "check-coding-system",
    "demo_src": "(check-coding-system 'utf-8)<br>",
    "demo_result": "utf-8"
  },
  {
    "name": "cl-adjoin",
    "demo_src": "(cl-adjoin 1 '(2 3))<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "cl-assert",
    "demo_src": "(cl-assert (= (+ 2 3) 5))<br>",
    "demo_result": "nil"
  },
  {
    "name": "cl-block",
    "demo_src": "(cl-block nil<br>  1<br>  (cl-return 2)<br>  3)<br>",
    "demo_result": "2"
  },
  {
    "name": "cl-callf",
    "demo_src": ";; Toggle the value of `lexical-binding'<br>(cl-callf not lexical-binding)<br>",
    "demo_result": "t"
  },
  {
    "name": "cl-callf2",
    "demo_src": "(let ((s \"foo\"))<br>  (cl-callf2 concat \"<\" s \">\")<br>  s)<br>",
    "demo_result": "\"<foo>\""
  },
  {
    "name": "cl-case",
    "demo_src": "(cl-case (random 5)<br>  (0 \"0\")<br>  ((1 2 3) \"[1, 3]\")<br>  (t \"4\"))<br>",
    "demo_result": "\"[1, 3]\""
  },
  {
    "name": "cl-ceiling",
    "demo_src": "(cl-ceiling 10 3)<br>",
    "demo_result": "(4 -2)"
  },
  {
    "name": "cl-coerce",
    "demo_src": "(cl-coerce 42 'float)<br>",
    "demo_result": "42.0"
  },
  {
    "name": "cl-concatenate",
    "demo_src": "(cl-concatenate 'vector '(1 2) [4 5] \"67\")<br>",
    "demo_result": "[1 2 4 5 54 55]"
  },
  {
    "name": "cl-copy-list",
    "demo_src": "(cl-copy-list '(1 2 . 3))<br>",
    "demo_result": "(1 2 . 3)"
  },
  {
    "name": "cl-count",
    "demo_src": "(cl-count nil '(1 2 nil () 3 4 nil) :test #'eq)<br>",
    "demo_result": "3"
  },
  {
    "name": "cl-count-if",
    "demo_src": "(cl-count-if #'cl-evenp '(1 2 3 4 5))<br>",
    "demo_result": "2"
  },
  {
    "name": "cl-count-if-not",
    "demo_src": "(cl-count-if-not #'cl-evenp '(1 2 3 4 5))<br>",
    "demo_result": "3"
  },
  {
    "name": "cl-defgeneric",
    "demo_src": "(cl-defgeneric greet (greeter))<br><br>(cl-defstruct cow)<br><br>(cl-defmethod greet ((_ cow))<br>  \"Moo!\")<br><br>(cl-defstruct bird)<br><br>(cl-defmethod greet ((_ bird))<br>  \"Chirp!\")<br><br>(list (greet (make-cow))<br>      (greet (make-bird)))<br>",
    "demo_result": "(\"Moo!\" \"Chirp!\")"
  },
  {
    "name": "cl-defmethod",
    "demo_src": "(cl-defstruct dog)<br>(cl-defstruct person name)<br><br>(cl-defgeneric say-hi (object)<br>  \"Greeting from OBJECT.\")<br><br>(cl-defmethod say-hi ((n number))<br>  \"Greating from a number.\"<br>  (number-to-string n))<br><br>(cl-defmethod say-hi ((d dog))<br>  \"Greeting from a dog.\"<br>  \"wowowowowoowooo\")<br><br>(cl-defmethod say-hi ((p person))<br>  \"Greeting from a person.\"<br>  (format \"Hello, I am %s\" (person-name p)))<br><br>(mapcar #'say-hi (list 42 (make-dog) (make-person :name user-full-name)))<br>",
    "demo_result": "(\"42\" \"wowowowowoowooo\" \"Hello, I am Xu Chunyang\")"
  },
  {
    "name": "cl-defstruct",
    "demo_src": "(cl-defstruct (person (:constructor person-create)<br>                      (:copier nil))<br>  name age sex)<br><br>(let ((tom (person-create :name \"Tom\" :age 19 :sex \"Male\")))<br>  (cl-incf (person-age tom))<br>  tom)<br>",
    "demo_result": "#s(person \"Tom\" 20 \"Male\")"
  },
  {
    "name": "cl-defun",
    "demo_src": "(cl-defun foo (a &optional b &key c d (e 17))<br>  (list :a a<br>        :b b<br>        :c c<br>        :d d<br>        :e e))<br><br>(foo 1 2 :c 3 :d 4)<br>",
    "demo_result": "(:a 1 :b 2 :c 3 :d 4 :e 17)"
  },
  {
    "name": "cl-delete",
    "demo_src": ";; old will be changed by `cl-delete'<br>(let* ((old (list 0 1 2 0))<br>       (new (cl-delete 0 old :test #'=)))<br>  (list new old))<br>",
    "demo_result": "((1 2)<br> (0 1 2))"
  },
  {
    "name": "cl-delete-duplicates",
    "demo_src": "(cl-delete-duplicates (list 1 2 3 3 2 1) :test #'=)<br>",
    "demo_result": "(3 2 1)"
  },
  {
    "name": "cl-destructuring-bind",
    "demo_src": "(cl-destructuring-bind (_ b c) (list 1 2 3)<br>  (list b c))<br>",
    "demo_result": "(2 3)"
  },
  {
    "name": "cl-digit-char-p",
    "demo_src": "(cl-digit-char-p ?F 16)<br>",
    "demo_result": "15"
  },
  {
    "name": "cl-do",
    "demo_src": "(let (res)<br>  (cl-do ((x '(1 2 3) (cdr x))<br>          (y '(4 5 6 7) (cdr y)))<br>      ((not (and x y)) (nreverse res))<br>    (push (cons (car x) (car y)) res)))<br>",
    "demo_result": "((1 . 4)<br> (2 . 5)<br> (3 . 6))"
  },
  {
    "name": "cl-do-all-symbols",
    "demo_src": "(let (cmds)<br>  (cl-do-all-symbols (sym)<br>    (when (commandp sym)<br>      (push sym cmds)))<br>  (message \"There are %d Emacs commands right now\" (length cmds)))<br>",
    "demo_result": "\"There are 8173 Emacs commands right now\""
  },
  {
    "name": "cl-do-symbols",
    "demo_src": "(let (cmds)<br>  (cl-do-symbols (sym)<br>    (when (commandp sym)<br>      (push sym cmds)))<br>  (message \"There are %d Emacs commands right now\" (length cmds)))<br>",
    "demo_result": "\"There are 8173 Emacs commands right now\""
  },
  {
    "name": "cl-dolist",
    "demo_src": "(cl-dolist (i '(1 2 3 4))<br>  (when (> i 2)<br>    (cl-return i)))<br>",
    "demo_result": "3"
  },
  {
    "name": "cl-dotimes",
    "demo_src": "(cl-dotimes (i 10)<br>  (when (> i 3)<br>    (cl-return i)))<br>",
    "demo_result": "4"
  },
  {
    "name": "cl-ecase",
    "demo_src": "(condition-case err<br>    (cl-ecase 4<br>      ((1 2 3) 'do-something))<br>  (error err))<br>",
    "demo_result": "(error \"cl-ecase failed: 4, (3 2 1)\")"
  },
  {
    "name": "cl-equalp",
    "demo_src": "(cl-equalp 3 3.0)<br>",
    "demo_result": "t"
  },
  {
    "name": "cl-etypecase",
    "demo_src": "(condition-case err<br>    (cl-etypecase 42<br>      (float 'float))<br>  (error err))<br>",
    "demo_result": "(error \"cl-etypecase failed: 42, (float)\")"
  },
  {
    "name": "cl-evenp",
    "demo_src": "(cl-evenp 0)<br>",
    "demo_result": "t"
  },
  {
    "name": "cl-every",
    "demo_src": "(cl-every #'cl-evenp [0 2 4 6])<br>",
    "demo_result": "t"
  },
  {
    "name": "cl-fill",
    "demo_src": "(cl-fill (list 1 2 3) 0)<br>",
    "demo_result": "(0 0 0)"
  },
  {
    "name": "cl-find",
    "demo_src": "(cl-find ?o \"hello\" :test #'=)<br>",
    "demo_result": "111"
  },
  {
    "name": "cl-find-if",
    "demo_src": "(cl-find-if #'cl-evenp '(1 2 3 4))<br>",
    "demo_result": "2"
  },
  {
    "name": "cl-find-if-not",
    "demo_src": "(cl-find-if-not #'zerop '(0 0 0 1 2))<br>",
    "demo_result": "1"
  },
  {
    "name": "cl-flet",
    "demo_src": "(cl-flet ((mean<br>           (numbers)<br>           (/ (apply #'+ numbers)<br>              (float (length numbers)))))<br>  (mean '(1 2 3 4)))<br>",
    "demo_result": "2.5"
  },
  {
    "name": "cl-flet*",
    "demo_src": "(cl-flet* ((mean<br>            (numbers)<br>            (/ (apply #'+ numbers)<br>               (float (length numbers))))<br>           (variance<br>            (numbers)<br>            (let ((m (mean numbers)))<br>              (/ (apply #'+ (mapcar (lambda (x) (expt (- x m) 2)) numbers))<br>                 (float (length numbers))))))<br>  (variance '(1 2 3 4)))<br>",
    "demo_result": "1.25"
  },
  {
    "name": "cl-floor",
    "demo_src": "(cl-floor 10 3)<br>",
    "demo_result": "(3 1)"
  },
  {
    "name": "cl-gcd",
    "demo_src": "(cl-gcd 4 6)<br>",
    "demo_result": "2"
  },
  {
    "name": "cl-generic-p",
    "demo_src": "(cl-generic-p #'seq-map)<br>",
    "demo_result": ""
  },
  {
    "name": "cl-incf",
    "demo_src": "(let ((x 0))<br>  (cl-incf x)<br>  x)<br>",
    "demo_result": "1"
  },
  {
    "name": "cl-intersection",
    "demo_src": "(cl-intersection '(1 2 3) '(2 3 4))<br>",
    "demo_result": "(3 2)"
  },
  {
    "name": "cl-isqrt",
    "demo_src": "(cl-isqrt 27)<br>",
    "demo_result": "5"
  },
  {
    "name": "cl-labels",
    "demo_src": "(cl-labels ((len<br>             (l)<br>             (if l<br>                 (1+ (len (cdr l)))<br>               0)))<br>  (len '(a b c d e)))<br>",
    "demo_result": "5"
  },
  {
    "name": "cl-lcm",
    "demo_src": "(cl-lcm 4 6)<br>",
    "demo_result": "12"
  },
  {
    "name": "cl-ldiff",
    "demo_src": "(let ((l (list 1 2 3 4)))<br>  (cl-ldiff l (cddr l)))<br>",
    "demo_result": "(1 2)"
  },
  {
    "name": "cl-letf",
    "demo_src": "(cl-letf (((symbol-function 'emacs-version) #'ignore))<br>  (emacs-version))<br>",
    "demo_result": "nil"
  },
  {
    "name": "cl-letf*",
    "demo_src": "(let ((lst (list 1 2 3 4)))<br>  (cl-letf* (((car lst) 100)<br>             ((car lst) 200))<br>    (format \"%s\" lst)))<br>",
    "demo_result": "\"(200 2 3 4)\""
  },
  {
    "name": "cl-loop",
    "demo_src": "(cl-loop for i from 1 to 5<br>         collect i)<br>",
    "demo_result": "(1 2 3 4 5)"
  },
  {
    "name": "cl-macrolet",
    "demo_src": "(cl-macrolet ((inc (var) `(setq ,var (1+ ,var))))<br>  (let ((x 42))<br>    (inc x)<br>    x))<br>",
    "demo_result": "43"
  },
  {
    "name": "cl-map",
    "demo_src": "(cl-map 'vector #'1+ '(1 2 3))<br>",
    "demo_result": "[2 3 4]"
  },
  {
    "name": "cl-mapc",
    "demo_src": "(cl-mapc #'message [\"Hi, %s\" \"Hello, %s\"] '(Emacs Tom))<br>",
    "demo_result": "[\"Hi, %s\" \"Hello, %s\"]"
  },
  {
    "name": "cl-mapcan",
    "demo_src": "(cl-mapcan<br> (lambda (pair)<br>   (let ((key (car pair))<br>         (val (cdr pair)))<br>     (list (intern (format \":%s\" key)) val)))<br> '((x . 1) (y . 2) (z . 3)))<br>",
    "demo_result": "(:x 1 :y 2 :z 3)"
  },
  {
    "name": "cl-mapcar",
    "demo_src": "(cl-mapcar #'cons '(a b c) '(1 2 3))<br>",
    "demo_result": "((a . 1)<br> (b . 2)<br> (c . 3))"
  },
  {
    "name": "cl-mapcon",
    "demo_src": "(cl-mapcon #'copy-sequence '(1 2 3))<br>",
    "demo_result": "(1 2 3 2 3 3)"
  },
  {
    "name": "cl-mapl",
    "demo_src": "(cl-mapl #'princ '(1 2 3))<br>",
    "demo_result": "\"(1 2 3)(2 3)(3)\""
  },
  {
    "name": "cl-maplist",
    "demo_src": "(cl-maplist #'identity '(1 2 3))<br>",
    "demo_result": "((1 2 3)<br> (2 3)<br> (3))"
  },
  {
    "name": "cl-member",
    "demo_src": "(cl-member 2 '(1 2 3 4) :test #'=)<br>",
    "demo_result": "(2 3 4)"
  },
  {
    "name": "cl-member-if",
    "demo_src": "(cl-member-if #'cl-evenp '(1 2 3 4))<br>",
    "demo_result": "(2 3 4)"
  },
  {
    "name": "cl-member-if-not",
    "demo_src": "(cl-member-if-not #'cl-evenp '(0 2 3 4 5))<br>",
    "demo_result": "(3 4 5)"
  },
  {
    "name": "cl-merge",
    "demo_src": "(cl-merge 'list '(1 4 6) '(2 3 5) #'<)<br>",
    "demo_result": "(1 2 3 4 5 6)"
  },
  {
    "name": "cl-minusp",
    "demo_src": "(cl-minusp -1)<br>",
    "demo_result": "t"
  },
  {
    "name": "cl-mismatch",
    "demo_src": "(cl-mismatch \"HELLO\" \"hello1\" :key #'upcase)<br>",
    "demo_result": "5"
  },
  {
    "name": "cl-mod",
    "demo_src": "(cl-mod 10 3)<br>",
    "demo_result": "1"
  },
  {
    "name": "cl-notany",
    "demo_src": "(cl-notany #'zerop [1 2 3])<br>",
    "demo_result": "t"
  },
  {
    "name": "cl-notevery",
    "demo_src": "(cl-notevery #'zerop [0 0 0 0])<br>",
    "demo_result": "nil"
  },
  {
    "name": "cl-nsubst",
    "demo_src": "(let ((l (list 1 0 (list 0 1))))<br>  (cl-nsubst :one 1 l :test #'eq)<br>  l)<br>",
    "demo_result": "(:one 0<br>      (0 :one))"
  },
  {
    "name": "cl-nsubstitute",
    "demo_src": "(cl-nsubstitute :new :old (list 1 :old 2 :old) :test #'eq)<br>",
    "demo_result": "(1 :new 2 :new)"
  },
  {
    "name": "cl-nsubstitute-if",
    "demo_src": "(cl-nsubstitute-if :zero #'zerop (list 1 0 1 0))<br>",
    "demo_result": "(1 :zero 1 :zero)"
  },
  {
    "name": "cl-nsubstitute-if-not",
    "demo_src": "(cl-substitute-if-not :not-zero #'zerop (list 1 0 1 0))<br>",
    "demo_result": "(:not-zero 0 :not-zero 0)"
  },
  {
    "name": "cl-oddp",
    "demo_src": "(cl-oddp 1)<br>",
    "demo_result": "t"
  },
  {
    "name": "cl-parse-integer",
    "demo_src": "(cl-parse-integer \"400\" :radix #x10)<br>",
    "demo_result": "1024"
  },
  {
    "name": "cl-plusp",
    "demo_src": "(cl-plusp 1)<br>",
    "demo_result": "t"
  },
  {
    "name": "cl-position",
    "demo_src": "(cl-position \"bar\" '(\"foo\" \"bar\" \"bar\") :test #'equal)<br>",
    "demo_result": "1"
  },
  {
    "name": "cl-position-if",
    "demo_src": "(cl-position-if #'zerop '(1 1 1 0 0))<br>",
    "demo_result": "3"
  },
  {
    "name": "cl-position-if-not",
    "demo_src": "(cl-position-if-not #'zerop '(0 0 0 1 2))<br>",
    "demo_result": "3"
  },
  {
    "name": "cl-progv",
    "demo_src": "(cl-progv (list (intern \"x\")) (list 42)<br>  x)<br>",
    "demo_result": "42"
  },
  {
    "name": "cl-psetf",
    "demo_src": "(let (x y z)<br>  (cl-psetf x (setq z 1)<br>            y (setq z 2))<br>  (list x y z))<br>",
    "demo_result": "(1 2 2)"
  },
  {
    "name": "cl-psetq",
    "demo_src": "(let ((x 1)<br>      (y 2))<br>  (cl-psetq x y<br>            y x)<br>  (list x y))<br>",
    "demo_result": "(2 1)"
  },
  {
    "name": "cl-pushnew",
    "demo_src": "(let ((l (list 1 2 3)))<br>  (cl-pushnew 0 l :test #'=)<br>  (cl-pushnew 2 l :test #'=)<br>  (cl-pushnew 4 l :test #'=)<br>  l)<br>",
    "demo_result": "(4 0 1 2 3)"
  },
  {
    "name": "cl-random",
    "demo_src": "(cl-random 10)<br>",
    "demo_result": "7"
  },
  {
    "name": "cl-random-state-p",
    "demo_src": "(cl-random-state-p (cl-make-random-state))<br>",
    "demo_result": "t"
  },
  {
    "name": "cl-reduce",
    "demo_src": "(cl-reduce #'+ [1 2 3])<br>",
    "demo_result": "6"
  },
  {
    "name": "cl-rem",
    "demo_src": "(cl-rem 10 3)<br>",
    "demo_result": "1"
  },
  {
    "name": "cl-remove",
    "demo_src": "(cl-remove 0 [0 1 2 0] :test #'=)<br>",
    "demo_result": "[1 2]"
  },
  {
    "name": "cl-remove-duplicates",
    "demo_src": "(cl-remove-duplicates (list 1 nil 2 () 1) :test #'eq)<br>",
    "demo_result": "(2 nil 1)"
  },
  {
    "name": "cl-remove-if",
    "demo_src": "(cl-remove-if (lambda (elt) (< elt 0)) '(0 1 -1 3 -3 5))<br>",
    "demo_result": "(0 1 3 5)"
  },
  {
    "name": "cl-replace",
    "demo_src": "(cl-replace (list 0 0 3 4) (list 1 2))<br>",
    "demo_result": "(1 2 3 4)"
  },
  {
    "name": "cl-return",
    "demo_src": "(cl-dolist (i '(1 2 3 4 5))<br>  (when (> i 3)<br>    (cl-return i)))<br>",
    "demo_result": "4"
  },
  {
    "name": "cl-return-from",
    "demo_src": "(cl-block 'found<br>  (dolist (i '(1 2 3 4 5))<br>    (when (> i 3)<br>      (cl-return-from 'found i))))<br>",
    "demo_result": "4"
  },
  {
    "name": "cl-rotatef",
    "demo_src": "(seq-let [a b c d] [1 2 3 4]<br>  (cl-rotatef a b c d)<br>  (list a b c d))<br>",
    "demo_result": "(2 3 4 1)"
  },
  {
    "name": "cl-round",
    "demo_src": "(cl-round 3 2)<br>",
    "demo_result": "(2 -1)"
  },
  {
    "name": "cl-search",
    "demo_src": "(cl-search \"ar\" \"foobarzzzzz\" :test #'=)<br>",
    "demo_result": "4"
  },
  {
    "name": "cl-set-difference",
    "demo_src": "(cl-set-difference '(1 2 3 4) '(2 3))<br>",
    "demo_result": "(1 4)"
  },
  {
    "name": "cl-set-exclusive-or",
    "demo_src": "(cl-set-exclusive-or '(1 2 3) '(2 3 4))<br>",
    "demo_result": "(1 4)"
  },
  {
    "name": "cl-shiftf",
    "demo_src": "(seq-let [a b c d] [1 2 3 4]<br>  (cl-shiftf a b c d)<br>  (list a b c d))<br>",
    "demo_result": "(2 3 4 4)"
  },
  {
    "name": "cl-some",
    "demo_src": "(cl-some #'cdr '(nil (1) (2 . 3) (4 5)))<br>",
    "demo_result": "3"
  },
  {
    "name": "cl-sort",
    "demo_src": "(cl-sort (list (cons 1 4)<br>               (cons 3 6)<br>               (cons 2 5))<br>         #'<<br>         :key #'car)<br>",
    "demo_result": "((1 . 4)<br> (2 . 5)<br> (3 . 6))"
  },
  {
    "name": "cl-stable-sort",
    "demo_src": "(cl-stable-sort (list (cons 1 4)<br>                      (cons 3 6)<br>                      (cons 2 5)<br>                      (cons 3 0))<br>                #'<<br>                :key #'car)<br>",
    "demo_result": "((1 . 4)<br> (2 . 5)<br> (3 . 6)<br> (3 . 0))"
  },
  {
    "name": "cl-subseq",
    "demo_src": "(cl-subseq '(a b c d) 1 3)<br>",
    "demo_result": "(b c)"
  },
  {
    "name": "cl-subsetp",
    "demo_src": "(cl-subsetp '(1 3) '(1 2 3 4))<br>",
    "demo_result": "t"
  },
  {
    "name": "cl-subst",
    "demo_src": "(cl-subst \"1\" 1 '(1 0 (1 0)) :test #'eq)<br>",
    "demo_result": "(\"1\" 0<br> (\"1\" 0))"
  },
  {
    "name": "cl-substitute",
    "demo_src": "(cl-substitute ?A ?a \"|aaa|\" :test #'=)<br>",
    "demo_result": "\"|AAA|\""
  },
  {
    "name": "cl-substitute-if",
    "demo_src": "(cl-substitute-if :zero #'zerop '(1 0 1 0))<br>",
    "demo_result": "(1 :zero 1 :zero)"
  },
  {
    "name": "cl-substitute-if-not",
    "demo_src": "(cl-substitute-if-not :not-zero #'zerop '(1 0 1 0))<br>",
    "demo_result": "(:not-zero 0 :not-zero 0)"
  },
  {
    "name": "cl-symbol-macrolet",
    "demo_src": "(let ((pair (cons 5 9)))<br>  (cl-symbol-macrolet ((x (car pair)))<br>    (cl-incf x))<br>  pair)<br>",
    "demo_result": "(6 . 9)"
  },
  {
    "name": "cl-tailp",
    "demo_src": "(let* ((x '(3 4))<br>       (y `(1 2 ,@x)))<br>  (cl-tailp x y))<br>",
    "demo_result": "t"
  },
  {
    "name": "cl-tree-equal",
    "demo_src": "(cl-tree-equal '(?a . (?b . ?c))<br>               '(?A . (?B . ?C))<br>               :test #'=<br>               :key #'upcase)<br>",
    "demo_result": "t"
  },
  {
    "name": "cl-truncate",
    "demo_src": "(cl-truncate 10 3)<br>",
    "demo_result": "(3 1)"
  },
  {
    "name": "cl-typecase",
    "demo_src": "(mapcar (lambda (x)<br>          (cl-typecase x<br>            (integer 'integer)<br>            (float   'float)<br>            (string 'string)<br>            (t 'anything-else)))<br>        (list 42 float-pi emacs-version (current-time)))<br>",
    "demo_result": "(integer float string anything-else)"
  },
  {
    "name": "cl-typep",
    "demo_src": "(cl-typep 42 'integer)<br>",
    "demo_result": "t"
  },
  {
    "name": "cl-union",
    "demo_src": "(cl-union '(1 2 3) '(2 3 4))<br>",
    "demo_result": "(4 1 2 3)"
  },
  {
    "name": "cl-values-list",
    "demo_src": "(cl-values-list (list 1 2 3))<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "class-p",
    "demo_src": "(defclass my-class () () \"My Class.\")<br>(class-p 'my-class)<br>",
    "demo_result": "t"
  },
  {
    "name": "clear-string",
    "demo_src": "(let ((password \"123456\"))<br>  (clear-string password)<br>  (string-to-list password))<br>",
    "demo_result": "(0 0 0 0 0 0)"
  },
  {
    "name": "clrhash",
    "demo_src": "(let ((table (make-hash-table)))<br>  (puthash 'x 1 table)<br>  (puthash 'y 2 table)<br>  (clrhash table)<br>  table)<br>",
    "demo_result": "#s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data<br>())"
  },
  {
    "name": "coding-system-aliases",
    "demo_src": "(coding-system-aliases 'chinese-gbk)<br>",
    "demo_result": "(chinese-gbk gbk cp936 windows-936)"
  },
  {
    "name": "coding-system-change-eol-conversion",
    "demo_src": "(coding-system-change-eol-conversion 'utf-8 'unix)<br>",
    "demo_result": "utf-8-unix"
  },
  {
    "name": "coding-system-change-text-conversion",
    "demo_src": "(coding-system-change-text-conversion 'unix 'utf-8)<br>",
    "demo_result": "utf-8-unix"
  },
  {
    "name": "coding-system-eol-type",
    "demo_src": "(coding-system-eol-type 'utf-8)<br>",
    "demo_result": "[utf-8-unix utf-8-dos utf-8-mac]"
  },
  {
    "name": "coding-system-get",
    "demo_src": "(coding-system-get 'chinese-gbk :mime-charset)<br>",
    "demo_result": "gbk"
  },
  {
    "name": "coding-system-list",
    "demo_src": "(length (coding-system-list 'base-only))<br>",
    "demo_result": "116"
  },
  {
    "name": "coding-system-p",
    "demo_src": "(coding-system-p 'utf-8)<br>",
    "demo_result": "t"
  },
  {
    "name": "color-complement",
    "demo_src": "(color-complement \"green\")<br>",
    "demo_result": "(1.0 0.0 1.0)"
  },
  {
    "name": "color-name-to-rgb",
    "demo_src": "(color-name-to-rgb \"green\")<br>",
    "demo_result": "(0.0 1.0 0.0)"
  },
  {
    "name": "color-rgb-to-hex",
    "demo_src": "(color-rgb-to-hex 0.0 1.0 0.0 2)<br>",
    "demo_result": "\"#00ff00\""
  },
  {
    "name": "color-rgb-to-hsl",
    "demo_src": "(color-rgb-to-hsl #x86 #xDE #xFA)<br>",
    "demo_result": "(0.5 -0.3036649214659686 192.0)"
  },
  {
    "name": "color-values",
    "demo_src": "(color-values \"green\")<br>",
    "demo_result": "(0 65535 0)"
  },
  {
    "name": "combine-and-quote-strings",
    "demo_src": "(combine-and-quote-strings '(\"-o\" \"foo bar.txt\"))<br>",
    "demo_result": "\"-o \\\"foo bar.txt\\\"\""
  },
  {
    "name": "commandp",
    "demo_src": "(commandp #'next-line)<br>",
    "demo_result": "t"
  },
  {
    "name": "compare-buffer-substrings",
    "demo_src": "(with-temp-buffer<br>  (insert \"foo foobar\")<br>  (compare-buffer-substrings nil 1 4 nil 5 8))<br>",
    "demo_result": "0"
  },
  {
    "name": "compare-strings",
    "demo_src": "(compare-strings \"hello\" nil nil \"he\" nil nil)<br>",
    "demo_result": "3"
  },
  {
    "name": "completing-read",
    "demo_src": "(completing-read \"Enter a name: \" '(\"Tom\" \"Jerry\" \"Spike\" \"Tyke\"))<br>",
    "demo_result": "\"Tom\""
  },
  {
    "name": "completing-read-multiple",
    "demo_src": "(completing-read-multiple \"> \" '(\"alice\" \"bob\" \"eve\"))<br>",
    "demo_result": "(\"alice\" \"bob\")"
  },
  {
    "name": "completion-table-dynamic",
    "demo_src": "(completing-read<br> \"> \"<br> (completion-table-dynamic<br>  (lambda (s)<br>    (list (concat s \"123\")<br>          (concat s \"456\")))))<br>",
    "demo_result": ""
  },
  {
    "name": "completion-table-with-cache",
    "demo_src": "(completing-read<br> \"> \"<br> (completion-table-with-cache<br>  (lambda (input)<br>    (message \"=> Caching %s\" input)<br>    (with-temp-buffer<br>      (call-process \"seq\" nil t nil input)<br>      (cl-loop for line in (split-string (buffer-string) \"\\n\" t)<br>               collect (concat input line))))))<br>",
    "demo_result": ""
  },
  {
    "name": "concat",
    "demo_src": "(concat \"hello\" \" world\")<br>",
    "demo_result": "\"hello world\""
  },
  {
    "name": "cond",
    "demo_src": "(let ((x 42))<br>  (cond ((= x 0) 'zero)<br>        ((> x 0) 'positive)<br>        (t 'negative)))<br>",
    "demo_result": "positive"
  },
  {
    "name": "condition-case",
    "demo_src": "(condition-case err<br>    (/ 1 0)<br>  (arith-error<br>   (message \"%s\" (error-message-string err))<br>   nil))<br>",
    "demo_result": "nil"
  },
  {
    "name": "condition-case-unless-debug",
    "demo_src": "(condition-case-unless-debug nil<br>    (/ 1 0)<br>  (error nil))<br>",
    "demo_result": "nil"
  },
  {
    "name": "cons",
    "demo_src": "(cons 1 (cons 2 (cons 3 nil)))<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "consp",
    "demo_src": "(consp '(1 . 2))<br>",
    "demo_result": "t"
  },
  {
    "name": "controlling-tty-p",
    "demo_src": "(list window-system (controlling-tty-p))<br>",
    "demo_result": "(mac nil)"
  },
  {
    "name": "convert-standard-filename",
    "demo_src": "(convert-standard-filename \"etc/\")<br>",
    "demo_result": "\"etc/\""
  },
  {
    "name": "copy-alist",
    "demo_src": "(let* ((alist (list (list 1 2 2)<br>                    (list 3 4 4)<br>                    (list 5 6 6)))<br>       (copy (copy-alist alist)))<br>  (list (eq (alist-get 1 alist)<br>            (alist-get 1 copy))<br>        (setcdr (assq 1 copy) '(22 22))<br>        (eq (alist-get 1 alist)<br>            (alist-get 1 copy))))<br>",
    "demo_result": "(t<br> (22 22)<br> nil)"
  },
  {
    "name": "copy-hash-table",
    "demo_src": "(copy-hash-table #s(hash-table data (x 1 y 2)))<br>",
    "demo_result": "#s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data<br>(x 1 y 2))"
  },
  {
    "name": "copy-keymap",
    "demo_src": "(equal (current-local-map) (copy-keymap (current-local-map)))<br>",
    "demo_result": "t"
  },
  {
    "name": "copy-sequence",
    "demo_src": "(let* ((x '(1 2 3 4))<br>       (y x)<br>       (z (copy-sequence x)))<br>  (setq x (nreverse x))<br>  (list :reversed x<br>        :modified y<br>        :copied z))<br>",
    "demo_result": "(:reversed<br> (4 3 2 1)<br> :modified<br> (1)<br> :copied<br> (1 2 3 4))"
  },
  {
    "name": "copy-tree",
    "demo_src": "(let* ((list '((1 2)))<br>       (shallow-copy (copy-sequence list))<br>       (deep-copy (copy-tree list)))<br>  (cl-assert      (eq (car shallow-copy) (car list)))<br>  (cl-assert (not (eq (car deep-copy) (car list)))))<br>",
    "demo_result": "nil"
  },
  {
    "name": "copysign",
    "demo_src": "(copysign 4.0 -1.0)<br>",
    "demo_result": "-4.0"
  },
  {
    "name": "cos",
    "demo_src": "(cos 0)<br>",
    "demo_result": "1.0"
  },
  {
    "name": "count-lines",
    "demo_src": "(with-temp-buffer<br>  (insert \"foo\\n\"<br>          \"bar\\n\"<br>          \"baz\\n\")<br>  (count-lines (point-min) (point-max)))<br>",
    "demo_result": "3"
  },
  {
    "name": "create-image",
    "demo_src": "(message (propertize \" \" 'display (create-image \"splash.png\")))<br>(sit-for 3)<br>",
    "demo_result": "(create-image<br> ;; binary data<br> (with-temp-buffer<br>   (set-buffer-multibyte nil)<br>   (insert-file-contents-literally<br>    (expand-file-name \"images/splash.png\" data-directory))<br>   (buffer-string))<br> 'png 'data)<br>"
  },
  {
    "name": "current-active-maps",
    "demo_src": "(length (current-active-maps))<br>",
    "demo_result": "10"
  },
  {
    "name": "current-buffer",
    "demo_src": "(current-buffer)<br>",
    "demo_result": "#<buffer elisp-demos.org>"
  },
  {
    "name": "current-column",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello\")<br>  (current-column))<br>",
    "demo_result": "5"
  },
  {
    "name": "current-idle-time",
    "demo_src": "(run-at-time 3 nil<br>             (lambda ()<br>               (sit-for 1)<br>               (message \"=> %s\" (time-to-seconds (current-idle-time)))))<br>",
    "demo_result": "[nil 23532 38890 487039 nil<br>     (lambda nil<br>       (sit-for 1)<br>       (message \"=> %s\"<br>                (time-to-seconds<br>                 (current-idle-time))))<br>     nil nil 0]"
  },
  {
    "name": "current-kill",
    "demo_src": "(progn (kill-new \"hello\")<br>       (list (current-kill 0 'do-not-move)<br>             (car kill-ring)))<br>",
    "demo_result": "(\"hello\" \"hello\")"
  },
  {
    "name": "current-message",
    "demo_src": "(progn<br>  (message \"Hello World\")<br>  (current-message))<br>",
    "demo_result": "\"Hello World\""
  },
  {
    "name": "current-thread",
    "demo_src": "(current-thread)<br>",
    "demo_result": "#<thread 0x10061fef8>"
  },
  {
    "name": "current-time",
    "demo_src": "(current-time)<br>",
    "demo_result": "(23532 37172 685559 0)"
  },
  {
    "name": "current-time-string",
    "demo_src": "(current-time-string)<br>",
    "demo_result": "\"Thu Nov 15 05:18:28 2018\""
  },
  {
    "name": "current-time-zone",
    "demo_src": "(current-time-zone)<br>",
    "demo_result": "(28800 \"CST\")"
  },
  {
    "name": "date-days-in-month",
    "demo_src": "(date-days-in-month 2020 2)<br>",
    "demo_result": "29"
  },
  {
    "name": "date-leap-year-p",
    "demo_src": "(date-leap-year-p 2018)<br>",
    "demo_result": "nil"
  },
  {
    "name": "date-to-time",
    "demo_src": "(date-to-time \"Fri, 25 Mar 2016 16:24:56 +0100\")<br>",
    "demo_result": "(22261 22600)"
  },
  {
    "name": "declare",
    "demo_src": "(defun greeting ()<br>  (declare (interactive-only \"Use `message' instead.\"))<br>  (interactive)<br>  (message \"Hello\"))<br>",
    "demo_result": "greeting"
  },
  {
    "name": "declare-function",
    "demo_src": "(declare-function dired-jump \"dired-x\" (&optional other-window file-name))<br>",
    "demo_result": ""
  },
  {
    "name": "decode-char",
    "demo_src": "(decode-char 'unicode ?λ)<br>",
    "demo_result": "955"
  },
  {
    "name": "decode-coding-region",
    "demo_src": "(with-temp-buffer<br>  (set-buffer-multibyte nil)<br>  (insert #xCE #xC4)<br>  (decode-coding-region (point-min) (point-max) 'chinese-gbk t))<br>",
    "demo_result": "#(\"文\" 0 1<br>  (charset chinese-gbk))"
  },
  {
    "name": "decode-coding-string",
    "demo_src": ";; (string-to-vector (encode-coding-string \"好\" 'chinese-gbk))<br>;; => [186 195]<br><br>(decode-coding-string (unibyte-string 186 195) 'chinese-gbk)<br><br>;; This does NOT work<br>;; (decode-coding-string (string 186 195) 'chinese-gbk)<br>;;<br>;; (multibyte-string-p (unibyte-string 186 195))<br>;; => nil<br>;; (multibyte-string-p (string 186 195))<br>;; => t<br>",
    "demo_result": "#(\"好\" 0 1<br>  (charset chinese-gbk))"
  },
  {
    "name": "decode-time",
    "demo_src": "(decode-time)<br>",
    "demo_result": "(42 20 5 15 11 2018 4 nil 28800)"
  },
  {
    "name": "defalias",
    "demo_src": "(defalias '\\` (symbol-function 'backquote))<br>",
    "demo_result": ""
  },
  {
    "name": "defclass",
    "demo_src": "(defclass person ()<br>  ((name :initarg :name)<br>   (age :initarg :age)))<br><br>(cl-defmethod say-hi ((p person))<br>  (message \"Hi, I'm %s and %d years old\"<br>           (oref p :name)<br>           (oref p :age)))<br><br>(say-hi (person :name user-full-name :age 26))<br>",
    "demo_result": "\"Hi, I'm Xu Chunyang and 26 years old\""
  },
  {
    "name": "defconst",
    "demo_src": "(defconst foo-pi 3.141592653589793<br>  \"The value of Pi.\")<br>",
    "demo_result": ""
  },
  {
    "name": "defcustom",
    "demo_src": "(defcustom magit-git-executable \"git\"<br>  \"The Git executable used by Magit.\"<br>  :group 'magit-process<br>  :type 'string)<br>",
    "demo_result": ""
  },
  {
    "name": "defface",
    "demo_src": "(defface highlight<br>  '((((class color) (min-colors 88) (background light))<br>     :background \"darkseagreen2\")<br>    (((class color) (min-colors 88) (background dark))<br>     :background \"darkolivegreen\")<br>    (((class color) (min-colors 16) (background light))<br>     :background \"darkseagreen2\")<br>    (((class color) (min-colors 16) (background dark))<br>     :background \"darkolivegreen\")<br>    (((class color) (min-colors 8))<br>     :background \"green\" :foreground \"black\")<br>    (t :inverse-video t))<br>  \"Basic face for highlighting.\"<br>  :group 'basic-faces)<br>",
    "demo_result": ""
  },
  {
    "name": "defgroup",
    "demo_src": "(defgroup magit-status nil<br>  \"Inspect and manipulate Git repositories.\"<br>  :link '(info-link \"(magit)Status Buffer\")<br>  :group 'magit-modes)<br>",
    "demo_result": ""
  },
  {
    "name": "defimage",
    "demo_src": "(defimage my-splash-image<br>  ((:type svg :file \"splash.svg\")<br>   (:type png :file \"splash.png\")))<br>",
    "demo_result": "my-splash-image"
  },
  {
    "name": "define-advice",
    "demo_src": "(define-advice shell-command (:after (&rest _) trim-trailing-newline)<br>  \"Delete the annoying trailing newline after C-u M-!.\"<br>  (when (and (eq this-command 'shell-command)<br>             current-prefix-arg)<br>    (exchange-point-and-mark t)<br>    (when (eq (char-before) ?\\n)<br>      (delete-char -1))))<br><br>;; (advice-remove 'shell-command #'shell-command@trim-trailing-newline)<br>",
    "demo_result": ""
  },
  {
    "name": "define-error",
    "demo_src": "(define-error 'foo-error \"A new error\")<br>",
    "demo_result": ""
  },
  {
    "name": "define-key",
    "demo_src": "(define-key (current-global-map) (kbd \"C-c C-c\") #'emacs-version)<br>",
    "demo_result": ""
  },
  {
    "name": "define-key-after",
    "demo_src": "(define-key-after<br>  (lookup-key shell-mode-map [menu-bar signals])<br>  [work] '(\"Work\" . work-command) 'break)<br>",
    "demo_result": "nil"
  },
  {
    "name": "define-minor-mode",
    "demo_src": "(define-minor-mode display-point-mode<br>  \"Display of point position using the mode line.\"<br>  :lighter (:eval (format \" %d\" (point))))<br>",
    "demo_result": "nil"
  },
  {
    "name": "defmacro",
    "demo_src": "(defmacro my-incf (var)<br>  `(setq ,var (1+ ,var)))<br><br>(let ((x 2))<br>  (my-incf x)<br>  x)<br>",
    "demo_result": "3"
  },
  {
    "name": "defsubst",
    "demo_src": "(defsubst buffer-narrowed-p ()<br>  \"Return non-nil if the current buffer is narrowed.\"<br>  (/= (- (point-max) (point-min)) (buffer-size)))<br>",
    "demo_result": ""
  },
  {
    "name": "defun",
    "demo_src": "(defun add-two-numbers (a b)<br>  \"Add A to B.\"<br>  (+ a b))<br><br>(add-two-numbers 1 2)<br>",
    "demo_result": "3"
  },
  {
    "name": "defvar",
    "demo_src": "(defvar foo-bar 23<br>  \"The normal weight of a bar.\")<br>",
    "demo_result": ""
  },
  {
    "name": "defvaralias",
    "demo_src": "(defvaralias 'messages-buffer-max-lines 'message-log-max)<br>",
    "demo_result": ""
  },
  {
    "name": "delete",
    "demo_src": "(let ((l (list (list 1)<br>               (list 2)<br>               (list 3)<br>               (list 2))))<br>  (setq l (delete '(2) l))<br>  l)<br>",
    "demo_result": "((1)<br> (3))"
  },
  {
    "name": "delete-char",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello\\n\")<br>  (delete-char -1)<br>  (buffer-string))<br>",
    "demo_result": "\"hello\""
  },
  {
    "name": "delete-consecutive-dups",
    "demo_src": "(let ((l (list 1 2 2 3 2)))<br>  (delete-consecutive-dups l))<br>",
    "demo_result": "(1 2 3 2)"
  },
  {
    "name": "delete-dups",
    "demo_src": "(let ((l (list \"one\" \"two\" \"one\" \"three\")))<br>  (setq l (delete-dups l)))<br>",
    "demo_result": "(\"one\" \"two\" \"three\")"
  },
  {
    "name": "delete-file",
    "demo_src": "(delete-file (make-temp-file \"elisp-demos-\"))<br>",
    "demo_result": "nil"
  },
  {
    "name": "delete-overlay",
    "demo_src": "(with-temp-buffer<br>  (let ((ov (make-overlay 1 1)))<br>    (list (format \"%S\" ov)<br>          (delete-overlay ov)<br>          (format \"%S\" ov))))<br>",
    "demo_result": "(\"#<overlay from 1 to 1 in  *temp*>\" nil \"#<overlay in no buffer>\")"
  },
  {
    "name": "delete-process",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(delete-process \"*shell*\")<br>",
    "demo_result": "nil"
  },
  {
    "name": "delq",
    "demo_src": "(let ((l (list 1 2 3)))<br>  (setq l (delq 2 l))<br>  l)<br>",
    "demo_result": "(1 3)"
  },
  {
    "name": "derived-mode-p",
    "demo_src": "(with-temp-buffer<br>  (emacs-lisp-mode)<br>  (derived-mode-p 'prog-mode))<br>",
    "demo_result": "prog-mode"
  },
  {
    "name": "detect-coding-region",
    "demo_src": "(with-temp-buffer<br>  (insert ?\\0)<br>  (detect-coding-region (point-min) (point-max)))<br>",
    "demo_result": "(no-conversion)"
  },
  {
    "name": "detect-coding-string",
    "demo_src": "(detect-coding-string (string ?\\0))<br>",
    "demo_result": "(no-conversion)"
  },
  {
    "name": "directory-file-name",
    "demo_src": "(directory-file-name \"~/.emacs.d/\")<br>",
    "demo_result": "\"~/.emacs.d\""
  },
  {
    "name": "directory-files",
    "demo_src": "(directory-files \"/bin/\")<br>",
    "demo_result": ";; MATCH is to filter the basename (not the full path)<br>(directory-files user-emacs-directory 'full (rx \".el\" eos))<br>"
  },
  {
    "name": "directory-files-and-attributes",
    "demo_src": "(directory-files-and-attributes \"/bin/\")<br>",
    "demo_result": ""
  },
  {
    "name": "directory-files-recursively",
    "demo_src": "(directory-files-recursively package-user-dir (rx \".txt\" eos))<br>",
    "demo_result": ""
  },
  {
    "name": "directory-name-p",
    "demo_src": "(list (directory-name-p \".\")<br>      (directory-name-p \"./\"))<br>",
    "demo_result": "(nil t)"
  },
  {
    "name": "discard-input",
    "demo_src": "(progn (sleep-for 2)<br>       (discard-input))<br>",
    "demo_result": "nil"
  },
  {
    "name": "display-backing-store",
    "demo_src": "(display-backing-store)<br>",
    "demo_result": "not-useful"
  },
  {
    "name": "display-color-cells",
    "demo_src": "(display-color-cells)<br>",
    "demo_result": "16777216"
  },
  {
    "name": "display-color-p",
    "demo_src": "(display-color-p)<br>",
    "demo_result": "t"
  },
  {
    "name": "display-graphic-p",
    "demo_src": "(display-graphic-p)<br>",
    "demo_result": "t"
  },
  {
    "name": "display-grayscale-p",
    "demo_src": "(display-grayscale-p)<br>",
    "demo_result": "t"
  },
  {
    "name": "display-images-p",
    "demo_src": "(display-images-p)<br>",
    "demo_result": "t"
  },
  {
    "name": "display-mm-height",
    "demo_src": "(display-mm-height)<br>",
    "demo_result": "180"
  },
  {
    "name": "display-mm-width",
    "demo_src": "(display-mm-width)<br>",
    "demo_result": "290"
  },
  {
    "name": "display-mouse-p",
    "demo_src": "(display-mouse-p)<br>",
    "demo_result": "t"
  },
  {
    "name": "display-pixel-height",
    "demo_src": "(display-pixel-height)<br>",
    "demo_result": "900"
  },
  {
    "name": "display-pixel-width",
    "demo_src": "(display-pixel-width)<br>",
    "demo_result": "1440"
  },
  {
    "name": "display-planes",
    "demo_src": "(display-planes)<br>",
    "demo_result": "24"
  },
  {
    "name": "display-popup-menus-p",
    "demo_src": "(display-popup-menus-p)<br>",
    "demo_result": "t"
  },
  {
    "name": "display-save-under",
    "demo_src": "(display-save-under)<br>",
    "demo_result": "nil"
  },
  {
    "name": "display-screens",
    "demo_src": "(display-screens)<br>",
    "demo_result": "1"
  },
  {
    "name": "display-selections-p",
    "demo_src": "(display-selections-p)<br>",
    "demo_result": "t"
  },
  {
    "name": "display-visual-class",
    "demo_src": "(display-visual-class)<br>",
    "demo_result": "true-color"
  },
  {
    "name": "documentation",
    "demo_src": "(documentation '+)<br>",
    "demo_result": "\"Return sum of any number of arguments, which are numbers or markers.\\n\\n(fn &rest NUMBERS-OR-MARKERS)\""
  },
  {
    "name": "dolist",
    "demo_src": "(let (result)<br>  (dolist (elt '(1 2 3) result)<br>    (push elt result)))<br>",
    "demo_result": "(3 2 1)"
  },
  {
    "name": "dolist-with-progress-reporter",
    "demo_src": "(dolist-with-progress-reporter<br>    (k (number-sequence 0 500))<br>    \"Collecting some mana for Emacs...\"<br>  (sit-for 0.01))<br>",
    "demo_result": ""
  },
  {
    "name": "dom-add-child-before",
    "demo_src": "(let* ((dom '(ol nil<br>                 (li nil \"Perl\")<br>                 (li nil \"Python\")<br>                 (li nil \"PHP\")))<br>       (python (elt (dom-by-tag dom 'li) 1)))<br>  (dom-add-child-before dom '(li nil \"Ruby\") python)<br>  dom)<br>",
    "demo_result": "(ol nil<br>    (li nil \"Perl\")<br>    (li nil \"Ruby\")<br>    (li nil \"Python\")<br>    (li nil \"PHP\"))"
  },
  {
    "name": "dom-append-child",
    "demo_src": "(dom-append-child '(ol nil<br>                       (li nil \"Perl\")<br>                       (li nil \"Python\")<br>                       (li nil \"PHP\"))<br>                  '(li nil \"Ruby\"))<br>",
    "demo_result": "(ol nil<br>    (li nil \"Perl\")<br>    (li nil \"Python\")<br>    (li nil \"PHP\")<br>    (li nil \"Ruby\"))"
  },
  {
    "name": "dom-attr",
    "demo_src": "(dom-attr '(a ((href . \"https://www.gnu.org/s/emacs/\")) \"GNU Emacs\")<br>          'href)<br>",
    "demo_result": "\"https://www.gnu.org/s/emacs/\""
  },
  {
    "name": "dom-attributes",
    "demo_src": "(dom-attributes '(a ((href . \"https://www.gnu.org/s/emacs/\")) \"GNU Emacs\"))<br>",
    "demo_result": "((href . \"https://www.gnu.org/s/emacs/\"))"
  },
  {
    "name": "dom-by-class",
    "demo_src": "(dom-by-class '(ol nil<br>                   (li ((class . \"compiled\")) \"C\")<br>                   (li ((class . \"interpreted\")) \"Perl\")<br>                   (li ((class . \"interpreted\")) \"Python\")<br>                   (li ((class . \"interpreted\")) \"PHP\")<br>                   (li ((class . \"compiled\")) \"Java\"))<br>              \"compiled\")<br>",
    "demo_result": "((li<br>  ((class . \"compiled\"))<br>  \"C\")<br> (li<br>  ((class . \"compiled\"))<br>  \"Java\"))"
  },
  {
    "name": "dom-by-id",
    "demo_src": "(dom-by-id '(body nil<br>                  (h1 nil \"heading\")<br>                  (p ((id . \"output\")) \"Here is some output.\"))<br>           \"output\")<br>",
    "demo_result": "((p<br>  ((id . \"output\"))<br>  \"Here is some output.\"))"
  },
  {
    "name": "dom-by-style",
    "demo_src": "(dom-by-style '(body nil<br>                     (h1 ((style . \"color: blue\")) \"h1 heading\")<br>                     (p ((style . \"color: red\")) \"first paragraph\")<br>                     (p ((style . \"color: green\")) \"second paragraph\"))<br>              (rx (or \"red\" \"green\")))<br>",
    "demo_result": "((p<br>  ((style . \"color: red\"))<br>  \"first paragraph\")<br> (p<br>  ((style . \"color: green\"))<br>  \"second paragraph\"))"
  },
  {
    "name": "dom-by-tag",
    "demo_src": "(dom-by-tag '(body nil<br>                   (nav nil<br>                        (ol nil<br>                            (li nil \"Perl\")<br>                            (li nil \"Python\")<br>                            (li nil \"PHP\")))<br>                   (h1 nil \"h1 heading\")<br>                   (p nil \"paragraph\"))<br>            'li)<br>",
    "demo_result": "((li nil \"Perl\")<br> (li nil \"Python\")<br> (li nil \"PHP\"))"
  },
  {
    "name": "dom-child-by-tag",
    "demo_src": "(dom-child-by-tag<br> '(ol nil<br>      (li nil \"Perl\")<br>      (li nil \"Python\")<br>      (li nil \"PHP\"))<br> 'li)<br>",
    "demo_result": "(li nil \"Perl\")"
  },
  {
    "name": "dom-children",
    "demo_src": "(dom-children<br> '(ol nil<br>      (li nil \"Perl\")<br>      (li nil \"Python\")<br>      (li nil \"PHP\")))<br>",
    "demo_result": "((li nil \"Perl\")<br> (li nil \"Python\")<br> (li nil \"PHP\"))"
  },
  {
    "name": "dom-node",
    "demo_src": ";; <a href=\"https://www.gnu.org/s/emacs/\">GNU Emacs</a><br>(dom-node 'a '((href . \"https://www.gnu.org/s/emacs/\")) \"GNU Emacs\")<br>",
    "demo_result": "(a<br> ((href . \"https://www.gnu.org/s/emacs/\"))<br> \"GNU Emacs\")"
  },
  {
    "name": "dom-non-text-children",
    "demo_src": "(dom-non-text-children '(div nil<br>                             (h1 nil \"h1 heading\")<br>                             (p nil \"paragraph\")<br>                             \"some text\"))<br>",
    "demo_result": "((h1 nil \"h1 heading\")<br> (p nil \"paragraph\"))"
  },
  {
    "name": "dom-parent",
    "demo_src": "(let* ((dom '(nav nil<br>                  (ol nil<br>                      (li nil \"Perl\")<br>                      (li nil \"Python\")<br>                      (li nil \"PHP\"))))<br>       (perl (car (dom-by-tag dom 'li))))<br>  (dom-parent dom perl))<br>",
    "demo_result": "(ol nil<br>    (li nil \"Perl\")<br>    (li nil \"Python\")<br>    (li nil \"PHP\"))"
  },
  {
    "name": "dom-remove-node",
    "demo_src": "(let* ((dom '(div nil<br>                  (h1 nil \"title\")<br>                  (p nil \"para\")))<br>       (p (car (dom-by-tag dom 'p))))<br>  (dom-remove-node dom p)<br>  dom)<br>",
    "demo_result": "(div nil<br>     (h1 nil \"title\"))"
  },
  {
    "name": "dom-search",
    "demo_src": "(dom-search '(body nil<br>                   (nav nil<br>                        (ol nil<br>                            (li nil \"Perl\")<br>                            (li nil \"Python\")<br>                            (li nil \"PHP\")))<br>                   (h1 nil \"h1 heading\")<br>                   (p nil \"paragraph\"))<br>            (lambda (node) (eq 'li (car node))))<br>",
    "demo_result": "((li nil \"Perl\")<br> (li nil \"Python\")<br> (li nil \"PHP\"))"
  },
  {
    "name": "dom-set-attribute",
    "demo_src": "(let ((dom '(a ((href . \"https://www.gnu.org/s/emacs/\")) \"GNU Emacs\")))<br>  (dom-set-attribute dom 'href \"#\")<br>  dom)<br>",
    "demo_result": "(a<br> ((href . \"#\"))<br> \"GNU Emacs\")"
  },
  {
    "name": "dom-set-attributes",
    "demo_src": "(let ((dom '(a nil \"Example Domain\")))<br>  (dom-set-attributes dom '((href . \"https://example.com/\")<br>                            (title . \"Example Domain\")))<br>  dom)<br>",
    "demo_result": "(a<br> ((href . \"https://example.com/\")<br>  (title . \"Example Domain\"))<br> \"Example Domain\")"
  },
  {
    "name": "dom-strings",
    "demo_src": "(dom-strings '(body nil<br>                    (h1 nil \"Basic Emacs commands\")<br>                    (p nil \"Type \" (kbd nil \"C-x C-f\") \" to open a file\")<br>                    (p nil \"Type \" (kbd nil \"C-x C-c\") \" to quit Emacs\")))<br>",
    "demo_result": "(\"Basic Emacs commands\" \"Type \" \"C-x C-f\" \" to open a file\" \"Type \" \"C-x C-c\" \" to quit Emacs\")"
  },
  {
    "name": "dom-tag",
    "demo_src": "(dom-tag '(p nil \"This is a paragraph\"))<br>",
    "demo_result": "p"
  },
  {
    "name": "dom-text",
    "demo_src": "(dom-text '(a ((href . \"https://www.gnu.org/s/emacs/\")) \"GNU Emacs\"))<br>",
    "demo_result": "\"GNU Emacs\""
  },
  {
    "name": "dom-texts",
    "demo_src": "(dom-texts '(ol nil<br>                (li nil \"Perl\")<br>                (li nil \"Python\")<br>                (li nil \"PHP\"))<br>           \", \")<br>",
    "demo_result": "\"Perl, Python, PHP\""
  },
  {
    "name": "dotimes",
    "demo_src": "(dotimes (i 5)<br>  (princ i))<br>",
    "demo_result": "\"01234\""
  },
  {
    "name": "dotimes-with-progress-reporter",
    "demo_src": "(dotimes-with-progress-reporter (k 500) \"Collecting some mana for Emacs...\"<br>  (sit-for 0.01))<br>",
    "demo_result": "nil"
  },
  {
    "name": "downcase",
    "demo_src": "(downcase \"Hello World\")<br>",
    "demo_result": "\"hello world\""
  },
  {
    "name": "edit-and-eval-command",
    "demo_src": "(edit-and-eval-command \"Please edit: \" '(forward-word 1))<br>",
    "demo_result": "t"
  },
  {
    "name": "eieio-class-children",
    "demo_src": "(defclass circle ()<br>  ((radius :initarg :radius))<br>  \"A circle class.\")<br><br>(defclass color-circle (circle)<br>  ((color :initarg :color))<br>  \"A colorful circle class.\")<br><br>(eieio-class-children 'circle)<br>",
    "demo_result": "(color-circle)"
  },
  {
    "name": "eieio-class-name",
    "demo_src": "(defclass rabbit ()<br>  ((fur-color :initarg :fur-color)<br>   (age :initarg :age))<br>  \"A rabbit class.\")<br><br>;; FIXME: The value is incorrect, I've submitted a bug report. (2019-11-24)<br>(eieio-class-name 'rabbit)<br>",
    "demo_result": "rabbit"
  },
  {
    "name": "eieio-class-parents",
    "demo_src": "(defclass circle ()<br>  ((radius :initarg :radius))<br>  \"A circle class.\")<br><br>(defclass color-circle (circle)<br>  ((color :initarg :color))<br>  \"A colorful circle class.\")<br><br>(eieio-class-parents 'color-circle)<br>",
    "demo_result": "(#s(eieio--class circle \"A circle class.\" nil<br>                 [#s(cl-slot-descriptor radius unbound t nil)]<br>                 #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data<br>                               (radius 0))<br>                 (color-circle)<br>                 ((:radius . radius))<br>                 []<br>                 []<br>                 #s(#1 unbound)<br>                 (:custom-groups nil :documentation \"A circle class.\")))<br>"
  },
  {
    "name": "eieio-object-class",
    "demo_src": "(defclass my-class () ())<br>(eieio-object-class (my-class))<br>",
    "demo_result": "my-class"
  },
  {
    "name": "eieio-object-name",
    "demo_src": "(defclass my-class () ())<br>(eieio-object-name (my-class))<br>",
    "demo_result": "\"#<my-class my-class>\""
  },
  {
    "name": "elt",
    "demo_src": ";; Work on list<br>;; (nth 2 '(1 2 3 4))<br>(elt '(1 2 3 4) 2)<br>",
    "demo_result": "3"
  },
  {
    "name": "emacs-init-time",
    "demo_src": "(emacs-init-time)<br>",
    "demo_result": "\"3.9 seconds\""
  },
  {
    "name": "emacs-pid",
    "demo_src": "(emacs-pid)<br>",
    "demo_result": "76707"
  },
  {
    "name": "emacs-uptime",
    "demo_src": "(emacs-uptime)<br>",
    "demo_result": "\"3 hours, 3 minutes, 34 seconds\""
  },
  {
    "name": "emacs-version",
    "demo_src": "(emacs-version)<br>",
    "demo_result": "\"GNU Emacs 26.1 (build 1, x86_64-apple-darwin18.2.0, Carbon Version 158 AppKit 1671.1)\\n of 2018-11-11\""
  },
  {
    "name": "encode-char",
    "demo_src": "(encode-char ?a 'unicode)<br>",
    "demo_result": "97"
  },
  {
    "name": "encode-coding-region",
    "demo_src": ";; 文<br>;; Unicode Codepoint #x6587, xE6 #x96 #x87<br>;; GBK Codepoint #xCEC4, #xCE #xC4<br>(with-temp-buffer<br>  (insert ?文)<br>  (mapcar #'identity (encode-coding-region (point-min) (point-max) 'chinese-gbk t)))<br>",
    "demo_result": "(206 196)"
  },
  {
    "name": "encode-coding-string",
    "demo_src": ";; UTF 8 -> GBK<br>(string-to-list (encode-coding-string \"文\" 'chinese-gbk))<br>",
    "demo_result": "(206 196)"
  },
  {
    "name": "encode-hex-string",
    "demo_src": "(encode-hex-string \"abc\")<br>",
    "demo_result": "\"616263\""
  },
  {
    "name": "encode-time",
    "demo_src": "(apply #'encode-time (decode-time))<br>",
    "demo_result": "(23532 37316)"
  },
  {
    "name": "end-of-line",
    "demo_src": "(end-of-line)<br>",
    "demo_result": "nil"
  },
  {
    "name": "eobp",
    "demo_src": "(with-temp-buffer (eobp))<br>",
    "demo_result": "t"
  },
  {
    "name": "eolp",
    "demo_src": "(with-temp-buffer (eolp))<br>",
    "demo_result": "t"
  },
  {
    "name": "eq",
    "demo_src": "(list (eq 'a 'a)<br>      (eq 1 1)<br>      (eq 1.0 1.0))<br>",
    "demo_result": "(t t nil)"
  },
  {
    "name": "eql",
    "demo_src": "(eql 'foo 'foo)<br>",
    "demo_result": "t"
  },
  {
    "name": "equal-including-properties",
    "demo_src": "(equal-including-properties \"asdf\"<br>                            (propertize \"asdf\" 'asdf t))<br>",
    "demo_result": "nil"
  },
  {
    "name": "erase-buffer",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello world\\n\")<br>  (erase-buffer)<br>  (buffer-string))<br>",
    "demo_result": "\"\""
  },
  {
    "name": "error",
    "demo_src": "(error \"Invalid name `%s'\" \"A%%B\")<br>",
    "demo_result": ""
  },
  {
    "name": "error-message-string",
    "demo_src": "(condition-case err<br>    (/ 1 0)<br>  (arith-error (error-message-string err)))<br>",
    "demo_result": "\"Arithmetic error\""
  },
  {
    "name": "ert-deftest",
    "demo_src": "(ert-deftest foo ()<br>  (should (> float-pi 3))<br>  (should-not (< float-pi 3))<br>  (should-error (/ 1 0) :type 'arith-error)<br>  (skip-unless (featurep 'dbusbind)))<br>",
    "demo_result": "foo"
  },
  {
    "name": "eshell-parse-command",
    "demo_src": "(eshell-parse-command \"ls | nl\")<br>",
    "demo_result": "(eshell-trap-errors<br> (eshell-execute-pipeline<br>  '((eshell-named-command \"ls\")<br>    (eshell-named-command \"nl\"))))"
  },
  {
    "name": "esxml-query",
    "demo_src": "(esxml-query<br> \"body > div > p > a\"<br> (with-current-buffer (url-retrieve-synchronously \"http://example.com\")<br>   (libxml-parse-html-region url-http-end-of-headers (point-max))))<br>",
    "demo_result": "(a<br> ((href . \"http://www.iana.org/domains/example\"))<br> \"More information...\")"
  },
  {
    "name": "esxml-query-all",
    "demo_src": "(esxml-query-all<br> \"li\"<br> '(body nil<br>        (nav nil<br>             (ol nil<br>                 (li nil \"Perl\")<br>                 (li nil \"Python\")<br>                 (li nil \"PHP\")))<br>        (h1 nil \"h1 heading\")<br>        (p nil \"paragraph\")))<br>",
    "demo_result": "((li nil \"Perl\")<br> (li nil \"Python\")<br> (li nil \"PHP\"))"
  },
  {
    "name": "esxml-to-xml",
    "demo_src": "((lambda (string)<br>   \"Prettify HTML in STRING.\"<br>   (with-temp-buffer<br>     (insert string)<br>     (html-mode)<br>     (sgml-pretty-print (point-min) (point-max))<br>     (buffer-string)))<br> (esxml-to-xml<br>  '(html nil<br>         (head nil<br>               (title nil \"Example Domain\")<br>               (meta ((charset . \"utf-8\"))))<br>         (body nil<br>               (h1 nil \"Example Domain\")<br>               (p nil \"This domain...\")<br>               (p nil (a ((href . \"http://www.iana.org/domains/example\"))<br>                         \"More information...\"))))))<br>",
    "demo_result": "<html><br>  <head><br>    <title>Example Domain<br>    </title><br>    <meta charset=\"utf-8\"/><br>  </head><br>  <body><br>    <h1>Example Domain<br>    </h1><br>    <p>This domain...<br>    </p><br>    <p><br>      <a href=\"http://www.iana.org/domains/example\">More information...<br>      </a><br>    </p><br>  </body><br></html><br>"
  },
  {
    "name": "eval",
    "demo_src": "(eval '(+ 1 2))<br>",
    "demo_result": "3"
  },
  {
    "name": "eval-after-load",
    "demo_src": ";; It is easier to use `with-eval-after-load' instead<br>(eval-after-load 'elisp-mode<br>  (lambda ()<br>    (setq answer 42)<br>    (setq beast 666)))<br>",
    "demo_result": ""
  },
  {
    "name": "eval-buffer",
    "demo_src": "(with-temp-buffer<br>  (insert \"(+ 1 2)\")<br>  (eval-buffer nil (current-buffer))<br>  (buffer-string))<br>",
    "demo_result": "\"(+ 1 2)\\n3\\n\""
  },
  {
    "name": "eval-minibuffer",
    "demo_src": "(eval-minibuffer \"Enter an expression: \" (format \"%s\" '(+ 1 2)))<br>",
    "demo_result": "3"
  },
  {
    "name": "eval-region",
    "demo_src": "(with-temp-buffer<br>  (insert \"(+ 1 2)\")<br>  (eval-region (point-min) (point-max) (current-buffer))<br>  (buffer-string))<br>",
    "demo_result": "\"(+ 1 2)\\n3\\n\""
  },
  {
    "name": "eval-when-compile",
    "demo_src": ";;; foo.el<br><br>(eval-when-compile<br>  (require 'cl-lib))<br><br>(defun foo ()<br>  (cl-incf (point)))<br><br>;;; foo.el ends here<br>",
    "demo_result": "(message \"1 Day has %d seconds.\"<br>         (eval-when-compile<br>           (* 24 60 60)))<br>"
  },
  {
    "name": "exec-path",
    "demo_src": "(exec-path)<br>",
    "demo_result": ""
  },
  {
    "name": "executable-find",
    "demo_src": "(executable-find \"git\")<br>",
    "demo_result": "\"/usr/local/bin/git\""
  },
  {
    "name": "exp",
    "demo_src": "(exp 1)<br>",
    "demo_result": "2.718281828459045"
  },
  {
    "name": "expand-file-name",
    "demo_src": "(expand-file-name \"custom.el\" user-emacs-directory)<br>",
    "demo_result": "\"/Users/xcy/.emacs.d/custom.el\""
  },
  {
    "name": "expt",
    "demo_src": "(expt 2 10)<br>",
    "demo_result": "1024"
  },
  {
    "name": "extract-rectangle",
    "demo_src": "(with-temp-buffer<br>  (set-mark (point))<br>  (insert \"AAA\" ?\\n<br>          \"BBB\" ?\\n<br>          \"CCC\")<br>  (rectangle-mark-mode)<br>  (extract-rectangle (region-beginning) (region-end)))<br>",
    "demo_result": "(\"AAA\" \"BBB\" \"CCC\")"
  },
  {
    "name": "extract-rectangle-bounds",
    "demo_src": "(with-temp-buffer<br>  (set-mark (point))<br>  (insert \"AAA\" ?\\n<br>          \"BBB\" ?\\n<br>          \"CCC\")<br>  (rectangle-mark-mode)<br>  (extract-rectangle-bounds (region-beginning) (region-end)))<br>",
    "demo_result": "((1 . 4)<br> (5 . 8)<br> (9 . 12))"
  },
  {
    "name": "f-absolute?",
    "demo_src": "(f-absolute? \".\")<br>",
    "demo_result": "nil"
  },
  {
    "name": "f-ancestor-of?",
    "demo_src": "(f-ancestor-of? (getenv \"HOME\") user-init-file)<br>",
    "demo_result": "t"
  },
  {
    "name": "f-append-bytes",
    "demo_src": "(let ((tmpfile (make-temp-file \"elisp-demos-\")))<br>  (unwind-protect<br>      (progn<br>        (f-append-bytes (unibyte-string 1 2 3) tmpfile)<br>        (f-append-bytes (unibyte-string 4 5 6) tmpfile)<br>        (string-to-list (f-read-bytes tmpfile)))<br>    (delete-file tmpfile)))<br>",
    "demo_result": "(1 2 3 4 5 6)"
  },
  {
    "name": "f-append-text",
    "demo_src": "(let ((tmpfile (make-temp-file \"elisp-demos-\")))<br>  (unwind-protect<br>      (progn<br>        (f-append-text \"Hello\" 'utf-8 tmpfile)<br>        (f-append-text \" World\" 'utf-8 tmpfile)<br>        (f-read-text tmpfile 'utf-8))<br>    (delete-file tmpfile)))<br>",
    "demo_result": "\"Hello World\""
  },
  {
    "name": "f-base",
    "demo_src": "(f-base \"/path/to/file.txt\")<br>",
    "demo_result": "\"file\""
  },
  {
    "name": "f-child-of?",
    "demo_src": "(f-child-of? user-init-file user-emacs-directory)<br>",
    "demo_result": ""
  },
  {
    "name": "f-common-parent",
    "demo_src": "(f-common-parent '(\"foo/bar/baz\" \"foo/bar/qux\" \"foo/bar/mux\"))<br>",
    "demo_result": "\"foo/bar/\""
  },
  {
    "name": "f-delete",
    "demo_src": "(let ((tmpfile (make-temp-file \"elisp-demos-\")))<br>  (message \"%s is created\" tmpfile)<br>  (f-delete tmpfile)<br>  (unless (file-exists-p tmpfile)<br>    (message \"%s is deleted\" tmpfile))<br>  nil)<br>",
    "demo_result": "nil"
  },
  {
    "name": "f-depth",
    "demo_src": "(f-depth \"/path/to/file\")<br>",
    "demo_result": "3"
  },
  {
    "name": "f-descendant-of?",
    "demo_src": "(f-descendant-of? user-init-file (getenv \"HOME\"))<br>",
    "demo_result": "t"
  },
  {
    "name": "f-directory?",
    "demo_src": "(f-directory? user-emacs-directory)<br>",
    "demo_result": "t"
  },
  {
    "name": "f-dirname",
    "demo_src": "(f-dirname \"/path/to/file\")<br>",
    "demo_result": "\"/path/to\""
  },
  {
    "name": "f-empty?",
    "demo_src": "(let ((tmpfile (make-temp-file \"elisp-demos-\")))<br>  (unwind-protect (f-empty? tmpfile)<br>    (f-delete tmpfile)))<br>",
    "demo_result": "t"
  },
  {
    "name": "f-executable?",
    "demo_src": "(f-executable? \"/bin/sh\")<br>",
    "demo_result": "t"
  },
  {
    "name": "f-exists?",
    "demo_src": "(f-exists? user-emacs-directory)<br>",
    "demo_result": "t"
  },
  {
    "name": "f-expand",
    "demo_src": "(f-expand \"tmp/\" \"/\")<br>",
    "demo_result": "\"/tmp/\""
  },
  {
    "name": "f-ext",
    "demo_src": "(f-ext \"/path/to/file.txt\")<br>",
    "demo_result": "\"txt\""
  },
  {
    "name": "f-ext?",
    "demo_src": "(f-ext? \"init.el\" \"el\")<br>",
    "demo_result": "t"
  },
  {
    "name": "f-file?",
    "demo_src": "(f-file? user-init-file)<br>",
    "demo_result": "t"
  },
  {
    "name": "f-filename",
    "demo_src": "(f-filename \"/path/to/file\")<br>",
    "demo_result": "\"file\""
  },
  {
    "name": "f-join",
    "demo_src": "(f-join \"/\" \"path\" \"to\" \"file\")<br>",
    "demo_result": "\"/path/to/file\""
  },
  {
    "name": "f-mkdir",
    "demo_src": "(let ((tmpdir (make-temp-name \"/tmp/elisp-demos-\")))<br>  (f-mkdir tmpdir)<br>  (message \"%s is a directory and exists? %s\" tmpdir (f-dir? tmpdir))<br>  (f-delete tmpdir))<br>",
    "demo_result": "nil"
  },
  {
    "name": "f-no-ext",
    "demo_src": "(f-no-ext \"/path/to/file.txt\")<br>",
    "demo_result": "\"/path/to/file\""
  },
  {
    "name": "f-parent-of?",
    "demo_src": "(f-parent-of? user-emacs-directory user-init-file)<br>",
    "demo_result": "t"
  },
  {
    "name": "f-read-bytes",
    "demo_src": "(let ((tmpfile (make-temp-file \"elisp-demos-\")))<br>  (unwind-protect<br>      (progn<br>        (f-write-bytes (unibyte-string 0 1 2 3) tmpfile)<br>        (string-to-list (f-read-bytes tmpfile)))<br>    (delete-file tmpfile)))<br>",
    "demo_result": "(0 1 2 3)"
  },
  {
    "name": "f-read-text",
    "demo_src": "(let ((tmpfile (make-temp-file \"elisp-demos-\")))<br>  (unwind-protect<br>      (progn<br>        (f-write-text \"Hello world\" 'utf-8 tmpfile)<br>        (f-read-text tmpfile 'utf-8))<br>    (delete-file tmpfile)))<br>",
    "demo_result": "\"Hello world\""
  },
  {
    "name": "f-readable?",
    "demo_src": "(f-readable? user-init-file)<br>",
    "demo_result": "t"
  },
  {
    "name": "f-relative",
    "demo_src": "(f-relative \"/path/to/file.txt\" \"/path/to/\")<br>",
    "demo_result": "\"file.txt\""
  },
  {
    "name": "f-relative?",
    "demo_src": "(f-relative? \".\")<br>",
    "demo_result": "t"
  },
  {
    "name": "f-root?",
    "demo_src": "(f-root? \"/\")<br>",
    "demo_result": "t"
  },
  {
    "name": "f-same?",
    "demo_src": "(f-same? user-init-file \"~/.emacs.d/init.el\")<br>",
    "demo_result": "t"
  },
  {
    "name": "f-short",
    "demo_src": "(f-short user-init-file)<br>",
    "demo_result": "\"~/.emacs.d/init.el\""
  },
  {
    "name": "f-size",
    "demo_src": "(let ((tmpfile (make-temp-file \"elisp-demos-\")))<br>  (unwind-protect<br>      (progn<br>        (f-write-bytes (unibyte-string 0 #xff) tmpfile)<br>        (f-size tmpfile))<br>    (f-delete tmpfile)))<br>",
    "demo_result": "2"
  },
  {
    "name": "f-slash",
    "demo_src": "(f-slash \".\")<br>",
    "demo_result": "\"./\""
  },
  {
    "name": "f-split",
    "demo_src": "(f-split \"/path/to/file\")<br>",
    "demo_result": "(\"/\" \"path\" \"to\" \"file\")"
  },
  {
    "name": "f-swap-ext",
    "demo_src": "(f-swap-ext \"/path/to/file.txt\" \"org\")<br>",
    "demo_result": "\"/path/to/file.org\""
  },
  {
    "name": "f-uniquify",
    "demo_src": "(f-uniquify '(\"/foo/bar\" \"/foo/baz\" \"/foo/quux\"))<br>",
    "demo_result": "(\"bar\" \"baz\" \"quux\")"
  },
  {
    "name": "f-uniquify-alist",
    "demo_src": "(f-uniquify-alist '(\"/foo/bar\" \"/foo/baz\" \"/foo/quux\"))<br>",
    "demo_result": "((\"/foo/bar\" . \"bar\")<br> (\"/foo/baz\" . \"baz\")<br> (\"/foo/quux\" . \"quux\"))"
  },
  {
    "name": "f-writable?",
    "demo_src": "(f-writable? user-init-file)<br>",
    "demo_result": "t"
  },
  {
    "name": "f-write-bytes",
    "demo_src": "(let ((tmpfile (make-temp-file \"elisp-demos-\")))<br>  (unwind-protect<br>      (progn<br>        (f-write-bytes (unibyte-string 0 1 2 3) tmpfile)<br>        (string-to-list (f-read-bytes tmpfile)))<br>    (delete-file tmpfile)))<br>",
    "demo_result": "(0 1 2 3)"
  },
  {
    "name": "f-write-text",
    "demo_src": "(let ((tmpfile (make-temp-file \"elisp-demos-\")))<br>  (unwind-protect<br>      (progn<br>        (f-write-text \"Hello world\" 'utf-8 tmpfile)<br>        (f-read-text tmpfile 'utf-8))<br>    (delete-file tmpfile)))<br>",
    "demo_result": "\"Hello world\""
  },
  {
    "name": "face-all-attributes",
    "demo_src": "(face-all-attributes 'bold (selected-frame))<br>",
    "demo_result": "((:family . unspecified)<br> (:foundry . unspecified)<br> (:width . unspecified)<br> (:height . unspecified)<br> (:weight . bold)<br> (:slant . unspecified)<br> (:underline . unspecified)<br> (:overline . unspecified)<br> (:strike-through . unspecified)<br> (:box . unspecified)<br> (:inverse-video . unspecified)<br> (:foreground . unspecified)<br> (:background . unspecified)<br> (:stipple . unspecified)<br> (:inherit . unspecified))<br>"
  },
  {
    "name": "face-attribute",
    "demo_src": "(face-attribute 'bold :weight)<br>",
    "demo_result": "bold"
  },
  {
    "name": "face-attribute-relative-p",
    "demo_src": "(face-attribute-relative-p :height 2.0)<br>",
    "demo_result": "t"
  },
  {
    "name": "face-differs-from-default-p",
    "demo_src": "(face-differs-from-default-p 'region)<br>",
    "demo_result": ":background"
  },
  {
    "name": "face-documentation",
    "demo_src": "(face-documentation 'region)<br>",
    "demo_result": "\"Basic face for highlighting the region.\""
  },
  {
    "name": "face-equal",
    "demo_src": "(face-equal 'error 'warning)<br>",
    "demo_result": "nil"
  },
  {
    "name": "face-id",
    "demo_src": "(face-id 'region)<br>",
    "demo_result": "12"
  },
  {
    "name": "face-list",
    "demo_src": "(face-list)<br>",
    "demo_result": ""
  },
  {
    "name": "facep",
    "demo_src": "(facep 'error)<br>",
    "demo_result": ""
  },
  {
    "name": "fboundp",
    "demo_src": "(fboundp 'font-lock-ensure)<br>",
    "demo_result": "t"
  },
  {
    "name": "fceiling",
    "demo_src": "(fceiling 1.2)<br>",
    "demo_result": "2.0"
  },
  {
    "name": "feature-file",
    "demo_src": "(feature-file 'pcase)<br>",
    "demo_result": "\"/Users/xcy/src/emacs-mac/lisp/emacs-lisp/pcase.elc\""
  },
  {
    "name": "featurep",
    "demo_src": "(featurep 'xemacs)<br>",
    "demo_result": "nil"
  },
  {
    "name": "ffloor",
    "demo_src": "(ffloor 1.2)<br>",
    "demo_result": "1.0"
  },
  {
    "name": "file-accessible-directory-p",
    "demo_src": "(file-accessible-directory-p user-emacs-directory)<br>",
    "demo_result": "t"
  },
  {
    "name": "file-attribute-modes",
    "demo_src": "(file-attribute-modes (file-attributes user-init-file))<br>",
    "demo_result": "\"-rw-r--r--\""
  },
  {
    "name": "file-attribute-modification-time",
    "demo_src": "(format-time-string<br> \"%F %T\"<br> (file-attribute-modification-time (file-attributes user-init-file)))<br>",
    "demo_result": "\"2020-03-01 02:20:27\""
  },
  {
    "name": "file-attribute-size",
    "demo_src": "(file-attribute-size (file-attributes user-init-file))<br>",
    "demo_result": "201878"
  },
  {
    "name": "file-attributes",
    "demo_src": "(file-attributes user-init-file)<br>",
    "demo_result": "(nil 1 501 20<br>     (23533 25246 3637 220000)<br>     (23533 25245 994959 733000)<br>     (23533 25245 994959 733000)<br>     150332 \"-rw-r--r--\" t 8617049288 16777220)"
  },
  {
    "name": "file-dependents",
    "demo_src": "(file-dependents (feature-file 'cl))<br>",
    "demo_result": "(\"/Users/xcy/.emacs.d/package-quickstart.el\")"
  },
  {
    "name": "file-directory-p",
    "demo_src": "(file-directory-p user-emacs-directory)<br>",
    "demo_result": "t"
  },
  {
    "name": "file-equal-p",
    "demo_src": "(file-equal-p \"~/.emacs.d/init.el\" user-init-file)<br>",
    "demo_result": "t"
  },
  {
    "name": "file-executable-p",
    "demo_src": "(file-executable-p \"/bin/sh\")<br>",
    "demo_result": "t"
  },
  {
    "name": "file-exists-p",
    "demo_src": "(file-exists-p user-init-file)<br>",
    "demo_result": "t"
  },
  {
    "name": "file-expand-wildcards",
    "demo_src": "(file-expand-wildcards \"*.el\")<br>",
    "demo_result": "(\"elisp-demos-tests.el\" \"elisp-demos.el\")"
  },
  {
    "name": "file-in-directory-p",
    "demo_src": "(file-in-directory-p user-init-file user-emacs-directory)<br>",
    "demo_result": "t"
  },
  {
    "name": "file-local-name",
    "demo_src": "(file-local-name \"/ssh:USER@HOST:/foo/bar\")<br>",
    "demo_result": "\"/foo/bar\""
  },
  {
    "name": "file-modes",
    "demo_src": "(format \"%o\" (file-modes user-init-file))<br>",
    "demo_result": "\"644\""
  },
  {
    "name": "file-name-absolute-p",
    "demo_src": "(list (file-name-absolute-p \"README.md\")<br>      (file-name-absolute-p \"/path/to/README.md\"))<br>",
    "demo_result": "(nil t)"
  },
  {
    "name": "file-name-all-completions",
    "demo_src": "(file-name-all-completions \"vim\" \"/usr/bin/\")<br>",
    "demo_result": "(\"vimtutor\" \"vimdiff\" \"vim\")"
  },
  {
    "name": "file-name-as-directory",
    "demo_src": "(file-name-as-directory \"~\")<br>",
    "demo_result": "\"~/\""
  },
  {
    "name": "file-name-base",
    "demo_src": "(file-name-base \"/Users/xcy/.emacs.d/init.el\")<br>",
    "demo_result": "\"init\""
  },
  {
    "name": "file-name-case-insensitive-p",
    "demo_src": ";; Some macOS systems's file system is case-insensitive<br>(file-name-case-insensitive-p user-init-file)<br>",
    "demo_result": "t"
  },
  {
    "name": "file-name-completion",
    "demo_src": "(file-name-completion \"em\" \"/usr/bin/\")<br>",
    "demo_result": "\"emacs\""
  },
  {
    "name": "file-name-directory",
    "demo_src": "(file-name-directory \"/Users/xcy/.emacs.d/init.el\")<br>",
    "demo_result": "\"/Users/xcy/.emacs.d/\""
  },
  {
    "name": "file-name-extension",
    "demo_src": "(file-name-extension \"init.el\")<br>",
    "demo_result": "\"el\""
  },
  {
    "name": "file-name-nondirectory",
    "demo_src": "(file-name-nondirectory \"/Users/xcy/.emacs.d/init.el\")<br>",
    "demo_result": "\"init.el\""
  },
  {
    "name": "file-name-sans-extension",
    "demo_src": "(file-name-sans-extension \"simple.el.gz\")<br>",
    "demo_result": "\"simple.el\""
  },
  {
    "name": "file-name-sans-versions",
    "demo_src": "(file-name-sans-versions \"README.md~\")<br>",
    "demo_result": "\"README.md\""
  },
  {
    "name": "file-newer-than-file-p",
    "demo_src": "(let ((file1 (make-temp-file \"elisp-demo-\"))<br>      (file2 (make-temp-file \"elisp-demo-\")))<br>  (unwind-protect<br>      (file-newer-than-file-p file2 file1)<br>    (delete-file file1)<br>    (delete-file file2)))<br>",
    "demo_result": "t"
  },
  {
    "name": "file-nlinks",
    "demo_src": "(file-nlinks \"/usr/bin/vim\")<br>",
    "demo_result": "1"
  },
  {
    "name": "file-notify-add-watch",
    "demo_src": "(file-notify-add-watch<br> user-init-file<br> '(change attribute-change)<br> (lambda (event) (message \"Event %S\" event)))<br>",
    "demo_result": "45"
  },
  {
    "name": "file-ownership-preserved-p",
    "demo_src": "(file-ownership-preserved-p user-init-file)<br>",
    "demo_result": "t"
  },
  {
    "name": "file-readable-p",
    "demo_src": "(file-readable-p user-init-file)<br>",
    "demo_result": "t"
  },
  {
    "name": "file-regular-p",
    "demo_src": "(file-regular-p user-init-file)<br>",
    "demo_result": "t"
  },
  {
    "name": "file-relative-name",
    "demo_src": "(file-relative-name user-init-file user-emacs-directory)<br>",
    "demo_result": "\"init.el\""
  },
  {
    "name": "file-remote-p",
    "demo_src": "(file-remote-p \"/ssh:USER@HOST:/foo/bar\")<br>",
    "demo_result": "\"/ssh:USER@HOST:\""
  },
  {
    "name": "file-size-human-readable",
    "demo_src": "(file-size-human-readable 1024)<br>",
    "demo_result": "\"1k\""
  },
  {
    "name": "file-symlink-p",
    "demo_src": "(file-symlink-p \"/usr/bin/ex\")<br>",
    "demo_result": "\"vim\""
  },
  {
    "name": "file-system-info",
    "demo_src": "(file-system-info user-init-file)<br>",
    "demo_result": "(121123069952 19899543552 15998967808)"
  },
  {
    "name": "file-truename",
    "demo_src": "(file-truename \"~/../../\")<br>",
    "demo_result": "\"/\""
  },
  {
    "name": "file-writable-p",
    "demo_src": "(file-writable-p user-init-file)<br>",
    "demo_result": "t"
  },
  {
    "name": "filepos-to-bufferpos",
    "demo_src": "(with-temp-buffer<br>  (insert \"(λ)\")<br>  (filepos-to-bufferpos 1))<br>",
    "demo_result": "2"
  },
  {
    "name": "fill-common-string-prefix",
    "demo_src": "(fill-common-string-prefix \"bar\" \"baz\")<br>",
    "demo_result": "\"ba\""
  },
  {
    "name": "fillarray",
    "demo_src": "(let ((array (vector 1 2 3)))<br>  (fillarray array 0)<br>  array)<br>",
    "demo_result": "[0 0 0]"
  },
  {
    "name": "find-class",
    "demo_src": "(defclass my-class () () \"My Class.\")<br>(find-class 'my-class)<br>",
    "demo_result": "#s(eieio--class my-class \"My Class.\" nil<br>                []<br>                #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data<br>                              ())<br>                nil nil<br>                []<br>                []<br>                #s(#0)<br>                (:custom-groups nil :documentation \"My Class.\"))"
  },
  {
    "name": "find-coding-systems-region",
    "demo_src": "(with-temp-buffer<br>  (insert \"世界，你好\")<br>  (length (find-coding-systems-region (point-min) (point-max))))<br>",
    "demo_result": "39"
  },
  {
    "name": "find-coding-systems-string",
    "demo_src": "(length (find-coding-systems-string \"世界，你好\"))<br>",
    "demo_result": "39"
  },
  {
    "name": "find-definition-noselect",
    "demo_src": "(find-definition-noselect 'pcase nil)<br>",
    "demo_result": "(#<buffer pcase.el.gz> . 4220)"
  },
  {
    "name": "find-file",
    "demo_src": "(find-file user-init-file)<br>",
    "demo_result": "#<buffer init.el>"
  },
  {
    "name": "find-file-literally",
    "demo_src": "(find-file-literally user-init-file)<br>",
    "demo_result": ""
  },
  {
    "name": "find-file-noselect",
    "demo_src": "(find-file-noselect user-init-file)<br>",
    "demo_result": "#<buffer init.el>"
  },
  {
    "name": "find-file-other-window",
    "demo_src": "(find-file-other-window user-init-file)<br>",
    "demo_result": "#<buffer init.el>"
  },
  {
    "name": "find-file-read-only",
    "demo_src": "(find-file-read-only user-init-file)<br>",
    "demo_result": "#<buffer init.el>"
  },
  {
    "name": "find-function-C-source",
    "demo_src": "(find-function-C-source 'car \"data.c\" nil)<br>",
    "demo_result": "(#<buffer data.c> . 13992)"
  },
  {
    "name": "find-function-noselect",
    "demo_src": "(find-function-noselect 'pcase)<br>",
    "demo_result": "(#<buffer pcase.el.gz> . 4220)"
  },
  {
    "name": "find-function-search-for-symbol",
    "demo_src": "(find-function-search-for-symbol<br> 'car nil<br> (help-C-file-name (symbol-function 'car) 'subr))<br>",
    "demo_result": "(#<buffer data.c> . 13992)"
  },
  {
    "name": "find-image",
    "demo_src": "(find-image '((:type svg :file \"splash.svg\")<br>              (:type png :file \"splash.png\")))<br>",
    "demo_result": "(image :type svg :file \"/usr/local/share/emacs/26.2/etc/images/splash.svg\")"
  },
  {
    "name": "find-library-name",
    "demo_src": "(find-library-name \"seq\")<br>",
    "demo_result": "\"/Users/xcy/src/emacs-mac/lisp/emacs-lisp/seq.el\""
  },
  {
    "name": "find-lisp-object-file-name",
    "demo_src": "(find-lisp-object-file-name 'if (symbol-function 'if))<br>",
    "demo_result": "\"src/eval.c\""
  },
  {
    "name": "find-variable-noselect",
    "demo_src": "(find-variable-noselect 'emacs-version)<br>",
    "demo_result": "(#<buffer emacs.c> . 91318)"
  },
  {
    "name": "flatten-tree",
    "demo_src": "(flatten-tree '(1 (2 . 3) nil (4 5 (6)) 7))<br>",
    "demo_result": "(1 2 3 4 5 6 7)"
  },
  {
    "name": "float",
    "demo_src": ";; -> 0<br>(float 1)<br>",
    "demo_result": "1.0"
  },
  {
    "name": "float-time",
    "demo_src": "(float-time)<br>",
    "demo_result": "1542230331.775671"
  },
  {
    "name": "floatp",
    "demo_src": "(floatp float-pi)<br>",
    "demo_result": "t"
  },
  {
    "name": "floor",
    "demo_src": ";; -> -∞<br>(floor 1.2)<br>",
    "demo_result": "1"
  },
  {
    "name": "fmakunbound",
    "demo_src": "(defun foo ()<br>  42)<br><br>(fmakunbound 'foo)<br><br>(fboundp 'foo)<br>",
    "demo_result": "nil"
  },
  {
    "name": "following-char",
    "demo_src": "(with-temp-buffer<br>  (insert \"ABC\")<br>  (following-char))<br>",
    "demo_result": "0"
  },
  {
    "name": "font-at",
    "demo_src": "(font-at 1)<br>",
    "demo_result": "#<font-object \"-*-Source Code Pro-normal-italic-normal-*-13-*-*-*-m-0-iso10646-1\">"
  },
  {
    "name": "font-face-attributes",
    "demo_src": "(font-face-attributes (face-attribute 'default :font))<br>",
    "demo_result": "(:family \"Source Code Pro\" :height 130 :weight normal :slant normal :width normal)"
  },
  {
    "name": "font-family-list",
    "demo_src": "(font-family-list)<br>",
    "demo_result": ""
  },
  {
    "name": "font-get",
    "demo_src": "(font-get (face-attribute 'default :font) :size)<br>",
    "demo_result": "13"
  },
  {
    "name": "font-info",
    "demo_src": "(font-info \"Courier\")<br>",
    "demo_result": "[\"-*-Courier-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1\" \"Courier:pixelsize=12:weight=normal:slant=normal:width=normal:spacing=100:scalable=true\" 12 14 0 0 0 7 11 3 7 7 nil nil]"
  },
  {
    "name": "font-lock-ensure",
    "demo_src": "(with-temp-buffer<br>  (insert \":foo\")<br>  (delay-mode-hooks (emacs-lisp-mode))<br>  (font-lock-ensure)<br>  (buffer-string))<br>",
    "demo_result": "#(\":foo\" 0 4<br>  (face font-lock-builtin-face))"
  },
  {
    "name": "fontp",
    "demo_src": "(fontp (face-attribute 'default :font))<br>",
    "demo_result": "t"
  },
  {
    "name": "format",
    "demo_src": "(format \"Hello, %s!\" \"World\")<br>",
    "demo_result": "\"Hello, World!\""
  },
  {
    "name": "format-message",
    "demo_src": "(let ((text-quoting-style 'curve))<br>  (format-message \"The version is stored in `emacs-version'\"))<br>",
    "demo_result": "\"The version is stored in ‘emacs-version’\""
  },
  {
    "name": "format-mode-line",
    "demo_src": "(format-mode-line '(buffer-file-name \"%f\" \"%b\"))<br>",
    "demo_result": "\"/Users/xcy/src/elisp-demos/elisp-demos.org\""
  },
  {
    "name": "format-network-address",
    "demo_src": "(format-network-address [192 160 0 102 0])<br>",
    "demo_result": "\"192.160.0.102:0\""
  },
  {
    "name": "format-seconds",
    "demo_src": "(format-seconds \"Emacs is %y years, %d days, %h hours, %m minutes, %s seconds old\"<br>                ;; Initial release, 20 March 1985<br>                (time-to-seconds (time-subtract nil (date-to-time \"1985-03-20T00:00:00Z\"))))<br>",
    "demo_result": "\"Emacs is 33 years, 247 days, 21 hours, 32 minutes, 51 seconds old\""
  },
  {
    "name": "format-spec",
    "demo_src": "(format-spec \"%a + %b = %b + %a\" '((?a . 1) (?b . 2)))<br>",
    "demo_result": "\"1 + 2 = 2 + 1\""
  },
  {
    "name": "format-spec-make",
    "demo_src": "(format-spec-make ?a 1 ?b 2)<br>",
    "demo_result": "((97 . 1)<br> (98 . 2))"
  },
  {
    "name": "format-time-string",
    "demo_src": "(format-time-string \"%Y-%m-%d %H:%M:%S %z\")<br>",
    "demo_result": "\"2018-11-15 05:23:25 +0800\""
  },
  {
    "name": "forward-line",
    "demo_src": "(forward-line)<br>",
    "demo_result": "0"
  },
  {
    "name": "frame-list",
    "demo_src": "(frame-list)<br>",
    "demo_result": "(#<frame /Users/xcy/src/elisp-demos/elisp-demos.org 0x1049a21e8>)"
  },
  {
    "name": "frame-list-z-order",
    "demo_src": "(frame-list-z-order)<br>",
    "demo_result": "(#<frame /Users/xcy/src/elisp-demos/elisp-demos.org 0x1049a21e8>)"
  },
  {
    "name": "frame-root-window",
    "demo_src": "(frame-root-window)<br>",
    "demo_result": "#<window 43>"
  },
  {
    "name": "frame-terminal",
    "demo_src": "(frame-terminal)<br>",
    "demo_result": "#<terminal 1 on Mac>"
  },
  {
    "name": "frexp",
    "demo_src": "(frexp 8)<br>",
    "demo_result": "(0.5 . 4)"
  },
  {
    "name": "fround",
    "demo_src": "(fround 1.5)<br>",
    "demo_result": "2.0"
  },
  {
    "name": "fset",
    "demo_src": "(fset 'foo (lambda () 42))<br><br>(foo)<br>",
    "demo_result": "42"
  },
  {
    "name": "ftruncate",
    "demo_src": "(ftruncate 1.2)<br>",
    "demo_result": "1.0"
  },
  {
    "name": "func-arity",
    "demo_src": "(func-arity #'+)<br>",
    "demo_result": "(0 . many)"
  },
  {
    "name": "funcall",
    "demo_src": "(funcall (intern \"+\") 1 2 3)<br>",
    "demo_result": "6"
  },
  {
    "name": "function-get",
    "demo_src": "(list (get 'count-matches 'modifier-cache)<br>      (function-get 'count-matches 'modifier-cache))<br>",
    "demo_result": "(nil<br> ((0 . how-many)))"
  },
  {
    "name": "function-put",
    "demo_src": "(function-put 'count-matches 'foo \"test\")<br>",
    "demo_result": "\"test\""
  },
  {
    "name": "gap-position",
    "demo_src": "(gap-position)<br>",
    "demo_result": "18468"
  },
  {
    "name": "gap-size",
    "demo_src": "(gap-size)<br>",
    "demo_result": "2520"
  },
  {
    "name": "generate-new-buffer",
    "demo_src": "(generate-new-buffer \"*foo*\")<br>",
    "demo_result": "#<buffer *foo*<3>>"
  },
  {
    "name": "generate-new-buffer-name",
    "demo_src": "(generate-new-buffer-name \"*Messages*\")<br>",
    "demo_result": "\"*Messages*<2>\""
  },
  {
    "name": "generic-p",
    "demo_src": "(defclass circle ()<br>  ((radius :initarg :radius))<br>  \"A circle class.\")<br><br>(cl-defmethod area ((c circle))<br>  \"Return area of the circle C.\"<br>  (* float-pi (expt (oref c :radius) 2)))<br><br>;; C-h f area<br>(generic-p 'area)<br>",
    "demo_result": "t"
  },
  {
    "name": "gensym",
    "demo_src": "(list gensym-counter<br>      (gensym)<br>      gensym-counter)<br>",
    "demo_result": "(11 g11 12)"
  },
  {
    "name": "get",
    "demo_src": "(get 'beginning-of-buffer 'interactive-only)<br>",
    "demo_result": "\"use `(goto-char (point-min))' instead.\""
  },
  {
    "name": "get-buffer",
    "demo_src": "(get-buffer \"*Messages*\")<br>",
    "demo_result": "#<buffer *Messages*>"
  },
  {
    "name": "get-buffer-create",
    "demo_src": "(get-buffer-create \" *foo*\")<br>",
    "demo_result": "#<buffer  *foo*>"
  },
  {
    "name": "get-buffer-process",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(get-buffer-process \"*shell*\")<br>",
    "demo_result": "#<process shell>"
  },
  {
    "name": "get-byte",
    "demo_src": ";; λ, #x3bb, #xCE #xBB<br>(format \"#x%X\" (get-byte 0 (string-as-unibyte \"λ\")))<br>",
    "demo_result": "\"#xCE\""
  },
  {
    "name": "get-char-code-property",
    "demo_src": "(get-char-code-property ?A 'name)<br>",
    "demo_result": "\"LATIN CAPITAL LETTER A\""
  },
  {
    "name": "get-device-terminal",
    "demo_src": "(get-device-terminal nil)<br>",
    "demo_result": "#<terminal 1 on Mac>"
  },
  {
    "name": "get-file-buffer",
    "demo_src": "(get-file-buffer user-init-file)<br>",
    "demo_result": "#<buffer init.el>"
  },
  {
    "name": "get-free-disk-space",
    "demo_src": "(get-free-disk-space \".\")<br>",
    "demo_result": "\"14.9 GiB\""
  },
  {
    "name": "get-internal-run-time",
    "demo_src": "(time-to-seconds (get-internal-run-time))<br>",
    "demo_result": "103.553696"
  },
  {
    "name": "get-process",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(get-process \"shell\")<br>",
    "demo_result": "#<process shell>"
  },
  {
    "name": "getenv",
    "demo_src": "(getenv \"TERM\")<br>",
    "demo_result": "\"dumb\""
  },
  {
    "name": "gethash",
    "demo_src": "(gethash 'x #s(hash-table data (x 1 y 2)))<br>",
    "demo_result": "1"
  },
  {
    "name": "gnutls-available-p",
    "demo_src": "(length (gnutls-available-p))<br>",
    "demo_result": "30"
  },
  {
    "name": "gnutls-hash-mac",
    "demo_src": ";; ~ $ echo -n \"value\" | openssl dgst -sha1 -hmac \"key\"<br>;; 57443a4c052350a44638835d64fd66822f813319<br>(mapconcat<br> (lambda (char) (format \"%02x\" char))<br> (gnutls-hash-mac 'SHA1 \"key\" \"value\")<br> \"\")<br>",
    "demo_result": "\"57443a4c052350a44638835d64fd66822f813319\""
  },
  {
    "name": "gnutls-negotiate",
    "demo_src": "(let* ((host \"example.com\") (port 443)<br>       (buffer (generate-new-buffer \"*https*\"))<br>       (proc (make-network-process<br>              :name \"https\"<br>              :buffer buffer<br>              :host host<br>              :service port)))<br>  (display-buffer buffer)<br>  (gnutls-negotiate :process proc<br>                    :hostname host)<br>  (process-send-string<br>   proc<br>   \"GET / HTTP/1.1\\r\\nHost: example.com\\r\\nConnection: Close\\r\\n\\r\\n\"))<br>",
    "demo_result": ""
  },
  {
    "name": "gnutls-symmetric-decrypt",
    "demo_src": "(gnutls-symmetric-decrypt<br> 'RC2-40 \"key12\" \"iv123456\"<br> (unibyte-string<br>  96 70 247 93 105 98 150 70))<br>",
    "demo_result": "(\"VALUE121\" \"iv123456\")"
  },
  {
    "name": "gnutls-symmetric-encrypt",
    "demo_src": "(gnutls-symmetric-encrypt 'RC2-40 \"key12\" \"iv123456\" \"VALUE121\")<br>",
    "demo_result": "(\"`F\\367]ib\\226F\" \"iv123456\")"
  },
  {
    "name": "goto-char",
    "demo_src": "(goto-char (point-min))<br>",
    "demo_result": ""
  },
  {
    "name": "group-gid",
    "demo_src": "(group-gid)<br>",
    "demo_result": "20"
  },
  {
    "name": "group-name",
    "demo_src": "(group-name (group-gid))<br>",
    "demo_result": "\"staff\""
  },
  {
    "name": "group-real-gid",
    "demo_src": "(group-real-gid)<br>",
    "demo_result": "20"
  },
  {
    "name": "gv-define-setter",
    "demo_src": "(gv-define-setter caar (val x) `(setcar (car ,x) ,val))<br>",
    "demo_result": ""
  },
  {
    "name": "gv-define-simple-setter",
    "demo_src": "(gv-define-simple-setter car setcar)<br>",
    "demo_result": ""
  },
  {
    "name": "hash-table-count",
    "demo_src": "(hash-table-count #s(hash-table data (x 1 y 2 z 3)))<br>",
    "demo_result": "3"
  },
  {
    "name": "hash-table-empty-p",
    "demo_src": "(hash-table-empty-p #s(hash-table))<br>",
    "demo_result": "t"
  },
  {
    "name": "hash-table-keys",
    "demo_src": "(hash-table-keys #s(hash-table data (x 1 y 2 z 3)))<br>",
    "demo_result": "(x y z)"
  },
  {
    "name": "hash-table-p",
    "demo_src": "(hash-table-p #s(hash-table))<br>",
    "demo_result": "t"
  },
  {
    "name": "hash-table-rehash-size",
    "demo_src": "(hash-table-rehash-size #s(hash-table))<br>",
    "demo_result": "1.5"
  },
  {
    "name": "hash-table-rehash-threshold",
    "demo_src": "(hash-table-rehash-threshold #s(hash-table))<br>",
    "demo_result": "0.8125"
  },
  {
    "name": "hash-table-size",
    "demo_src": "(hash-table-size #s(hash-table))<br>",
    "demo_result": "65"
  },
  {
    "name": "hash-table-test",
    "demo_src": "(hash-table-test #s(hash-table test eq))<br>",
    "demo_result": "eq"
  },
  {
    "name": "hash-table-values",
    "demo_src": "(hash-table-values #s(hash-table data (x 1 y 2 z 3)))<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "hash-table-weakness",
    "demo_src": "(hash-table-weakness #s(hash-table))<br>",
    "demo_result": "nil"
  },
  {
    "name": "helm-build-async-source",
    "demo_src": "(helm<br> :prompt (format \"%s $ find . -type f -iname \" (helm-default-directory))<br> :sources<br> (helm-build-async-source \"find\"<br>   :candidates-process<br>   (lambda ()<br>     (let ((proc (let (process-connection-type)<br>                   (apply #'start-process \"helm-find\" helm-buffer<br>                          \"find\" \".\" \"-type\" \"f\"<br>                          (unless (string-empty-p helm-pattern)<br>                            (list \"-iname\" helm-pattern))))))<br>       (set-process-sentinel proc #'ignore)<br>       proc))<br>   :action #'find-file<br>   :nohighlight t))<br>",
    "demo_result": ""
  },
  {
    "name": "helm-build-dummy-source",
    "demo_src": "(helm :sources<br>      (helm-build-dummy-source \"test\"<br>        :filtered-candidate-transformer<br>        (lambda (_candidates _source)<br>          (mapcar<br>           (lambda (c) (format \"%c: %d\" c c))<br>           helm-pattern))<br>        :nohighlight t))<br>",
    "demo_result": ""
  },
  {
    "name": "helm-build-in-buffer-source",
    "demo_src": "(helm :sources (helm-build-in-buffer-source \"test\"<br>                 :data '(\"foo\" \"bar\" \"baz\"))<br>      :buffer \"*helm test*\")<br>",
    "demo_result": "\"foo\""
  },
  {
    "name": "helm-build-in-file-source",
    "demo_src": "(helm :sources (helm-build-in-file-source \"search init.el\" user-init-file))<br>",
    "demo_result": "\";;; init.el --- Xu Chunyang's Emacs Configuration  -*- lexical-binding: t; -*-\""
  },
  {
    "name": "helm-build-sync-source",
    "demo_src": "(helm<br> :sources<br> (helm-build-sync-source \"test\"<br>   :candidates '(\"foo\" \"bar\" \"baz\")<br>   :action '((\"Message\" . (lambda (candidate) (message \"%s selected\" candidate)))<br>             (\"Insert\" . insert))))<br>",
    "demo_result": "\"bar selected\""
  },
  {
    "name": "help-C-file-name",
    "demo_src": "(help-C-file-name (symbol-function 'if) 'subr)<br>",
    "demo_result": "\"src/eval.c\""
  },
  {
    "name": "hmac-md5",
    "demo_src": "(encode-hex-string (hmac-md5 \"Hi There\" (make-string 16 ?\\x0b)))<br>",
    "demo_result": "\"9294727a3638bb1c13f48ef8158bfc9d\""
  },
  {
    "name": "hmac-md5-96",
    "demo_src": "(encode-hex-string<br> (hmac-md5-96 \"Test With Truncation\" (make-string 16 ?\\x0c)))<br>",
    "demo_result": "\"56461ef2342edc00f9bab995\""
  },
  {
    "name": "identity",
    "demo_src": "(identity 42)<br>",
    "demo_result": "42"
  },
  {
    "name": "if",
    "demo_src": "(if nil 1 2)<br>",
    "demo_result": "2"
  },
  {
    "name": "if-let",
    "demo_src": "(if-let ((match-index (string-match \"d\" \"abcd\")))<br>    (+ match-index 2)<br>  \"It does not match\")<br>",
    "demo_result": "5"
  },
  {
    "name": "if-let*",
    "demo_src": "(if-let* ((match-index (string-match \"d\" \"abcd\")))<br>    (+ match-index 2)<br>  \"It does not match\")<br>",
    "demo_result": "5"
  },
  {
    "name": "ignore",
    "demo_src": "(ignore 42)<br>",
    "demo_result": "nil"
  },
  {
    "name": "ignore-error",
    "demo_src": "(ignore-error end-of-file<br>  (read \"\"))<br>",
    "demo_result": "nil"
  },
  {
    "name": "ignore-errors",
    "demo_src": "(ignore-errors (/ 1 0))<br>",
    "demo_result": "nil"
  },
  {
    "name": "image-transforms-p",
    "demo_src": "(image-transforms-p)<br>",
    "demo_result": "(scale rotate90)"
  },
  {
    "name": "image-type-available-p",
    "demo_src": "(image-type-available-p 'imagemagick)<br>",
    "demo_result": "t"
  },
  {
    "name": "imap-open",
    "demo_src": "(let* ((server \"imap.fastmail.com\")<br>       (user \"mail@xuchunyang.me\")<br>       (pass (when-let ((auth (car (auth-source-search<br>                                    :host server<br>                                    :user user<br>                                    :max 1)))<br>                        (pass (plist-get auth :secret)))<br>               (funcall pass))))<br>  (with-current-buffer (imap-open server nil 'tls)<br>    (imap-authenticate user pass)<br>    (imap-mailbox-select \"INBOX\" 'read-only)<br>    (prog1 (message \"You have %d unread emails in Inbox\"<br>                    (length (imap-search \"UNSEEN\")))<br>      (imap-close))))<br>",
    "demo_result": "\"You have 3 unread emails in Inbox\""
  },
  {
    "name": "indirect-function",
    "demo_src": "(indirect-function #'+)<br>",
    "demo_result": "#<subr +>"
  },
  {
    "name": "indirect-variable",
    "demo_src": "(indirect-variable 'indicate-unused-lines)<br>",
    "demo_result": "indicate-empty-lines"
  },
  {
    "name": "insert",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello\" ?\\s \"world\" ?\\n)<br>  (buffer-string))<br>",
    "demo_result": "\"hello world\\n\""
  },
  {
    "name": "insert-buffer-substring",
    "demo_src": "(let ((src (generate-new-buffer \"*source*\"))<br>      (dst (generate-new-buffer \"*destination*\")))<br>  (princ \"hello world\" src)<br>  (prog1 (with-current-buffer dst<br>           (insert-buffer-substring src 1 6)<br>           (buffer-string))<br>    (kill-buffer src)<br>    (kill-buffer dst)))<br>",
    "demo_result": "\"hello\""
  },
  {
    "name": "insert-button",
    "demo_src": "(insert-button<br> \"Example\"<br> 'face 'link<br> 'action (lambda (_button)<br>           (browse-url \"http://example.com\"))<br> 'help-echo \"mouse-2, RET: Follow this link\"<br> 'follow-link t)<br>",
    "demo_result": ""
  },
  {
    "name": "insert-file-contents",
    "demo_src": "(let ((temp-file (make-temp-file \"elisp-demos-\")))<br>  (unwind-protect<br>      (progn<br>        (write-region \"Hello World\\n\" nil temp-file)<br>        (with-temp-buffer<br>          (insert-file-contents temp-file)<br>          (buffer-string)))<br>    (delete-file temp-file)))<br>",
    "demo_result": "\"Hello World\\n\""
  },
  {
    "name": "insert-file-contents-literally",
    "demo_src": ";; Unicode Check Mark, ✓, #x2713, #xE2 #x9C #x93<br>(write-region (string #x2713) nil \"/tmp/tmp.txt\")<br><br>(list (with-temp-buffer<br>        (insert-file-contents-literally \"/tmp/tmp.txt\")<br>        (buffer-string))<br>      (with-temp-buffer<br>        (insert-file-contents \"/tmp/tmp.txt\")<br>        (buffer-string)))<br>",
    "demo_result": "(\"\\342\\234\\223\" \"✓\")"
  },
  {
    "name": "insert-image",
    "demo_src": "(insert-image (create-image \"splash.png\"))<br>",
    "demo_result": ""
  },
  {
    "name": "insert-image-file",
    "demo_src": "(insert-image-file<br> (expand-file-name \"splash.png\" (car image-load-path)))<br>",
    "demo_result": ""
  },
  {
    "name": "insert-text-button",
    "demo_src": "(insert-text-button<br>   \"Example\"<br>   'face 'link<br>   'action (lambda (_button)<br>             (browse-url \"http://example.com\"))<br>   'help-echo \"mouse-2, RET: Follow this link\"<br>   'follow-link t)<br>",
    "demo_result": "(list (with-temp-buffer (insert-button      \"Example\") (buffer-string))<br>      (with-temp-buffer (insert-text-button \"Example\") (buffer-string)))<br>"
  },
  {
    "name": "integerp",
    "demo_src": "(integerp 42)<br>",
    "demo_result": "t"
  },
  {
    "name": "interactive",
    "demo_src": "(interactive \"sName: \\nbBuffer: \\nP\")<br>;; (list (read-string \"Name: \")<br>;;       (read-buffer \"Buffer: \")<br>;;       current-prefix-arg)<br>",
    "demo_result": ""
  },
  {
    "name": "intern",
    "demo_src": "(intern \"foo\")<br>",
    "demo_result": "foo"
  },
  {
    "name": "intern-soft",
    "demo_src": "(list (intern-soft \"abcde\")<br>      (intern-soft \"intern-soft\"))<br>",
    "demo_result": "(nil intern-soft)"
  },
  {
    "name": "interrupt-process",
    "demo_src": "(interrupt-process (start-process \"sleep\" nil \"sleep\" \"100\"))<br>",
    "demo_result": "#<process sleep>"
  },
  {
    "name": "isnan",
    "demo_src": "(isnan 0.0e+NaN)<br>",
    "demo_result": "t"
  },
  {
    "name": "iso8601-parse",
    "demo_src": "(iso8601-parse \"2020-01-01T18:32:12+08:00\")<br>",
    "demo_result": "(12 32 18 1 1 2020 nil nil 28800)"
  },
  {
    "name": "iso8601-parse-date",
    "demo_src": "(iso8601-parse-date \"2020-01-22\")<br>",
    "demo_result": "(nil nil nil 22 1 2020 nil nil nil)"
  },
  {
    "name": "iso8601-parse-duration",
    "demo_src": "(iso8601-parse-duration \"P3Y6M4DT12H30M5S\")<br>",
    "demo_result": "(5 30 12 4 6 3 nil nil nil)"
  },
  {
    "name": "iso8601-parse-time",
    "demo_src": "(iso8601-parse-time \"18:32:12\")<br>",
    "demo_result": "(12 32 18 nil nil nil nil nil nil)"
  },
  {
    "name": "iter-defun",
    "demo_src": "(iter-defun foo-number-sequence (start)<br>  (while t<br>    (iter-yield start)<br>    (setq start (1+ start))))<br><br>(cl-loop repeat 10<br>         for n iter-by (foo-number-sequence 1)<br>         collect n)<br>",
    "demo_result": "(1 2 3 4 5 6 7 8 9 10)"
  },
  {
    "name": "iter-do",
    "demo_src": "(iter-defun foo-number-sequence (start)<br>  (while t<br>    (iter-yield start)<br>    (setq start (1+ start))))<br><br>(catch 'break<br>  (let ((count 0) result)<br>    (iter-do (n (foo-number-sequence 1))<br>      (if (< count 10)<br>          (push n result)<br>        (throw 'break (nreverse result)))<br>      (setq count (1+ count)))))<br>",
    "demo_result": "(1 2 3 4 5 6 7 8 9 10)"
  },
  {
    "name": "iter-lambda",
    "demo_src": "(cl-loop for n iter-by (funcall (iter-lambda ()<br>                                  (dotimes (i 10)<br>                                    (iter-yield i))))<br>         collect n)<br>",
    "demo_result": "(0 1 2 3 4 5 6 7 8 9)"
  },
  {
    "name": "iter-next",
    "demo_src": "(let ((i (funcall (iter-lambda ()<br>                    (iter-yield 1)<br>                    (iter-yield 2)<br>                    (iter-yield 3)))))<br>  (list (iter-next i)<br>        (iter-next i)<br>        (iter-next i)))<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "iter-yield",
    "demo_src": "(let ((it (funcall (iter-lambda ()<br>                     (iter-yield 1)<br>                     2))))<br>  (iter-next it))<br>",
    "demo_result": "1"
  },
  {
    "name": "iter-yield-from",
    "demo_src": "(let* ((it (funcall (iter-lambda ()<br>                      (iter-yield 1)<br>                      (iter-yield 2)<br>                      (iter-yield 3))))<br>       (it2 (funcall (iter-lambda ()<br>                       (iter-yield-from it)))))<br>  (list (iter-next it2)<br>        (iter-next it2)<br>        (iter-next it2)))<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "json-encode",
    "demo_src": "(json-encode '((id . 42)<br>               (comment ((author . \"Spike\")<br>                         (date . \"2018-11-08\")))))<br>",
    "demo_result": "\"{\\\"id\\\":42,\\\"comment\\\":[{\\\"author\\\":\\\"Spike\\\",\\\"date\\\":\\\"2018-11-08\\\"}]}\""
  },
  {
    "name": "json-insert",
    "demo_src": "(with-temp-buffer<br>  (json-insert '(:id 42 :message \"hello world\"))<br>  (buffer-string))<br>",
    "demo_result": "\"{\\\"id\\\":42,\\\"message\\\":\\\"hello world\\\"}\""
  },
  {
    "name": "json-parse-buffer",
    "demo_src": "(with-current-buffer (url-retrieve-synchronously \"https://api.github.com/status\")<br>  (goto-char url-http-end-of-headers)<br>  (json-parse-buffer :object-type 'alist))<br>",
    "demo_result": "((message . \"GitHub lives! (2018-11-08 07:59:55 -0800) (1)\"))"
  },
  {
    "name": "json-parse-string",
    "demo_src": "(json-parse-string \"{\\\"name\\\": \\\"Jessica\\\"}\"<br>                   :object-type 'plist)<br>",
    "demo_result": "(:name \"Jessica\")"
  },
  {
    "name": "json-pretty-print",
    "demo_src": "(with-temp-buffer<br>  (insert \" {  \\\"foo\\\" : 12, \\n\\n\\n \\\"bar\\\":    34}\")<br>  (json-pretty-print (point-min) (point-max))<br>  (buffer-string))<br>",
    "demo_result": "{<br>  \"foo\": 12,<br>  \"bar\": 34<br>}<br>"
  },
  {
    "name": "json-pretty-print-ordered",
    "demo_src": "(with-temp-buffer<br>  (insert (json-encode '((c . 3)<br>                         (a . 1)<br>                         (b . 2))))<br>  (json-pretty-print-ordered (point-min) (point-max))<br>  (goto-char (point-min))<br>  (json-read))<br>",
    "demo_result": "((a . 1)<br> (b . 2)<br> (c . 3))"
  },
  {
    "name": "json-read",
    "demo_src": "(with-current-buffer (url-retrieve-synchronously \"https://api.github.com/status\")<br>  (goto-char url-http-end-of-headers)<br>  (json-read))<br>",
    "demo_result": "((message . \"GitHub lives! (2018-11-08 07:42:52 -0800) (1)\"))"
  },
  {
    "name": "json-read-file",
    "demo_src": "(write-region \"{\\\"name\\\": \\\"Jessica\\\"}\" nil \"/tmp/tmp.json\")<br>(json-read-file \"/tmp/tmp.json\")<br>",
    "demo_result": "((name . \"Jessica\"))"
  },
  {
    "name": "json-read-from-string",
    "demo_src": "(json-read-from-string \"{\\\"name\\\": \\\"Tom\\\", \\\"age\\\": 13}\")<br>",
    "demo_result": "((name . \"Tom\")<br> (age . 13))"
  },
  {
    "name": "json-serialize",
    "demo_src": "(json-serialize '(:id 42 :message \"hello world\"))<br>",
    "demo_result": "\"{\\\"id\\\":42,\\\"message\\\":\\\"hello world\\\"}\""
  },
  {
    "name": "jsonrpc-process-connection",
    "demo_src": "(make-network-process<br> :name \"JSONRPC server\"<br> :server t<br> :host \"localhost\"<br> :service 44444<br> :log<br> (lambda (_server client _message)<br>   (jsonrpc-process-connection<br>    :name (process-name client)<br>    :process client<br>    :request-dispatcher<br>    (lambda (_endpoint method params)<br>      (unless (memq method '(+ - * /))<br>        (signal 'jsonrpc-error<br>                '((jsonrpc-error-message . \"Sorry, this isn't allowed\")<br>                  (jsonrpc-error-code . -32601))))<br>      (apply method (append params nil))))))<br><br>(jsonrpc-process-connection<br> :name \"JSONRPC client\"<br> :process (make-network-process<br>           :name \"JSONRPC client process\"<br>           :host \"localhost\"<br>           :service 44444))<br><br>(jsonrpc-request<br> (process-get<br>  (get-process \"JSONRPC client process\")<br>  'jsonrpc-connection)<br> '* [3 4])<br>",
    "demo_result": "12"
  },
  {
    "name": "kbd",
    "demo_src": "(kbd \"C-x C-f\")<br>",
    "demo_result": "\"\u0018\u0006\""
  },
  {
    "name": "key-binding",
    "demo_src": "(key-binding (kbd \"C-x C-s\"))<br>",
    "demo_result": "save-buffer"
  },
  {
    "name": "keymap-parent",
    "demo_src": "(let ((map (make-sparse-keymap)))<br>  (set-keymap-parent map text-mode-map)<br>  (eq text-mode-map (keymap-parent map)))<br>",
    "demo_result": "t"
  },
  {
    "name": "keymapp",
    "demo_src": "(keymapp (current-global-map))<br>",
    "demo_result": "t"
  },
  {
    "name": "keywordp",
    "demo_src": "(keywordp :foo)<br>",
    "demo_result": "t"
  },
  {
    "name": "kill-buffer",
    "demo_src": "(kill-buffer (generate-new-buffer \"*test*\"))<br>",
    "demo_result": "t"
  },
  {
    "name": "kill-emacs",
    "demo_src": "(kill-emacs 0)<br>",
    "demo_result": ""
  },
  {
    "name": "kill-new",
    "demo_src": "(kill-new \"This message will be copied\")<br>",
    "demo_result": "\"This message will be copied\""
  },
  {
    "name": "lambda",
    "demo_src": "(lambda (x) (+ x 100))<br>",
    "demo_result": "(lambda<br>  (x)<br>  (+ x 100))"
  },
  {
    "name": "last",
    "demo_src": "(last '(1 2 3))<br>",
    "demo_result": "(3)"
  },
  {
    "name": "last-buffer",
    "demo_src": "(last-buffer)<br>",
    "demo_result": "#<buffer magit: elisp-demos>"
  },
  {
    "name": "lax-plist-get",
    "demo_src": "(lax-plist-get '(\"foo\" 1 \"bar\" 2) \"bar\")<br>",
    "demo_result": "2"
  },
  {
    "name": "lax-plist-put",
    "demo_src": "(let ((plist (list \"a\" 1 \"b\" 2)))<br>  (setq plist (lax-plist-put plist \"b\" 200)))<br>",
    "demo_result": "(\"a\" 1 \"b\" 200)"
  },
  {
    "name": "ldexp",
    "demo_src": "(ldexp 0.5 4)<br>",
    "demo_result": "8.0"
  },
  {
    "name": "length",
    "demo_src": "(length '(1 2 3))<br>",
    "demo_result": "3"
  },
  {
    "name": "let",
    "demo_src": "(let ((x 42))<br>  x)<br>",
    "demo_result": "42"
  },
  {
    "name": "let*",
    "demo_src": "(let* ((x 1)<br>       (y (+ x 100)))<br>  y)<br>",
    "demo_result": "101"
  },
  {
    "name": "let-alist",
    "demo_src": "(let-alist '((id . 1234)<br>             (payload<br>              (url . \"https://example.com\")<br>              (title . \"Example Domain\")<br>              (content . \"This domain is...\")))<br>  (list :id .id<br>        :url .payload.url))<br>",
    "demo_result": "(:id 1234 :url \"https://example.com\")"
  },
  {
    "name": "letrec",
    "demo_src": "(letrec ((len (lambda (list)<br>                (if list<br>                    (1+ (funcall len (cdr list)))<br>                  0))))<br>  (funcall len '(a b c)))<br>",
    "demo_result": "3"
  },
  {
    "name": "libxml-available-p",
    "demo_src": "(libxml-available-p)<br>",
    "demo_result": "t"
  },
  {
    "name": "libxml-parse-html-region",
    "demo_src": "(with-temp-buffer<br>  (insert \"<html><body><h1>Heading 1</h1><p>...</p></body></html>\")<br>  (libxml-parse-html-region (point-min) (point-max)))<br>",
    "demo_result": "(html nil<br>      (body nil<br>            (h1 nil \"Heading 1\")<br>            (p nil \"...\")))"
  },
  {
    "name": "libxml-parse-xml-region",
    "demo_src": "(with-temp-buffer<br>  (insert \"<note><br>  <to>Tove</to><br>  <from>Jani</from><br>  <heading>Reminder</heading><br>  <body>Don't forget me this weekend!</body></note>\")<br>  (libxml-parse-xml-region (point-min) (point-max)))<br>",
    "demo_result": "(note nil<br>      (to nil \"Tove\")<br>      (from nil \"Jani\")<br>      (heading nil \"Reminder\")<br>      (body nil \"Don't forget me this weekend!\"))"
  },
  {
    "name": "line-beginning-position",
    "demo_src": "(line-beginning-position)<br>",
    "demo_result": "25771"
  },
  {
    "name": "line-end-position",
    "demo_src": "(line-end-position)<br>",
    "demo_result": "25980"
  },
  {
    "name": "line-number-at-pos",
    "demo_src": "(with-temp-buffer<br>  (insert \"foo\\n\"<br>          \"bar\\n\"<br>          \"baz\\n\")<br>  (line-number-at-pos))<br>",
    "demo_result": "4"
  },
  {
    "name": "list",
    "demo_src": "(list 1 2 3)<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "list-system-processes",
    "demo_src": "(list-system-processes)<br>",
    "demo_result": ""
  },
  {
    "name": "listp",
    "demo_src": ";; normal list<br>(listp '(1 2 3))<br>",
    "demo_result": "t"
  },
  {
    "name": "lm-authors",
    "demo_src": "(lm-authors (find-library-name \"magit\"))<br>",
    "demo_result": "((\"Marius Vollmer\" . \"marius.vollmer@gmail.com\"))"
  },
  {
    "name": "lm-header",
    "demo_src": "(lm-with-file (find-library-name \"elisp-demos\")<br>  (lm-header \"package-requires\"))<br>",
    "demo_result": "\"((emacs \\\"24.4\\\"))\""
  },
  {
    "name": "lm-homepage",
    "demo_src": "(lm-homepage (find-library-name \"magit\"))<br>",
    "demo_result": "\"https://github.com/magit/magit\""
  },
  {
    "name": "lm-maintainer",
    "demo_src": "(lm-maintainer (find-library-name \"magit\"))<br>",
    "demo_result": "(\"Jonas Bernoulli\" . \"jonas@bernoul.li\")"
  },
  {
    "name": "lm-summary",
    "demo_src": "(lm-summary (find-library-name \"cl-lib\"))<br>",
    "demo_result": "\"Common Lisp extensions for Emacs\""
  },
  {
    "name": "load-average",
    "demo_src": "(load-average)<br>",
    "demo_result": "(108 117 122)"
  },
  {
    "name": "locale-info",
    "demo_src": "(locale-info 'days)<br>",
    "demo_result": "[\"Sunday\" \"Monday\" \"Tuesday\" \"Wednesday\" \"Thursday\" \"Friday\" \"Saturday\"]"
  },
  {
    "name": "locale-translate",
    "demo_src": "(locale-translate \"slovene\")<br>",
    "demo_result": "\"sl_SI.ISO-8859-2\""
  },
  {
    "name": "locate-dominating-file",
    "demo_src": "(locate-dominating-file \".\" \".git\")<br>",
    "demo_result": "\"~/src/elisp-demos/\""
  },
  {
    "name": "locate-file",
    "demo_src": "(locate-file \"init.el\" '(\"~/.emacs.d/\"))<br>",
    "demo_result": "\"/Users/xcy/.emacs.d/init.el\""
  },
  {
    "name": "locate-library",
    "demo_src": "(locate-library \"pcase\")<br>",
    "demo_result": "\"/Users/xcy/src/emacs-mac/lisp/emacs-lisp/pcase.elc\""
  },
  {
    "name": "locate-user-emacs-file",
    "demo_src": "(locate-user-emacs-file \"custom.el\")<br>",
    "demo_result": "\"~/.emacs.d/custom.el\""
  },
  {
    "name": "log",
    "demo_src": "(log 8 2)<br>",
    "demo_result": "3.0"
  },
  {
    "name": "logand",
    "demo_src": "(logand #B1110<br>        #B1101)<br>",
    "demo_result": "12"
  },
  {
    "name": "logb",
    "demo_src": "(logb 8)<br>",
    "demo_result": "3"
  },
  {
    "name": "logcount",
    "demo_src": "(logcount #B101011)<br>",
    "demo_result": "4"
  },
  {
    "name": "logior",
    "demo_src": "(logior #B1100<br>        #B0101)<br>",
    "demo_result": "13"
  },
  {
    "name": "lognot",
    "demo_src": "(lognot #B101)<br>",
    "demo_result": "-6"
  },
  {
    "name": "logxor",
    "demo_src": "(logxor #B1100<br>        #B0101)<br>",
    "demo_result": "9"
  },
  {
    "name": "looking-at",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello\\n\")<br>  (goto-char (point-min))<br>  (looking-at \"^hello$\"))<br>",
    "demo_result": "t"
  },
  {
    "name": "looking-at-p",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello\\n\")<br>  (goto-char (point-min))<br>  (looking-at-p \"^hello$\"))<br>",
    "demo_result": "t"
  },
  {
    "name": "looking-back",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello\")<br>  (looking-back \"^hello$\" (line-beginning-position)))<br>",
    "demo_result": "t"
  },
  {
    "name": "lookup-key",
    "demo_src": "(lookup-key (current-global-map) (kbd \"C-x C-c\"))<br>",
    "demo_result": "save-buffers-kill-terminal"
  },
  {
    "name": "lsh",
    "demo_src": "(lsh #B111 1)<br>",
    "demo_result": "14"
  },
  {
    "name": "macroexpand",
    "demo_src": "(macroexpand '(when t 0 42))<br>",
    "demo_result": "(if t<br>    (progn 0 42))"
  },
  {
    "name": "macroexpand-all",
    "demo_src": "(macroexpand-all<br> '(when-let ((buffer (get-buffer \"*Help*\")))<br>    (setf (point) 1)))<br>",
    "demo_result": "(let*<br>    ((buffer<br>      (and t<br>           (get-buffer \"*Help*\"))))<br>  (if buffer<br>      (goto-char 1)<br>    nil))"
  },
  {
    "name": "macrop",
    "demo_src": "(macrop 'when)<br>",
    "demo_result": "t"
  },
  {
    "name": "make-bool-vector",
    "demo_src": "(vconcat (make-bool-vector 5 t))<br>",
    "demo_result": "[t t t t t]"
  },
  {
    "name": "make-char-table",
    "demo_src": ";; Make a new empty syntax table<br>(syntax-table-p<br> (make-char-table 'syntax-table nil))<br>",
    "demo_result": "t"
  },
  {
    "name": "make-comint",
    "demo_src": "(make-comint \"Janet\" \"janet\" nil \"-s\")<br>",
    "demo_result": "#<buffer *Janet*>"
  },
  {
    "name": "make-comint-in-buffer",
    "demo_src": "(make-comint-in-buffer \"Janet\" \"*Janet*\" \"janet\" nil \"-s\")<br>",
    "demo_result": "#<buffer *Janet*>"
  },
  {
    "name": "make-directory",
    "demo_src": ";; mkdir -p<br>(make-directory \"/tmp/elisp-demos/create/a/new/dir\" 'parents)<br>",
    "demo_result": "nil"
  },
  {
    "name": "make-hash-table",
    "demo_src": "(make-hash-table)<br>",
    "demo_result": "#s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data<br>())"
  },
  {
    "name": "make-instance",
    "demo_src": "(defclass my-book ()<br>  ((title :initarg :title :type string)<br>   (pages :initarg :pages :type integer))<br>  \"A book class.\")<br><br>;; These two are the same, and the `my-book' function uses `make-instance' under<br>;; the ground<br>(list (make-instance 'my-book :title \"Practical Vim\" :pages 487)<br>      (my-book                :title \"Practical Vim\" :pages 487))<br>",
    "demo_result": "(#s(my-book \"Practical Vim\" 487)<br> #s(my-book \"Practical Vim\" 487))"
  },
  {
    "name": "make-keymap",
    "demo_src": "(make-keymap)<br>",
    "demo_result": ""
  },
  {
    "name": "make-list",
    "demo_src": "(make-list 3 'pigs)<br>",
    "demo_result": "(pigs pigs pigs)"
  },
  {
    "name": "make-nearby-temp-file",
    "demo_src": "(let ((default-directory \"/ssh:root@192.168.8.1:\"))<br>  (make-nearby-temp-file \"foo-\"))<br>",
    "demo_result": "\"/ssh:root@192.168.8.1:/tmp/foo-Mf9ZSa\""
  },
  {
    "name": "make-network-process",
    "demo_src": ";; HTTP client<br>(let ((proc (make-network-process :name \"example\"<br>                                  :buffer \"*example.com*\"<br>                                  :host \"example.com\"<br>                                  :service 80)))<br>  (process-send-string proc (concat \"HEAD / HTTP/1.1\\n\"<br>                                    \"Host: example.com\\n\"<br>                                    \"\\n\"))<br>  (accept-process-output proc)<br>  (with-current-buffer (process-buffer proc)<br>    (buffer-string)))<br>",
    "demo_result": "HTTP/1.1 200 OK\r<br>Accept-Ranges: bytes\r<br>Cache-Control: max-age=604800\r<br>Content-Type: text/html; charset=UTF-8\r<br>Date: Sat, 23 Nov 2019 07:46:49 GMT\r<br>Etag: \"3147526947\"\r<br>Expires: Sat, 30 Nov 2019 07:46:49 GMT\r<br>Last-Modified: Thu, 17 Oct 2019 07:18:26 GMT\r<br>Server: ECS (oxr/8313)\r<br>X-Cache: HIT\r<br>Content-Length: 1256\r<br>\r<br>"
  },
  {
    "name": "make-obsolete-variable",
    "demo_src": "(make-obsolete-variable 'display-buffer-function<br>                        'display-buffer-alist \"24.3\")<br>",
    "demo_result": ""
  },
  {
    "name": "make-overlay",
    "demo_src": "(with-temp-buffer (make-overlay 1 1))<br>",
    "demo_result": "#<overlay in no buffer>"
  },
  {
    "name": "make-progress-reporter",
    "demo_src": "(let ((progress-reporter<br>       (make-progress-reporter \"Collecting mana for Emacs...\"<br>                               0  500)))<br>  (dotimes (k 500)<br>    (sit-for 0.01)<br>    (progress-reporter-update progress-reporter k))<br>  (progress-reporter-done progress-reporter))<br>",
    "demo_result": "\"Collecting mana for Emacs...done\""
  },
  {
    "name": "make-record",
    "demo_src": "(make-record 'foo 9 'Z)<br>",
    "demo_result": "#s(foo Z Z Z Z Z Z Z Z Z)"
  },
  {
    "name": "make-ring",
    "demo_src": "(make-ring 3)<br>",
    "demo_result": "(0 0 .<br>   [nil nil nil])"
  },
  {
    "name": "make-sparse-keymap",
    "demo_src": "(let ((map (make-sparse-keymap)))<br>  (define-key map \"n\" #'next-line)<br>  (define-key map \"p\" #'previous-line)<br>  map)<br>",
    "demo_result": "(keymap<br> (112 . previous-line)<br> (110 . next-line))"
  },
  {
    "name": "make-string",
    "demo_src": "(make-string 5 ?x)<br>",
    "demo_result": "\"xxxxx\""
  },
  {
    "name": "make-symbol",
    "demo_src": "(make-symbol \"foo\")<br>",
    "demo_result": "foo"
  },
  {
    "name": "make-syntax-table",
    "demo_src": ";; Create a new syntax table base on Emacs Lisp's<br>(syntax-table-p<br> (make-syntax-table emacs-lisp-mode-syntax-table))<br>",
    "demo_result": "t"
  },
  {
    "name": "make-temp-file",
    "demo_src": "(make-temp-file \"elisp-demos-\")<br>",
    "demo_result": "\"/var/folders/7f/s191h4q97p90374yw15ssrs00000gn/T/elisp-demos-iOSgE2\""
  },
  {
    "name": "make-temp-name",
    "demo_src": "(make-temp-name \"elisp-demos-\")<br>",
    "demo_result": "\"elisp-demos-hF3633\""
  },
  {
    "name": "make-thread",
    "demo_src": "(make-thread<br> (lambda ()<br>   (while t<br>     (forward-char 1)<br>     (sit-for 0.1))))<br>",
    "demo_result": "#<thread 0x178fd5a30>"
  },
  {
    "name": "make-vector",
    "demo_src": "(make-vector 3 'Z)<br>",
    "demo_result": "[Z Z Z]"
  },
  {
    "name": "map-apply",
    "demo_src": "(map-apply (lambda (idx elt)<br>             (list idx elt))<br>           [a b c])<br>",
    "demo_result": "((0 a)<br> (1 b)<br> (2 c))"
  },
  {
    "name": "map-char-table",
    "demo_src": "(let (result)<br>  (map-char-table<br>   (lambda (range value)<br>     ;; copy `range', see https://github.com/Wilfred/helpful/issues/210<br>     (push (list (format \"%S\" range) value) result))<br>   printable-chars)<br>  result)<br>",
    "demo_result": "((\"(160 . 4194175)\" t)<br> (\"(32 . 126)\" t))"
  },
  {
    "name": "map-charset-chars",
    "demo_src": "(let ((count 0))<br>  (map-charset-chars<br>   (lambda (range _arg)<br>     (pcase-let ((`(,from . ,to) range))<br>       (setq count (+ count (- to from)))))<br>   'chinese-gbk)<br>  count)<br>",
    "demo_result": "45718"
  },
  {
    "name": "map-contains-key",
    "demo_src": "(map-contains-key '((x . 1) (y . 2)) 'y)<br>",
    "demo_result": "t"
  },
  {
    "name": "map-copy",
    "demo_src": "(map-copy [a b c])<br>",
    "demo_result": "[a b c]"
  },
  {
    "name": "map-delete",
    "demo_src": "(let ((alist (list (cons 'x 1)<br>                   (cons 'y 2)<br>                   (cons 'z 3))))<br>  ;; `setq' is necessary otherwise `alist' is unchanged in this case<br>  (setq alist (map-delete alist 'x))<br>  alist)<br>",
    "demo_result": "((y . 2)<br> (z . 3))"
  },
  {
    "name": "map-do",
    "demo_src": "(let (result)<br>  (map-do (lambda (k v) (push (* k v) result))<br>          '((1 . 2)<br>            (3 . 4)<br>            (5 . 6)))<br>  (nreverse result))<br>",
    "demo_result": "(2 12 30)"
  },
  {
    "name": "map-elt",
    "demo_src": "(map-elt '((x . 1) (y . 2)) 'y)<br>",
    "demo_result": "2"
  },
  {
    "name": "map-empty-p",
    "demo_src": "(map-empty-p '())<br>",
    "demo_result": "t"
  },
  {
    "name": "map-every-p",
    "demo_src": "(map-every-p (lambda (key val)<br>               (= (* key key) val))<br>             '((1 . 1)<br>               (2 . 4)<br>               (3 . 9)<br>               (4 . 16)))<br>",
    "demo_result": "t"
  },
  {
    "name": "map-filter",
    "demo_src": "(map-filter (lambda (index _item) (cl-evenp index))<br>            [a b c d])<br>",
    "demo_result": "((0 . a)<br> (2 . c))"
  },
  {
    "name": "map-insert",
    "demo_src": "(map-insert '((x . 1) (y . 2)) 'z 3)<br>",
    "demo_result": "((z . 3)<br> (x . 1)<br> (y . 2))"
  },
  {
    "name": "map-into",
    "demo_src": "(map-into #s(hash-table data (x 1 y 2)) 'list)<br>",
    "demo_result": "((x . 1)<br> (y . 2))"
  },
  {
    "name": "map-keymap",
    "demo_src": "(let (result)<br>  (map-keymap<br>   (lambda (event function)<br>     (push (cons event function) result))<br>   (let ((keymap (make-sparse-keymap)))<br>     (define-key keymap \"n\" #'next-line)<br>     (define-key keymap \"p\" #'previous-line)<br>     keymap))<br>  result)<br>",
    "demo_result": "((110 . next-line)<br> (112 . previous-line))"
  },
  {
    "name": "map-keys",
    "demo_src": "(map-keys '((a . 1) (b . ((c . 2)))))<br>",
    "demo_result": "(a b)"
  },
  {
    "name": "map-keys-apply",
    "demo_src": "(map-keys-apply #'identity '((a) (b) (c)))<br>",
    "demo_result": "(a b c)"
  },
  {
    "name": "map-length",
    "demo_src": "(map-length [a b c])<br>",
    "demo_result": "3"
  },
  {
    "name": "map-let",
    "demo_src": "(map-let (one three) '((one . 1)<br>                       (two . 2)<br>                       (three . 3))<br>  (list :one one<br>        :three three))<br>",
    "demo_result": "(:one 1 :three 3)"
  },
  {
    "name": "map-merge",
    "demo_src": "(map-merge 'list #s(hash-table data (x 1 y 2)) '((z . 3)))<br>",
    "demo_result": "((z . 3)<br> (x . 1)<br> (y . 2))"
  },
  {
    "name": "map-merge-with",
    "demo_src": "(map-merge-with 'list<br>                (lambda (v1 v2) (list v1 v2))<br>                #s(hash-table data (x 1 y 2))<br>                '((x . 3)<br>                  (y . 4)<br>                  (z . 5)))<br>",
    "demo_result": "((z . 5)<br> (x 1 3)<br> (y 2 4))"
  },
  {
    "name": "map-nested-elt",
    "demo_src": "(map-nested-elt '((post . ((title . \"some title\"))))<br>                '(post title))<br>",
    "demo_result": "\"some title\""
  },
  {
    "name": "map-pairs",
    "demo_src": "(map-pairs [1 2 3])<br>",
    "demo_result": "((0 . 1)<br> (1 . 2)<br> (2 . 3))"
  },
  {
    "name": "map-put",
    "demo_src": "(let ((alist (list (cons 0 3)<br>                   (cons 1 4)<br>                   (cons 2 5))))<br>  (map-put alist 0 300)<br>  alist)<br>",
    "demo_result": "((0 . 300)<br> (1 . 4)<br> (2 . 5))"
  },
  {
    "name": "map-remove",
    "demo_src": "(map-remove (lambda (index item) (cl-evenp index))<br>            [a b c d])<br>",
    "demo_result": "((1 . b)<br> (3 . d))"
  },
  {
    "name": "map-some",
    "demo_src": "(map-some (lambda (k v)<br>            (= k v))<br>          '((1 . 2)<br>            (3 . 4)<br>            (5 . 5)))<br>",
    "demo_result": "t"
  },
  {
    "name": "map-values",
    "demo_src": "(map-values '((a . 1) (b . 2)))<br>",
    "demo_result": "(1 2)"
  },
  {
    "name": "map-values-apply",
    "demo_src": "(map-values-apply #'identity [a b c])<br>",
    "demo_result": "(a b c)"
  },
  {
    "name": "mapatoms",
    "demo_src": "(let (commands)<br>  (mapatoms<br>   (lambda (symbol)<br>     (when (commandp symbol)<br>       (push symbol commands))))<br>  (message \"There are %d Emacs commands\" (length commands)))<br>",
    "demo_result": "\"There are 7101 Emacs commands\""
  },
  {
    "name": "mapc",
    "demo_src": "(mapc #'princ '(1 2 3))<br>",
    "demo_result": "\"123\""
  },
  {
    "name": "mapcan",
    "demo_src": "(mapcan<br> (lambda (pair)<br>   (list (car pair) (cdr pair)))<br> '((x . 1) (y . 2) (z . 3)))<br>",
    "demo_result": "(x 1 y 2 z 3)"
  },
  {
    "name": "mapcar",
    "demo_src": "(mapcar #'1+ '(1 2 3))<br>",
    "demo_result": "(2 3 4)"
  },
  {
    "name": "mapconcat",
    "demo_src": "(mapconcat #'identity '(\"abc\" \"def\" \"ghi\") \", \")<br>",
    "demo_result": "\"abc, def, ghi\""
  },
  {
    "name": "maphash",
    "demo_src": "(let (alist)<br>  (maphash (lambda (key val)<br>             (push (cons key val) alist))<br>           #s(hash-table data (x 1 y 2)))<br>  (nreverse alist))<br>",
    "demo_result": "((x . 1)<br> (y . 2))"
  },
  {
    "name": "mapp",
    "demo_src": "(mapp '((a 1) (b 2)))<br>",
    "demo_result": "t"
  },
  {
    "name": "match-data",
    "demo_src": "(when (string-match \"[0-9]+\" \"<2018-11-30>\")<br>  (match-data))<br>",
    "demo_result": "(1 5)"
  },
  {
    "name": "match-string",
    "demo_src": "(let ((string \"Today is <2018-11-09>\")<br>      (regexp (rx (group (= 4 num)) \"-\"<br>                  (group (= 2 num)) \"-\"<br>                  (group (= 2 num)))))<br>  (when (string-match regexp string)<br>    (list :year (match-string 1 string)<br>          :month (match-string 2 string)<br>          :day (match-string 3 string))))<br>",
    "demo_result": "(:year \"2018\" :month \"11\" :day \"09\")"
  },
  {
    "name": "match-string-no-properties",
    "demo_src": "(let ((string (propertize \"hello\" 'face 'bold)))<br>  (string-match \".*\" string)<br>  (list (match-string 0 string)<br>        (match-string-no-properties 0 string)))<br>",
    "demo_result": "(#(\"hello\" 0 5<br>   (face bold))<br> \"hello\")"
  },
  {
    "name": "max",
    "demo_src": "(max 1 3 2.5)<br>",
    "demo_result": "3"
  },
  {
    "name": "max-char",
    "demo_src": "(max-char)<br>",
    "demo_result": "4194303"
  },
  {
    "name": "md5",
    "demo_src": "(md5 \"hello\")<br>",
    "demo_result": "\"5d41402abc4b2a76b9719d911017c592\""
  },
  {
    "name": "member",
    "demo_src": "(member '(2) '((1) (2)))<br>",
    "demo_result": "((2))"
  },
  {
    "name": "member-ignore-case",
    "demo_src": "(member-ignore-case \"foo\" '(\"bar\" \"Foo\"))<br>",
    "demo_result": "(\"Foo\")"
  },
  {
    "name": "memq",
    "demo_src": "(memq 'b '(a b c b a))<br>",
    "demo_result": "(b c b a)"
  },
  {
    "name": "memql",
    "demo_src": "(memql 1.2 '(1.1 1.2 1.3))<br>",
    "demo_result": "(1.2 1.3)"
  },
  {
    "name": "merge-face-attribute",
    "demo_src": "(merge-face-attribute :height 2.0 3.0)<br>",
    "demo_result": "6.0"
  },
  {
    "name": "message",
    "demo_src": "(message \"Hi, %s!\" \"Tyke\")<br>",
    "demo_result": "\"Hi, Tyke!\""
  },
  {
    "name": "min",
    "demo_src": "(min -4 1)<br>",
    "demo_result": "-4"
  },
  {
    "name": "minibuffer-window",
    "demo_src": "(minibuffer-window)<br>",
    "demo_result": "#<window 4 on  *Minibuf-0*>"
  },
  {
    "name": "minibuffer-with-setup-hook",
    "demo_src": "(minibuffer-with-setup-hook<br>    (lambda () (insert \"hello world\"))<br>  (read-string \"Enter something: \"))<br>",
    "demo_result": "\"hello world\""
  },
  {
    "name": "minibufferp",
    "demo_src": "(minibufferp)<br>",
    "demo_result": "nil"
  },
  {
    "name": "mm-default-file-encoding",
    "demo_src": "(mm-default-file-encoding \"index.html\")<br>",
    "demo_result": "\"text/html\""
  },
  {
    "name": "mm-url-encode-multipart-form-data",
    "demo_src": "(mm-url-encode-multipart-form-data<br> '((\"username\" . \"john\")<br>   (\"password\" . \"secret\")))<br>",
    "demo_result": ""
  },
  {
    "name": "mod",
    "demo_src": "(mod 5.5 2.5)<br>",
    "demo_result": "0.5"
  },
  {
    "name": "modify-syntax-entry",
    "demo_src": "(with-temp-buffer<br>  (insert \"BEG (a) <b> [c] {d} END\")<br>  (goto-char (point-min))<br>  (set-syntax-table<br>   (let ((table (make-char-table 'syntax-table)))<br>     ;; <> and {} are parenthesis, others aren't<br>     (modify-syntax-entry ?\\< \"(>\" table)<br>     (modify-syntax-entry ?\\> \")<\" table)<br>     (modify-syntax-entry ?\\{ \"(}\" table)<br>     (modify-syntax-entry ?\\} \"){\" table)<br>     table))<br>  (goto-char (scan-lists (point) 1 0))<br>  (insert \"|\")<br>  (goto-char (scan-lists (point) 1 0))<br>  (insert \"|\")<br>  (buffer-string))<br>",
    "demo_result": "\"BEG (a) <b>| [c] {d}| END\""
  },
  {
    "name": "move-overlay",
    "demo_src": "(with-temp-buffer<br>  (let ((ov (make-overlay 1 1)))<br>    (insert \"hello\")<br>    (format \"%S\" (move-overlay ov 1 6))))<br>",
    "demo_result": "\"#<overlay from 1 to 6 in  *temp*>\""
  },
  {
    "name": "multibyte-char-to-unibyte",
    "demo_src": "(multibyte-char-to-unibyte #x3FFF80)<br>",
    "demo_result": "128"
  },
  {
    "name": "multibyte-string-p",
    "demo_src": "(list (multibyte-string-p \"lambda\")<br>      (multibyte-string-p \"λ\"))<br>",
    "demo_result": "(nil t)"
  },
  {
    "name": "narrow-to-region",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello world\")<br>  (narrow-to-region 1 6)<br>  (buffer-string))<br>",
    "demo_result": "\"hello\""
  },
  {
    "name": "natnump",
    "demo_src": "(natnump 0)<br>",
    "demo_result": "t"
  },
  {
    "name": "nbutlast",
    "demo_src": "(let ((list (list 1 2 3 4 5)))<br>  (nbutlast list 2)<br>  list)<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "nconc",
    "demo_src": "(let ((x (list 1 2))<br>      (y '(3 4)))<br>  (nconc x y)<br>  x)<br>",
    "demo_result": "(1 2 3 4)"
  },
  {
    "name": "netrc-credentials",
    "demo_src": "(netrc-credentials \"api.github.com\")<br>",
    "demo_result": ""
  },
  {
    "name": "netrc-parse",
    "demo_src": "(netrc-parse)<br>",
    "demo_result": ""
  },
  {
    "name": "network-interface-info",
    "demo_src": "(network-interface-info \"en0\")<br>",
    "demo_result": "([192 168 0 102 0]<br> [192 168 0 255 0]<br> [255 255 255 0 0]<br> (18 .<br>     [72 215 5 181 112 87])<br> (simplex multicast notrailers running broadcast up))"
  },
  {
    "name": "network-interface-list",
    "demo_src": "(network-interface-list)<br>",
    "demo_result": "((\"en0\" .<br>  [192 168 0 102 0])<br> (\"lo0\" .<br>  [127 0 0 1 0]))"
  },
  {
    "name": "network-lookup-address-info",
    "demo_src": "(network-lookup-address-info \"example.com\")<br>",
    "demo_result": "([93 184 216 34 0])"
  },
  {
    "name": "next-frame",
    "demo_src": "(next-frame)<br>",
    "demo_result": "#<frame /Users/xcy/src/elisp-demos/elisp-demos.org 0x1049a21e8>"
  },
  {
    "name": "next-overlay-change",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello\")<br>  (make-overlay 4 5)<br>  (make-overlay 2 3)<br>  (next-overlay-change 1))<br>",
    "demo_result": "2"
  },
  {
    "name": "next-property-change",
    "demo_src": "(next-property-change 0 \"hello\")<br>",
    "demo_result": "nil"
  },
  {
    "name": "ngettext",
    "demo_src": "(ngettext \"mouse\" \"mice\" 3)<br>",
    "demo_result": "\"mice\""
  },
  {
    "name": "nlistp",
    "demo_src": "(nlistp [])<br>",
    "demo_result": "t"
  },
  {
    "name": "not",
    "demo_src": "(list (not (> 1 2))<br>      (not (< 1 2)))<br>",
    "demo_result": "(t nil)"
  },
  {
    "name": "nreverse",
    "demo_src": "(let ((x (list 1 2 3 4)))<br>  (setq x (nreverse x))<br>  x)<br>",
    "demo_result": "(4 3 2 1)"
  },
  {
    "name": "nth",
    "demo_src": "(nth 2 '(1 2 3 4))<br>",
    "demo_result": "3"
  },
  {
    "name": "nthcdr",
    "demo_src": "(nthcdr 2 '(1 2 3 4))<br>",
    "demo_result": "(3 4)"
  },
  {
    "name": "null",
    "demo_src": "(null '(1 2 3))<br>",
    "demo_result": "nil"
  },
  {
    "name": "number-sequence",
    "demo_src": "(number-sequence 1 10)<br>",
    "demo_result": "(1 2 3 4 5 6 7 8 9 10)"
  },
  {
    "name": "number-to-string",
    "demo_src": "(prin1-to-string 256)<br>",
    "demo_result": "\"256\""
  },
  {
    "name": "numberp",
    "demo_src": "(numberp 42)<br>",
    "demo_result": "t"
  },
  {
    "name": "obarray-get",
    "demo_src": "(let ((ob (obarray-make)))<br>  (obarray-put ob \"foo\")<br>  (obarray-get ob \"foo\"))<br>",
    "demo_result": "foo"
  },
  {
    "name": "obarray-make",
    "demo_src": "(obarray-make 5)<br>",
    "demo_result": "[0 0 0 0 0]"
  },
  {
    "name": "obarray-map",
    "demo_src": "(let ((ob (obarray-make)))<br>  (obarray-put ob \"x\")<br>  (obarray-put ob \"y\")<br>  (obarray-put ob \"z\")<br>  (let (syms)<br>    (obarray-map<br>     (lambda (sym)<br>       (push sym syms))<br>     ob)<br>    syms))<br>",
    "demo_result": "(x y z)"
  },
  {
    "name": "obarray-put",
    "demo_src": "(let ((ob (obarray-make)))<br>  (obarray-put ob \"foo\"))<br>",
    "demo_result": "foo"
  },
  {
    "name": "obarray-remove",
    "demo_src": "(let ((ob (obarray-make)))<br>  (obarray-put    ob \"foo\")<br>  (obarray-remove ob \"foo\")<br>  (obarray-get    ob \"foo\"))<br>",
    "demo_result": "nil"
  },
  {
    "name": "obarray-size",
    "demo_src": "(obarray-size (obarray-make 5))<br>",
    "demo_result": "5"
  },
  {
    "name": "obarrayp",
    "demo_src": "(obarrayp (obarray-make 5))<br>",
    "demo_result": "t"
  },
  {
    "name": "open-gnutls-stream",
    "demo_src": "(with-current-buffer (generate-new-buffer \"*tls-buffer*\")<br>  (open-gnutls-stream \"tls\"<br>                      (current-buffer)<br>                      \"example.com\"<br>                      \"https\")<br>  (process-send-string<br>   nil<br>   \"GET / HTTP/1.1\\r\\nHost: example.com\\r\\nConnection: Close\\r\\n\\r\\n\")<br>  (display-buffer (current-buffer)))<br>",
    "demo_result": "#<window 59 on *https://example.com*<8>>"
  },
  {
    "name": "or",
    "demo_src": "(or nil nil 1 2)<br>",
    "demo_result": "1"
  },
  {
    "name": "oref",
    "demo_src": "(defclass my-rabbit ()<br>  ((color :initform \"white\"))<br>  \"A rabbit class.\")<br><br>(oref (my-rabbit) color)<br>",
    "demo_result": "\"white\""
  },
  {
    "name": "oref-default",
    "demo_src": "(defclass my-car ()<br>  ((wheels :type integer<br>           :initform 4<br>           :allocation :class)))<br><br>(oref-default my-car wheels)<br>",
    "demo_result": "4"
  },
  {
    "name": "org-babel-edit-distance",
    "demo_src": "(org-babel-edit-distance \"kitten\" \"sitting\")<br>",
    "demo_result": "3"
  },
  {
    "name": "org-element-map",
    "demo_src": "(with-temp-buffer<br>  (insert \"* TODO Hack org-mode   :org: \\n\"<br>          \"* TODO Hack emacs      :emacs: \\n\"<br>          \"* TODO Cut hair        :life: \\n\")<br>  (org-element-map (org-element-parse-buffer) 'headline<br>    (lambda (hl)<br>      (org-element-property :tags hl))))<br>",
    "demo_result": "((\"org\")<br> (\"emacs\")<br> (\"life\"))"
  },
  {
    "name": "org-element-property",
    "demo_src": "(with-temp-buffer<br>  (insert \"* TODO Hack org-mode :org:\")<br>  (delay-mode-hooks (org-mode))<br>  (org-element-property :title (org-element-at-point)))<br>",
    "demo_result": "\"Hack org-mode\""
  },
  {
    "name": "org-entry-get",
    "demo_src": "(with-temp-buffer<br>  (insert \"* TODO Hack org-mode\")<br>  (delay-mode-hooks (org-mode))<br>  (org-entry-get (point-min) \"ITEM\"))<br>",
    "demo_result": "\"Hack org-mode\""
  },
  {
    "name": "org-entry-properties",
    "demo_src": "(with-temp-buffer<br>  (insert \"* TODO Hack org-mode\")<br>  (delay-mode-hooks (org-mode))<br>  (org-entry-properties (point-min)))<br>",
    "demo_result": "((\"CATEGORY\" . \"???\")<br> (\"BLOCKED\" . \"\")<br> (\"FILE\")<br> (\"PRIORITY\" . \"B\")<br> (\"TODO\" . \"TODO\")<br> (\"ITEM\" . \"Hack org-mode\"))"
  },
  {
    "name": "org-export-number-to-roman",
    "demo_src": "(org-export-number-to-roman 3456)<br>",
    "demo_result": "\"MMMCDLVI\""
  },
  {
    "name": "org-heading-components",
    "demo_src": "(with-temp-buffer<br>  (insert \"* TODO Hack org-mode\")<br>  (delay-mode-hooks (org-mode))<br>  (org-heading-components))<br>",
    "demo_result": "(1 1 \"TODO\" nil \"Hack org-mode\" nil)"
  },
  {
    "name": "org-map-entries",
    "demo_src": "(with-temp-buffer<br>  (insert \"* DONE Shave\\n\"<br>          \"* TODO Shower\\n\"<br>          \"* DONE Breakfast\\n\"<br>          \"* TODO Sleep\\n\")<br>  (delay-mode-hooks (org-mode))<br>  (let (todos)<br>    (org-map-entries<br>     (lambda ()<br>       (push (org-entry-get (point) \"ITEM\") todos))<br>     \"/+TODO\")<br>    (nreverse todos)))<br>",
    "demo_result": "(\"Shower\" \"Sleep\")"
  },
  {
    "name": "oset",
    "demo_src": "(defclass my-fish ()<br>  ((size))<br>  \"A fish class.\")<br><br>(let ((obj (my-fish)))<br>  (oset obj size 10 )<br>  obj)<br>",
    "demo_result": "#s(my-fish 10)"
  },
  {
    "name": "oset-default",
    "demo_src": "(defclass my-car ()<br>  ((wheels :type integer<br>           :initform 4<br>           :allocation :class)))<br><br>(let ((car1 (my-car))<br>      (car2 (my-car)))<br>  (oset-default my-car wheels 2)<br>  (list (oref car1 wheels)<br>        (oref car2 wheels)))<br>",
    "demo_result": "(2 2)"
  },
  {
    "name": "other-buffer",
    "demo_src": "(other-buffer)<br>",
    "demo_result": "#<buffer init.el>"
  },
  {
    "name": "overlay-buffer",
    "demo_src": "(with-temp-buffer<br>  (let ((ov (make-overlay 1 1)))<br>    (format \"%s\" (overlay-buffer ov))))<br>",
    "demo_result": "\" *temp*\""
  },
  {
    "name": "overlay-end",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello\")<br>  (let ((ov (make-overlay 1 6)))<br>    (overlay-end ov)))<br>",
    "demo_result": "6"
  },
  {
    "name": "overlay-get",
    "demo_src": "(with-temp-buffer<br>  (let ((ov (make-overlay 1 1)))<br>    (overlay-put ov 'happy t)<br>    (overlay-get ov 'happy)))<br>",
    "demo_result": "t"
  },
  {
    "name": "overlay-properties",
    "demo_src": "(with-temp-buffer<br>  (let ((ov (make-overlay 1 1)))<br>    (overlay-put ov 'happy t)<br>    (overlay-put ov 'hungry t)<br>    (overlay-properties ov)))<br>",
    "demo_result": "(hungry t happy t)"
  },
  {
    "name": "overlay-put",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello\")<br>  (let ((ov (make-overlay (point-min) (point-max))))<br>    (overlay-put ov 'face 'bold)))<br>",
    "demo_result": "bold"
  },
  {
    "name": "overlay-recenter",
    "demo_src": "(overlay-recenter (point-max))<br>",
    "demo_result": "nil"
  },
  {
    "name": "overlay-start",
    "demo_src": "(with-temp-buffer<br>  (let ((ov (make-overlay 1 1)))<br>    (overlay-start ov)))<br>",
    "demo_result": "1"
  },
  {
    "name": "overlayp",
    "demo_src": "(with-temp-buffer (overlayp (make-overlay 1 1)))<br>",
    "demo_result": "t"
  },
  {
    "name": "overlays-at",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello\")<br>  (make-overlay 1 2)<br>  (make-overlay 1 5)<br>  (format \"%S\" (overlays-at 1)))<br>",
    "demo_result": "\"(#<overlay from 1 to 5 in  *temp*> #<overlay from 1 to 2 in  *temp*>)\""
  },
  {
    "name": "overlays-in",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello\")<br>  ;;       12345<br>  (make-overlay 1 2)<br>  (make-overlay 2 4)<br>  (make-overlay 3 5)<br>  (format \"%S\" (overlays-in 3 4)))<br>",
    "demo_result": "\"(#<overlay from 3 to 5 in  *temp*> #<overlay from 2 to 4 in  *temp*>)\""
  },
  {
    "name": "package-get-version",
    "demo_src": "(with-current-buffer (find-file-noselect (locate-library \"magit.el\"))<br>  (package-get-version))<br>",
    "demo_result": "\"20200828.1757\""
  },
  {
    "name": "parse-colon-path",
    "demo_src": "(parse-colon-path \"/usr/bin:/bin:/usr/sbin:/sbin\")<br>",
    "demo_result": "(\"/usr/bin/\" \"/bin/\" \"/usr/sbin/\" \"/sbin/\")"
  },
  {
    "name": "parse-iso8601-time-string",
    "demo_src": "(parse-iso8601-time-string \"2020-03-25T01:53:53+08:00\")<br>",
    "demo_result": "(24186 18737)"
  },
  {
    "name": "parse-time-string",
    "demo_src": ";; RFC 2822<br>(parse-time-string \"2018-11-15\")<br>",
    "demo_result": "(nil nil nil 15 11 2018 nil nil nil)"
  },
  {
    "name": "pcase",
    "demo_src": "(pcase (read)<br>  ;; 42<br>  (42<br>   (message \"forty-two\"))<br>  ;; other numbers<br>  ((and (pred numberp) n)<br>   (message \"Number: %d\" n))<br>  ;; string<br>  ((and (pred stringp) s)<br>   (message \"String: %S\" s))<br>  ;; 'hello (symbol)<br>  ('hello<br>   (message \"World\"))<br>  ;; default<br>  (x (message \"=> %S\" x)))<br>",
    "demo_result": ";; pred<br>(pcase (random 3)<br>  ((pred zerop)           \"zero\")<br>  ((pred (lambda (n) (= n 1))) \"one\")<br>  ((pred (= 2))           \"two\"))<br>"
  },
  {
    "name": "pcase-defmacro",
    "demo_src": "(pcase-defmacro my-alist (&rest patterns)<br>  (cl-loop for pat in patterns<br>           collect `(app (alist-get ',pat) ,pat) into aux<br>           finally return `(and ,@aux)))<br><br>(pcase '((a . 1) (b . 2) (c . 3) (d . 4))<br>  ((my-alist a b c d) (list a b c d)))<br>",
    "demo_result": "(1 2 3 4)"
  },
  {
    "name": "pcase-dolist",
    "demo_src": "(let (res)<br>  (pcase-dolist (`(,key . ,val) '((one . 1)<br>                                  (two . 2)<br>                                  (three . 3)<br>                                  (four . 4)))<br>    (push (cons val key) res))<br>  (nreverse res))<br>",
    "demo_result": "((1 . one)<br> (2 . two)<br> (3 . three)<br> (4 . four))"
  },
  {
    "name": "pcase-exhaustive",
    "demo_src": "(condition-case nil<br>    (pcase-exhaustive 'bar<br>      ('foo 123))<br>  (error<br>   \"Got no match error\"))<br>",
    "demo_result": "\"Got no match error\""
  },
  {
    "name": "pcase-lambda",
    "demo_src": "(funcall<br> (pcase-lambda (`(,car . ,cdr))<br>   (append cdr (list car)))<br> '(1 2 3 4))<br>",
    "demo_result": "(2 3 4 1)"
  },
  {
    "name": "pcase-let",
    "demo_src": "(pcase-let ((`(,_ ,_ ,uid ,gid)<br>             (file-attributes user-init-file)))<br>  (list uid gid))<br>",
    "demo_result": "(501 20)"
  },
  {
    "name": "pcase-let*",
    "demo_src": "(pcase-let* ((`[,x ,y] [1 2])<br>             (`(,a ,b) (list y x)))<br>  (list a b))<br>",
    "demo_result": "(2 1)"
  },
  {
    "name": "plist-get",
    "demo_src": "(plist-get '(:a 1 :b 2 :c 3) :b)<br>",
    "demo_result": "2"
  },
  {
    "name": "plist-member",
    "demo_src": "(plist-member '(:x nil) :x)<br>",
    "demo_result": "(:x nil)"
  },
  {
    "name": "plist-put",
    "demo_src": "(let ((plist (list :a 1 :b 2)))<br>  (setq plist (plist-put plist :b 200)))<br>",
    "demo_result": "(:a 1 :b 200)"
  },
  {
    "name": "point",
    "demo_src": "(point)<br>",
    "demo_result": "7899"
  },
  {
    "name": "point-max",
    "demo_src": "(point-max)<br>",
    "demo_result": "14180"
  },
  {
    "name": "point-min",
    "demo_src": "(point-min)<br>",
    "demo_result": "1"
  },
  {
    "name": "pop",
    "demo_src": "(let ((l '(1 2 3)))<br>  (pop l)<br>  l)<br>",
    "demo_result": "(2 3)"
  },
  {
    "name": "popup-cascade-menu",
    "demo_src": "(popup-cascade-menu '((\"Foo\" \"Baz\") \"Bar\"))<br>",
    "demo_result": "\"Baz\""
  },
  {
    "name": "popup-make-item",
    "demo_src": "(popup-menu* (list (popup-make-item \"Yes\" :value t)<br>                   (popup-make-item \"No\" :value nil)))<br>",
    "demo_result": "t"
  },
  {
    "name": "popup-menu*",
    "demo_src": "(popup-menu* '(\"Foo\" \"Bar\" \"Baz\"))<br>",
    "demo_result": "\"Foo\""
  },
  {
    "name": "popup-tip",
    "demo_src": "(popup-tip \"This is a tooltip.\")<br>",
    "demo_result": "t"
  },
  {
    "name": "pos-tip-show",
    "demo_src": "(pos-tip-show \"Hello World!\")<br>",
    "demo_result": "(8 . 425)"
  },
  {
    "name": "pos-tip-show-no-propertize",
    "demo_src": "(pos-tip-show-no-propertize \"Hello World!\")<br>",
    "demo_result": "(8 . 578)"
  },
  {
    "name": "position-bytes",
    "demo_src": "(with-temp-buffer<br>  ;; multibyte char is enabled by default, to turn off, use<br>  ;; (set-buffer-multibyte nil)<br>  (insert \"λ\")<br>  (list (point) (position-bytes (point))))<br>",
    "demo_result": "(2 3)"
  },
  {
    "name": "pp",
    "demo_src": "(pp (lambda (a y) (+ x y)))<br>",
    "demo_result": "\"(lambda\\n  (a y)\\n  (+ x y))\\n\""
  },
  {
    "name": "previous-frame",
    "demo_src": "(previous-frame)<br>",
    "demo_result": "#<frame /Users/xcy/src/elisp-demos/elisp-demos.org 0x1049a21e8>"
  },
  {
    "name": "previous-overlay-change",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello\")<br>  (make-overlay 4 5)<br>  (make-overlay 2 3)<br>  (previous-overlay-change 6))<br>",
    "demo_result": "5"
  },
  {
    "name": "prin1",
    "demo_src": "(prin1 \"hello\")<br>",
    "demo_result": "\"\\\"hello\\\"\""
  },
  {
    "name": "prin1-char",
    "demo_src": "(prin1-char 97)<br>",
    "demo_result": "\"?a\""
  },
  {
    "name": "prin1-to-string",
    "demo_src": "(list (prin1-to-string 'symbol)<br>      (prin1-to-string \"string\")<br>      (prin1-to-string 42))<br>",
    "demo_result": "(\"symbol\" \"\\\"string\\\"\" \"42\")"
  },
  {
    "name": "princ",
    "demo_src": "(princ \"hello\")<br>",
    "demo_result": "\"hello\""
  },
  {
    "name": "print",
    "demo_src": "(print \"hello\")<br>",
    "demo_result": "\"\\n\\\"hello\\\"\\n\""
  },
  {
    "name": "process-attributes",
    "demo_src": "(process-attributes 1)<br>",
    "demo_result": "((etime 8 3971 635846 0)<br> (start 23808 53217 185321 0)<br> (nice . 0)<br> (tpgid . 0)<br> (pgrp . 1)<br> (ppid . 0)<br> (state . \"R\")<br> (comm . \"launchd\")<br> (group . \"wheel\")<br> (egid . 0)<br> (user . \"root\")<br> (euid . 0))<br>"
  },
  {
    "name": "process-buffer",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(process-buffer (get-process \"shell\"))<br>",
    "demo_result": "#<buffer *shell*>"
  },
  {
    "name": "process-coding-system",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(process-coding-system (get-process \"shell\"))<br>",
    "demo_result": "(utf-8-unix . utf-8-unix)"
  },
  {
    "name": "process-command",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(process-command (get-process \"shell\"))<br>",
    "demo_result": "(\"/bin/zsh\" \"-i\")"
  },
  {
    "name": "process-contact",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(process-contact (get-process \"shell\"))<br>",
    "demo_result": "t"
  },
  {
    "name": "process-exit-status",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(process-exit-status (get-process \"shell\"))<br>",
    "demo_result": "0"
  },
  {
    "name": "process-get",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(process-put (get-process \"shell\") 'bar 456)<br>(process-get (get-process \"shell\") 'bar)<br>",
    "demo_result": "456"
  },
  {
    "name": "process-id",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(process-id (get-process \"shell\"))<br>",
    "demo_result": "44050"
  },
  {
    "name": "process-lines",
    "demo_src": "(process-lines \"seq\" \"3\")<br>",
    "demo_result": "(\"1\" \"2\" \"3\")"
  },
  {
    "name": "process-list",
    "demo_src": "(process-list)<br>",
    "demo_result": "(#<process shell> #<process atomic-chrome-httpd> #<process websocket server on port 64292> #<process server>)"
  },
  {
    "name": "process-live-p",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(process-live-p (get-process \"shell\"))<br>",
    "demo_result": "(run open listen connect stop)"
  },
  {
    "name": "process-mark",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(process-mark (get-process \"shell\"))<br>",
    "demo_result": "#<marker at 21 in *shell*>"
  },
  {
    "name": "process-name",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(process-name (get-buffer-process \"*shell*\"))<br>",
    "demo_result": "\"shell\""
  },
  {
    "name": "process-plist",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(process-put (get-process \"shell\") 'foo 123)<br>(process-put (get-process \"shell\") 'bar 456)<br><br>(process-plist (get-process \"shell\"))<br>",
    "demo_result": "(foo 123 bar 456)"
  },
  {
    "name": "process-put",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(process-put (get-process \"shell\") 'foo 123)<br>(process-get (get-process \"shell\") 'foo)<br>",
    "demo_result": "123"
  },
  {
    "name": "process-query-on-exit-flag",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(process-query-on-exit-flag (get-process \"shell\"))<br>",
    "demo_result": "t"
  },
  {
    "name": "process-running-child-p",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(process-running-child-p (get-process \"shell\"))<br>",
    "demo_result": "nil"
  },
  {
    "name": "process-send-eof",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(process-send-eof (get-process \"shell\"))<br>",
    "demo_result": "#<process shell>"
  },
  {
    "name": "process-send-region",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(with-temp-buffer<br>  (insert \"date\\n\")<br>  (process-send-region (get-process \"shell\") (point-min) (point-max)))<br>",
    "demo_result": "nil"
  },
  {
    "name": "process-send-string",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(process-send-string (get-process \"shell\") \"date\\n\")<br>",
    "demo_result": "nil"
  },
  {
    "name": "process-status",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(process-status \"shell\")<br>",
    "demo_result": "run"
  },
  {
    "name": "process-tty-name",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(process-tty-name (get-process \"shell\"))<br>",
    "demo_result": "\"/dev/ttys001\""
  },
  {
    "name": "process-type",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(process-type (get-process \"shell\"))<br>",
    "demo_result": "real"
  },
  {
    "name": "prog1",
    "demo_src": "(prog1 1 2 3)<br>",
    "demo_result": "1"
  },
  {
    "name": "prog2",
    "demo_src": "(prog2 1 2 3)<br>",
    "demo_result": "2"
  },
  {
    "name": "progn",
    "demo_src": "(progn 1 2 3)<br>",
    "demo_result": "3"
  },
  {
    "name": "proper-list-p",
    "demo_src": "(proper-list-p '(1 2 3))<br>",
    "demo_result": "3"
  },
  {
    "name": "propertize",
    "demo_src": "(propertize \"Hello\" 'face 'italic)<br>",
    "demo_result": "#(\"Hello\" 0 5<br>  (face italic))"
  },
  {
    "name": "provided-mode-derived-p",
    "demo_src": "(provided-mode-derived-p 'lisp-interaction-mode 'prog-mode)<br>",
    "demo_result": "prog-mode"
  },
  {
    "name": "pulse-momentary-highlight-one-line",
    "demo_src": "(pulse-momentary-highlight-one-line (point))<br>",
    "demo_result": ""
  },
  {
    "name": "pulse-momentary-highlight-region",
    "demo_src": "(pulse-momentary-highlight-region (line-beginning-position) (line-end-position))<br>",
    "demo_result": ""
  },
  {
    "name": "puny-decode-domain",
    "demo_src": "(puny-decode-domain \"xn--bcher-kva.tld\")<br>",
    "demo_result": "\"bücher.tld\""
  },
  {
    "name": "puny-decode-string",
    "demo_src": "(puny-decode-string \"xn--bcher-kva\")<br>",
    "demo_result": "\"bücher\""
  },
  {
    "name": "puny-encode-domain",
    "demo_src": "(puny-encode-domain \"bücher.tld\")<br>",
    "demo_result": ""
  },
  {
    "name": "puny-encode-string",
    "demo_src": "(puny-encode-string \"bücher\")<br>",
    "demo_result": "\"xn--bcher-kva\""
  },
  {
    "name": "push",
    "demo_src": "(let ((l '(1 2)))<br>  (push 3 l)<br>  l)<br>",
    "demo_result": "(3 1 2)"
  },
  {
    "name": "put",
    "demo_src": "(put 'fly 'verb 'transitive)<br>",
    "demo_result": "transitive"
  },
  {
    "name": "put-text-property",
    "demo_src": "(with-temp-buffer<br>  (insert \"x1\")<br>  (put-text-property 2 3 'display '(raise 0.5))<br>  (message \"%s\" (buffer-string))<br>  (sit-for 3))<br>",
    "demo_result": "t"
  },
  {
    "name": "puthash",
    "demo_src": "(let ((table (make-hash-table)))<br>  (puthash 'x 1 table)<br>  (puthash 'y 2 table)<br>  table)<br>",
    "demo_result": "#s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data<br>(x 1 y 2))"
  },
  {
    "name": "queue-all",
    "demo_src": "(let ((q (queue-create)))<br>  (queue-enqueue q 1)<br>  (queue-enqueue q 2)<br>  (queue-enqueue q 3)<br>  (queue-prepend q 0)<br>  (queue-all q))<br>",
    "demo_result": "(0 1 2 3)"
  },
  {
    "name": "queue-clear",
    "demo_src": "(let ((q (queue-create)))<br>  (queue-enqueue q 1)<br>  (queue-enqueue q 2)<br>  (queue-enqueue q 3)<br>  (queue-clear q)<br>  q)<br>",
    "demo_result": "#s(queue nil nil)"
  },
  {
    "name": "queue-create",
    "demo_src": ";; FIFO (first in, first out)<br>(let ((q (queue-create)))<br>  (queue-enqueue q 1)<br>  (queue-enqueue q 2)<br>  (queue-enqueue q 3)<br>  (list (queue-dequeue q)<br>        (queue-dequeue q)<br>        (queue-dequeue q)))<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "queue-first",
    "demo_src": "(let ((q (queue-create)))<br>  (queue-enqueue q 1)<br>  (queue-enqueue q 2)<br>  (queue-enqueue q 3)<br>  (queue-first q))<br>",
    "demo_result": "1"
  },
  {
    "name": "queue-last",
    "demo_src": "(let ((q (queue-create)))<br>  (queue-enqueue q 1)<br>  (queue-enqueue q 2)<br>  (queue-enqueue q 3)<br>  (queue-last q))<br>",
    "demo_result": "3"
  },
  {
    "name": "queue-length",
    "demo_src": "(let ((q (queue-create)))<br>  (queue-enqueue q 1)<br>  (queue-enqueue q 2)<br>  (queue-enqueue q 3)<br>  (queue-prepend q 0)<br>  (queue-length q))<br>",
    "demo_result": "4"
  },
  {
    "name": "quote",
    "demo_src": "(quote (+ 1 2))<br>",
    "demo_result": "(+ 1 2)"
  },
  {
    "name": "radix-tree-count",
    "demo_src": "(let ((tree ()))<br>  (setq tree (radix-tree-insert tree \"application\" t))<br>  (setq tree (radix-tree-insert tree \"appetizer\" t))<br>  (setq tree (radix-tree-insert tree \"applicative\" t))<br>  (setq tree (radix-tree-insert tree \"apple\" t))<br>  (radix-tree-count tree))<br>",
    "demo_result": "4"
  },
  {
    "name": "radix-tree-from-map",
    "demo_src": "(radix-tree-from-map '((\"application\" . t)<br>                       (\"appetizer\" . t)<br>                       (\"applicative\" . t)<br>                       (\"apple\" . t)))<br>",
    "demo_result": "((\"app\"<br>  (\"l\"<br>   (\"icati\"<br>    (\"on\" . t)<br>    (\"ve\" . t))<br>   (\"e\" . t))<br>  (\"etizer\" . t)))"
  },
  {
    "name": "radix-tree-insert",
    "demo_src": "(let ((tree ()))<br>  (setq tree (radix-tree-insert tree \"application\" t))<br>  (setq tree (radix-tree-insert tree \"appetizer\" t))<br>  (setq tree (radix-tree-insert tree \"applicative\" t))<br>  (setq tree (radix-tree-insert tree \"apple\" t))<br>  tree)<br>",
    "demo_result": "((\"app\"<br>  (\"l\"<br>   (\"icati\"<br>    (\"on\" . t)<br>    (\"ve\" . t))<br>   (\"e\" . t))<br>  (\"etizer\" . t)))"
  },
  {
    "name": "radix-tree-iter-mappings",
    "demo_src": "(let (tree words)<br>  (setq tree (radix-tree-insert tree \"application\" t))<br>  (setq tree (radix-tree-insert tree \"appetizer\" t))<br>  (setq tree (radix-tree-insert tree \"applicative\" t))<br>  (setq tree (radix-tree-insert tree \"apple\" t))<br>  (radix-tree-iter-mappings<br>   (radix-tree-subtree tree \"app\")<br>   (lambda (k v) (push (concat \"app\" k) words)))<br>  words)<br>",
    "demo_result": "(\"appetizer\" \"apple\" \"applicative\" \"application\")"
  },
  {
    "name": "radix-tree-iter-subtrees",
    "demo_src": "(let (tree words)<br>  (setq tree (radix-tree-insert tree \"application\" t))<br>  (setq tree (radix-tree-insert tree \"appetizer\" t))<br>  (setq tree (radix-tree-insert tree \"applicative\" t))<br>  (setq tree (radix-tree-insert tree \"apple\" t))<br>  (cl-labels ((mapping<br>               (tree prefix)<br>               (radix-tree-iter-subtrees<br>                tree<br>                (lambda (p s)<br>                  (let ((nprefix (concat prefix p)))<br>                    (pcase s<br>                      ((radix-tree-leaf _v) (push nprefix words))<br>                      (_ (mapping s nprefix))))))))<br>    (mapping tree \"\"))<br>  words)<br>",
    "demo_result": "(\"appetizer\" \"apple\" \"applicative\" \"application\")"
  },
  {
    "name": "radix-tree-lookup",
    "demo_src": "(let ((tree ()))<br>  (setq tree (radix-tree-insert tree \"application\" 1))<br>  (setq tree (radix-tree-insert tree \"appetizer\"   2))<br>  (setq tree (radix-tree-insert tree \"applicative\" 3))<br>  (setq tree (radix-tree-insert tree \"apple\"       4))<br>  (radix-tree-lookup tree \"apple\"))<br>",
    "demo_result": "4"
  },
  {
    "name": "radix-tree-prefixes",
    "demo_src": "(let ((tree ()))<br>  (setq tree (radix-tree-insert tree \"apply\" t))<br>  (setq tree (radix-tree-insert tree \"applies\" t))<br>  (setq tree (radix-tree-insert tree \"applied\" t))<br>  (setq tree (radix-tree-insert tree \"applying\" t))<br>  (radix-tree-prefixes tree \"applying\"))<br>",
    "demo_result": "((\"applying\" . t)<br> (\"apply\" . t))"
  },
  {
    "name": "radix-tree-subtree",
    "demo_src": "(let ((tree ()))<br>  (setq tree (radix-tree-insert tree \"application\" 1))<br>  (setq tree (radix-tree-insert tree \"appetizer\"   2))<br>  (setq tree (radix-tree-insert tree \"applicative\" 3))<br>  (setq tree (radix-tree-insert tree \"apple\"       4))<br>  (radix-tree-subtree tree \"appl\"))<br>",
    "demo_result": "((\"icati\"<br>  (\"on\" . 1)<br>  (\"ve\" . 3))<br> (\"e\" . 4))"
  },
  {
    "name": "random",
    "demo_src": ";; [0, 3)<br>(random 3)<br>",
    "demo_result": "1"
  },
  {
    "name": "rassoc",
    "demo_src": "(rassoc '(2) '((\"one\" 1)<br>               (\"two\" 2)<br>               (\"three\" 3)))<br>",
    "demo_result": "(\"two\" 2)"
  },
  {
    "name": "rassq",
    "demo_src": "(rassq 'tyke '((tom . jerry) (spike . tyke)))<br>",
    "demo_result": "(spike . tyke)"
  },
  {
    "name": "rassq-delete-all",
    "demo_src": "(let ((alist (list (cons 1 2)<br>                   (cons 3 4)<br>                   (cons 5 6)<br>                   (cons 7 2))))<br>  (setq alist (rassq-delete-all 2 alist)))<br>",
    "demo_result": "((3 . 4)<br> (5 . 6))"
  },
  {
    "name": "re-search-forward",
    "demo_src": "(with-temp-buffer<br>  (insert \"# Intro\\n\"<br>          \"# Usage\\n\"<br>          \"# License\\n\")<br>  (goto-char (point-min))<br>  (let ((matches '()))<br>    (while (re-search-forward \"^# \\\\(.+\\\\)$\" nil t)<br>      (push (match-string 1) matches))<br>    (nreverse matches)))<br>",
    "demo_result": "(\"Intro\" \"Usage\" \"License\")"
  },
  {
    "name": "read",
    "demo_src": "(read \"42\")<br>",
    "demo_result": "42"
  },
  {
    "name": "read-char-choice",
    "demo_src": "(read-char-choice \"Delete foo.txt? [Type y/n/q] \" '(?y ?n ?q))<br>",
    "demo_result": "121"
  },
  {
    "name": "read-color",
    "demo_src": "(read-color)<br>",
    "demo_result": "\"green\""
  },
  {
    "name": "read-from-minibuffer",
    "demo_src": "(read-from-minibuffer \"Enter your name: \")<br>",
    "demo_result": "\"xuchunyang\""
  },
  {
    "name": "read-from-string",
    "demo_src": "(read-from-string \"(setq x \\\"hello\\\") (setq y 5)\")<br>",
    "demo_result": "((setq x \"hello\")<br> . 16)"
  },
  {
    "name": "read-kbd-macro",
    "demo_src": "(read-kbd-macro \"C-x C-f\")<br>",
    "demo_result": "\"\u0018\u0006\""
  },
  {
    "name": "read-minibuffer",
    "demo_src": "(read-minibuffer \"Enter an expression: \" (format \"%s\" '(+ 1 2)))<br>",
    "demo_result": "(+ 1 2)"
  },
  {
    "name": "read-multiple-choice",
    "demo_src": "(read-multiple-choice \"Continue connecting?\"<br>                      '((?a \"always\")<br>                        (?s \"session only\")<br>                        (?n \"no\")))<br>",
    "demo_result": "(97 \"always\")"
  },
  {
    "name": "read-no-blanks-input",
    "demo_src": "(read-no-blanks-input \"Username (space and tab are not allowed): \")<br>",
    "demo_result": "\"xuchunyang\""
  },
  {
    "name": "read-passwd",
    "demo_src": "(read-passwd \"Your password: \")<br>",
    "demo_result": "\"123456\""
  },
  {
    "name": "read-quoted-char",
    "demo_src": "(read-quoted-char \"What character (octal)\")<br>",
    "demo_result": "120"
  },
  {
    "name": "read-regexp",
    "demo_src": "(read-regexp \"Search for regexp: \")<br>",
    "demo_result": "\"^\\\\* \""
  },
  {
    "name": "read-string",
    "demo_src": "(read-string \"Enter your name: \")<br>",
    "demo_result": ""
  },
  {
    "name": "recent-keys",
    "demo_src": "(length (recent-keys))<br>",
    "demo_result": "158"
  },
  {
    "name": "record",
    "demo_src": "(record 'foo 23 [bar baz] \"rats\")<br>",
    "demo_result": "#s(foo 23<br>       [bar baz]<br>       \"rats\")"
  },
  {
    "name": "recordp",
    "demo_src": "(recordp #s(a))<br>",
    "demo_result": "t"
  },
  {
    "name": "recursive-edit",
    "demo_src": "(defun stop-watch ()<br>  \"Start a stop watch, type \\\\[exit-recursive-edit] to stop it.\"<br>  (interactive)<br>  (let ((t1 (current-time)))<br>    (message<br>     \"%s\"<br>     (substitute-command-keys<br>      \"Type \\\\[exit-recursive-edit] to exit the stop watch\"))<br>    (recursive-edit)<br>    (message<br>     \"%f seconds passed\"<br>     (float-time (time-subtract (current-time) t1)))))<br>",
    "demo_result": "stop-watch"
  },
  {
    "name": "regexp-opt",
    "demo_src": "(regexp-opt '(\"foo\" \"bar\" \"baz\"))<br>",
    "demo_result": "\"\\\\(?:ba[rz]\\\\|foo\\\\)\""
  },
  {
    "name": "regexp-opt-charset",
    "demo_src": "(regexp-opt-charset '(?a ?b ?c ?d ?e))<br>",
    "demo_result": "\"[a-e]\""
  },
  {
    "name": "regexp-opt-depth",
    "demo_src": "(regexp-opt-depth \"\\\\(foo\\\\)\\\\(bar\\\\)\\\\(?:baz\\\\)\")<br>",
    "demo_result": "2"
  },
  {
    "name": "regexp-quote",
    "demo_src": "(regexp-quote \"^The cat$\")<br>",
    "demo_result": "\"\\\\^The cat\\\\$\""
  },
  {
    "name": "region-bounds",
    "demo_src": "(with-temp-buffer<br>  (set-mark (point))<br>  (insert \"hello\")<br>  (region-bounds))<br>",
    "demo_result": "((1 . 6))"
  },
  {
    "name": "region-noncontiguous-p",
    "demo_src": "(with-temp-buffer<br>  (set-mark (point))<br>  (insert \"AAA\" ?\\n<br>          \"BBB\" ?\\n<br>          \"CCC\")<br>  (rectangle-mark-mode)<br>  (region-noncontiguous-p))<br>",
    "demo_result": "t"
  },
  {
    "name": "remhash",
    "demo_src": "(let ((table (make-hash-table)))<br>  (puthash 'x 1 table)<br>  (puthash 'y 2 table)<br>  (remhash 'x table)<br>  table)<br>",
    "demo_result": "#s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data<br>( y 2))"
  },
  {
    "name": "remove",
    "demo_src": "(remove \"a\" '(\"a\" \"b\" \"c\" \"a\"))<br>",
    "demo_result": "(\"b\" \"c\")"
  },
  {
    "name": "remove-hook",
    "demo_src": "(remove-hook 'lisp-interaction-mode-hook #'prettify-symbols-mode)<br>",
    "demo_result": ""
  },
  {
    "name": "remove-overlays",
    "demo_src": "(with-temp-buffer<br>  (let ((ov (make-overlay 1 1)))<br>    (overlay-put ov 'happy t)<br>    (remove-overlays 1 1 'happy t)<br>    (format \"%S\" ov)))<br>",
    "demo_result": "\"#<overlay in no buffer>\""
  },
  {
    "name": "remq",
    "demo_src": "(let ((l (list 1 2 3 2)))<br>  (remq 2 l))<br>",
    "demo_result": "(1 3)"
  },
  {
    "name": "replace-match",
    "demo_src": "(with-temp-buffer<br>  (insert \"65 83 68 70\")<br>  (goto-char (point-min))<br>  (while (re-search-forward \"[0-9]+\" nil t)<br>    (replace-match<br>     ;; \"65\" => ?A => \"A\"<br>     (string (read (match-string 0)))<br>     'fixedcase<br>     'literal))<br>  (buffer-string))<br>",
    "demo_result": "\"A S D F\""
  },
  {
    "name": "replace-regexp-in-string",
    "demo_src": "(replace-regexp-in-string \"-\" \", \" \"foo-bar-baz\")<br>",
    "demo_result": "\"foo, bar, baz\""
  },
  {
    "name": "replace-region-contents",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello\")<br>  (replace-region-contents (point-min) (point-max) (lambda () '\"world\"))<br>  (buffer-string))<br>",
    "demo_result": "\"world\""
  },
  {
    "name": "request",
    "demo_src": "(let (json)<br>  (request<br>   \"https://api.github.com/status\"<br>   :parser #'json-read<br>   :success (cl-function<br>             (lambda (&key data &allow-other-keys)<br>               (setq json data)))<br>   :sync t)<br>  json)<br>",
    "demo_result": "((message . \"GitHub lives! (2018-12-01 23:36:08 -0800) (1)\"))"
  },
  {
    "name": "require",
    "demo_src": "(require 'pcase)<br>",
    "demo_result": "pcase"
  },
  {
    "name": "reverse",
    "demo_src": "(let* ((old '(1 2 3))<br>       (new (reverse x)))<br>  (list old new))<br>",
    "demo_result": "((1 2 3)<br> (3 2 1))"
  },
  {
    "name": "rfc1843-decode-string",
    "demo_src": "(with-temp-buffer<br>  (decode-coding-string<br>   (apply #'unibyte-string<br>          ;; FIXME: is `string-to-list' the best?<br>          (string-to-list<br>           (rfc1843-decode-string \"~{<:Ky2;S{#,NpJ)l6HK!#~}\")))<br>   'chinese-gbk))<br>",
    "demo_result": "#(\"己所不欲，勿施於人。\" 0 10<br>  (charset chinese-gbk))"
  },
  {
    "name": "rfc2104-hash",
    "demo_src": "(rfc2104-hash 'md5 64 16 \"passwd\" \"Hi There\")<br>",
    "demo_result": "\"63c4c79cd364581232da80ca38adf486\""
  },
  {
    "name": "ring-convert-sequence-to-ring",
    "demo_src": "(ring-convert-sequence-to-ring '(a b c))<br>",
    "demo_result": "(0 3 .<br>   [c b a])"
  },
  {
    "name": "ring-copy",
    "demo_src": "(ring-copy (make-ring 3))<br>",
    "demo_result": "(0 0 .<br>   [nil nil nil])"
  },
  {
    "name": "ring-elements",
    "demo_src": "(let ((ring (make-ring 10)))<br>  (ring-insert ring 1)<br>  (ring-insert ring 2)<br>  (ring-insert ring 3)<br>  (ring-elements ring))<br>",
    "demo_result": "(3 2 1)"
  },
  {
    "name": "ring-empty-p",
    "demo_src": "(ring-empty-p (make-ring 3))<br>",
    "demo_result": "t"
  },
  {
    "name": "ring-insert",
    "demo_src": "(let ((ring (make-ring 3)))<br>  (ring-insert ring 1)<br>  (ring-insert ring 2)<br>  (ring-insert ring 3)<br>  ring)<br>",
    "demo_result": "(0 3 .<br>   [1 2 3])"
  },
  {
    "name": "ring-insert-at-beginning",
    "demo_src": "(let ((ring (make-ring 3)))<br>  (ring-insert ring 1)<br>  (ring-insert ring 2)<br>  (ring-insert-at-beginning ring 0)<br>  ring)<br>",
    "demo_result": "(2 3 .<br>   [1 2 0])"
  },
  {
    "name": "ring-length",
    "demo_src": "(let ((ring (make-ring 3)))<br>  (ring-insert ring \"hello\")<br>  (ring-length ring))<br>",
    "demo_result": "1"
  },
  {
    "name": "ring-p",
    "demo_src": "(ring-p (make-ring 3))<br>",
    "demo_result": "t"
  },
  {
    "name": "ring-ref",
    "demo_src": "(let ((ring (make-ring 3)))<br>  (ring-insert ring 1)<br>  (ring-insert ring 2)<br>  (ring-insert ring 3)<br>  (ring-ref ring 0))<br>",
    "demo_result": "3"
  },
  {
    "name": "ring-remove",
    "demo_src": "(let ((ring (make-ring 3)))<br>  (ring-insert ring 1)<br>  (ring-insert ring 2)<br>  (ring-insert ring 3)<br>  (ring-remove ring)<br>  ring)<br>",
    "demo_result": "(0 2 .<br>   [2 3 nil])"
  },
  {
    "name": "ring-resize",
    "demo_src": "(let ((r (make-ring 2)))<br>  (ring-insert r \"a\")<br>  (ring-insert r \"b\")<br>  (ring-resize r 5)<br>  (ring-insert r \"c\")<br>  r)<br>",
    "demo_result": "(0 3 .<br>   [\"a\" \"b\" \"c\" nil nil])"
  },
  {
    "name": "ring-size",
    "demo_src": "(ring-size (make-ring 3))<br>",
    "demo_result": "3"
  },
  {
    "name": "rot13",
    "demo_src": "(rot13 \"HELLO\")<br>",
    "demo_result": "\"URYYB\""
  },
  {
    "name": "rot13-region",
    "demo_src": "(with-temp-buffer<br>  (insert \"HELLO\")<br>  (rot13-region (point-min) (point-max))<br>  (buffer-string))<br>",
    "demo_result": "\"URYYB\""
  },
  {
    "name": "rot13-string",
    "demo_src": "(rot13-string \"HELLO\")<br>",
    "demo_result": "\"URYYB\""
  },
  {
    "name": "round",
    "demo_src": "(list (round 1.2)<br>      (round 1.5))<br>",
    "demo_result": "(1 2)"
  },
  {
    "name": "run-at-time",
    "demo_src": "(run-at-time 3 nil #'about-emacs)<br>",
    "demo_result": "[nil 23532 38462 672975 nil about-emacs nil nil 0]"
  },
  {
    "name": "run-with-idle-timer",
    "demo_src": "(run-with-idle-timer 3 nil (lambda () (message \"Your Emacs is idle for 3 seconds\")))<br>",
    "demo_result": "[nil 0 3 0 nil<br>     (lambda nil<br>       (message \"Your Emacs is idle for 3 seconds\"))<br>     nil idle 0]"
  },
  {
    "name": "rx",
    "demo_src": ";; To match <2018-11-07><br>(rx \"<\" (group (in ?- \"0-9\")) \">\")<br>",
    "demo_result": "\"<\\\\([-0-9]\\\\)>\""
  },
  {
    "name": "rx-to-string",
    "demo_src": ";; `rx' is a macro and can't compute regexp at run-time, that is, once the macro<br>;; is expanded, the result is static, not only byte-compiler but also<br>;; load/require/eval-buffer/etc expands macro eagerly.  By the way, We don't<br>;; consider `eval' even if it works, it is simply bad<br>;; (eval '(rx (eval (buffer-name))))<br>(rx-to-string `(and bos ,(buffer-name) eos))<br>",
    "demo_result": "\"\\\\(?:\\\\`elisp-demos\\\\.org\\\\'\\\\)\""
  },
  {
    "name": "s-append",
    "demo_src": "(s-append \"abc\" \"def\")<br>",
    "demo_result": "\"defabc\""
  },
  {
    "name": "s-blank?",
    "demo_src": "(s-blank? \" \")<br>",
    "demo_result": "nil"
  },
  {
    "name": "s-capitalize",
    "demo_src": "(s-capitalize \"HELLO WORLD\")<br>",
    "demo_result": "\"Hello world\""
  },
  {
    "name": "s-capitalized-words",
    "demo_src": "(s-capitalized-words \"hello_world\")<br>",
    "demo_result": "\"Hello world\""
  },
  {
    "name": "s-capitalized?",
    "demo_src": "(s-capitalized? \"Capitalized\")<br>",
    "demo_result": "t"
  },
  {
    "name": "s-center",
    "demo_src": "(s-center 5 \"a\")<br>",
    "demo_result": "\"  a  \""
  },
  {
    "name": "s-chomp",
    "demo_src": "(list (s-chomp \"no newlines\\n\")<br>      (s-chomp \"no newlines\\r\\n\")<br>      (s-chomp \"some newlines\\n\\n\"))<br>",
    "demo_result": "(\"no newlines\" \"no newlines\" \"some newlines\\n\")"
  },
  {
    "name": "s-chop-prefix",
    "demo_src": "(s-chop-prefix \"/tmp/\" \"/tmp/file.js\")<br>",
    "demo_result": "\"file.js\""
  },
  {
    "name": "s-chop-prefixes",
    "demo_src": "(s-chop-prefixes '(\"/tmp\" \"/my/\") \"/tmp/my/file.js\")<br>",
    "demo_result": "\"file.js\""
  },
  {
    "name": "s-chop-suffix",
    "demo_src": "(s-chop-suffix \"-test.js\" \"penguin-test.js\")<br>",
    "demo_result": "\"penguin\""
  },
  {
    "name": "s-chop-suffixes",
    "demo_src": "(s-chop-suffixes '(\".gz\" \".el\") \"simple.el.gz\")<br>",
    "demo_result": "\"simple\""
  },
  {
    "name": "s-collapse-whitespace",
    "demo_src": "(s-collapse-whitespace \"only   one space   please\")<br>",
    "demo_result": "\"only one space please\""
  },
  {
    "name": "s-concat",
    "demo_src": "(s-concat \"hello\" \" \" \"world\")<br>",
    "demo_result": "\"hello world\""
  },
  {
    "name": "s-contains?",
    "demo_src": "(s-contains? \"file\" \"lib/file.js\")<br>",
    "demo_result": "t"
  },
  {
    "name": "s-count-matches",
    "demo_src": "(s-count-matches \"a\" \"aba\")<br>",
    "demo_result": "2"
  },
  {
    "name": "s-dashed-words",
    "demo_src": "(s-dashed-words \"foo bar baz\")<br>",
    "demo_result": "\"foo-bar-baz\""
  },
  {
    "name": "s-downcase",
    "demo_src": "(s-downcase \"EMACS\")<br>",
    "demo_result": "\"emacs\""
  },
  {
    "name": "s-ends-with?",
    "demo_src": "(s-ends-with? \".md\" \"readme.md\")<br>",
    "demo_result": "t"
  },
  {
    "name": "s-equals?",
    "demo_src": "(s-equals? \"abc\" \"abc\")<br>",
    "demo_result": "t"
  },
  {
    "name": "s-format",
    "demo_src": "(s-format<br> \"help ${name}! I'm ${malady}\"<br> 'aget<br> '((\"name\" . \"nic\")<br>   (\"malady\" . \"on fire\")))<br>",
    "demo_result": "\"help nic! I'm on fire\""
  },
  {
    "name": "s-index-of",
    "demo_src": "(s-index-of \"def\" \"abcdef\")<br>",
    "demo_result": "3"
  },
  {
    "name": "s-join",
    "demo_src": "(s-join \"-\" '(\"a\" \"b\" \"c\"))<br>",
    "demo_result": "\"a-b-c\""
  },
  {
    "name": "s-left",
    "demo_src": "(s-left 3 \"lib/file.js\")<br>",
    "demo_result": "\"lib\""
  },
  {
    "name": "s-less?",
    "demo_src": "(s-less? \"abc\" \"abd\")<br>",
    "demo_result": "t"
  },
  {
    "name": "s-lex-format",
    "demo_src": "(let ((x 1))<br>  (s-lex-format \"x is ${x}\"))<br>",
    "demo_result": "\"x is 1\""
  },
  {
    "name": "s-lines",
    "demo_src": "(s-lines \"abc\\ndef\\nghi\")<br>",
    "demo_result": "(\"abc\" \"def\" \"ghi\")"
  },
  {
    "name": "s-lower-camel-case",
    "demo_src": "(s-lower-camel-case \"foo bar baz\")<br>",
    "demo_result": "\"fooBarBaz\""
  },
  {
    "name": "s-lowercase?",
    "demo_src": "(s-lowercase? \"file\")<br>",
    "demo_result": "t"
  },
  {
    "name": "s-match",
    "demo_src": "(s-match<br> (rx (group (= 4 num)) \"-\"<br>     (group (= 2 num)) \"-\"<br>     (group (= 2 num)))<br> \"Today is <2018-11-26>\")<br>",
    "demo_result": "(\"2018-11-26\" \"2018\" \"11\" \"26\")"
  },
  {
    "name": "s-match-strings-all",
    "demo_src": "(s-match-strings-all \"ab.\" \"abXabY\")<br>",
    "demo_result": "((\"abX\")<br> (\"abY\"))"
  },
  {
    "name": "s-matched-positions-all",
    "demo_src": "(s-matched-positions-all \"[0-9]\" \"a0b1\")<br>",
    "demo_result": "((1 . 2)<br> (3 . 4))"
  },
  {
    "name": "s-matches?",
    "demo_src": "(s-matches? \"^[0-9]+$\" \"123\")<br>",
    "demo_result": "t"
  },
  {
    "name": "s-mixedcase?",
    "demo_src": "(s-mixedcase? \"Emacs\")<br>",
    "demo_result": "t"
  },
  {
    "name": "s-numeric?",
    "demo_src": "(s-numeric? \"123\")<br>",
    "demo_result": "t"
  },
  {
    "name": "s-pad-left",
    "demo_src": "(s-pad-left 3 \"0\" \"3\")<br>",
    "demo_result": "\"003\""
  },
  {
    "name": "s-pad-right",
    "demo_src": "(s-pad-right 10 \".\" \"hello\")<br>",
    "demo_result": "\"hello.....\""
  },
  {
    "name": "s-prepend",
    "demo_src": "(s-prepend \"abc\" \"def\")<br>",
    "demo_result": "\"abcdef\""
  },
  {
    "name": "s-presence",
    "demo_src": "(s-presence \" \")<br>",
    "demo_result": "\" \""
  },
  {
    "name": "s-present?",
    "demo_src": "(s-present? \" \")<br>",
    "demo_result": "t"
  },
  {
    "name": "s-repeat",
    "demo_src": "(s-repeat 3 \"No\")<br>",
    "demo_result": "\"NoNoNo\""
  },
  {
    "name": "s-replace",
    "demo_src": "(s-replace \"file\" \"nope\" \"lib/file.js\")<br>",
    "demo_result": "\"lib/nope.js\""
  },
  {
    "name": "s-replace-all",
    "demo_src": "(s-replace-all '((\"Vim\" . \"Emacs\")<br>                 (\"Emacs\" . \"Vim\"))<br>               \"Vim and Emacs\")<br>",
    "demo_result": "\"Emacs and Vim\""
  },
  {
    "name": "s-reverse",
    "demo_src": "(s-reverse \"abc\")<br>",
    "demo_result": "\"cba\""
  },
  {
    "name": "s-right",
    "demo_src": "(s-right 3 \"lib/file.js\")<br>",
    "demo_result": "\".js\""
  },
  {
    "name": "s-shared-end",
    "demo_src": "(s-shared-end \"bar\" \"var\")<br>",
    "demo_result": "\"ar\""
  },
  {
    "name": "s-shared-start",
    "demo_src": "(s-shared-start \"bar\" \"baz\")<br>",
    "demo_result": "\"ba\""
  },
  {
    "name": "s-slice-at",
    "demo_src": "(s-slice-at \"/\" \"/path/to/file\")<br>",
    "demo_result": "(\"/path\" \"/to\" \"/file\")"
  },
  {
    "name": "s-snake-case",
    "demo_src": "(s-snake-case \"foo-bar-baz\")<br>",
    "demo_result": "\"foo_bar_baz\""
  },
  {
    "name": "s-split",
    "demo_src": "(s-split \"/\" \"/path/to/file\" 'omit-nulls)<br>",
    "demo_result": "(\"path\" \"to\" \"file\")"
  },
  {
    "name": "s-split-up-to",
    "demo_src": "(s-split-up-to \"/\" \"/path/to/file\" 2 'omit-nulls)<br>",
    "demo_result": "(\"path\" \"to/file\")"
  },
  {
    "name": "s-split-words",
    "demo_src": "(s-split-words \"hello_world\")<br>",
    "demo_result": "(\"hello\" \"world\")"
  },
  {
    "name": "s-starts-with?",
    "demo_src": "(s-starts-with? \"lib/\" \"lib/file.js\")<br>",
    "demo_result": "t"
  },
  {
    "name": "s-titleize",
    "demo_src": "(s-titleize \"hello world\")<br>",
    "demo_result": "\"Hello World\""
  },
  {
    "name": "s-titleized-words",
    "demo_src": "(s-titleized-words \"foo_bar_baz\")<br>",
    "demo_result": "\"Foo Bar Baz\""
  },
  {
    "name": "s-trim",
    "demo_src": "(s-trim \" hello \")<br>",
    "demo_result": "\"hello\""
  },
  {
    "name": "s-trim-left",
    "demo_src": "(s-trim-left \" hello \")<br>",
    "demo_result": "\"hello \""
  },
  {
    "name": "s-trim-right",
    "demo_src": "(s-trim-right \" hello \")<br>",
    "demo_result": "\" hello\""
  },
  {
    "name": "s-truncate",
    "demo_src": "(s-truncate 14 \"This is too long\")<br>",
    "demo_result": "\"This is too...\""
  },
  {
    "name": "s-upcase",
    "demo_src": "(s-upcase \"emacs\")<br>",
    "demo_result": "\"EMACS\""
  },
  {
    "name": "s-upper-camel-case",
    "demo_src": "(s-upper-camel-case \"foo bar baz\")<br>",
    "demo_result": "\"FooBarBaz\""
  },
  {
    "name": "s-uppercase?",
    "demo_src": "(s-uppercase? \"EMACS\")<br>",
    "demo_result": "t"
  },
  {
    "name": "s-with",
    "demo_src": "(s-with \"  hello  \" s-trim s-upcase)<br>",
    "demo_result": "\"HELLO\""
  },
  {
    "name": "s-word-initials",
    "demo_src": "(s-word-initials \"foo bar baz\")<br>",
    "demo_result": "\"fbb\""
  },
  {
    "name": "s-word-wrap",
    "demo_src": "(s-word-wrap 10 \"This is too long\")<br>",
    "demo_result": "\"This is\\ntoo long\""
  },
  {
    "name": "s-wrap",
    "demo_src": "(s-wrap \"foo\" \"<\" \">\")<br>",
    "demo_result": "\"<foo>\""
  },
  {
    "name": "safe-length",
    "demo_src": "(safe-length '(1 2 3))<br>",
    "demo_result": "3"
  },
  {
    "name": "same-class-p",
    "demo_src": "(defclass my-class () ())<br>(same-class-p (my-class) 'my-class)<br>",
    "demo_result": "t"
  },
  {
    "name": "save-current-buffer",
    "demo_src": "(list (current-buffer)<br>      (save-current-buffer<br>        (set-buffer \"*Messages*\")<br>        (current-buffer))<br>      (current-buffer))<br>",
    "demo_result": "(#<buffer elisp-demos.org> #<buffer *Messages*> #<buffer elisp-demos.org>)"
  },
  {
    "name": "save-excursion",
    "demo_src": "(save-excursion<br>  (goto-char (point-min)))<br>",
    "demo_result": "1"
  },
  {
    "name": "save-match-data",
    "demo_src": "(list<br> (string-match \"hello\" \"hello world\")<br> (match-data)<br> (save-match-data<br>   (string-match \"world\" \"hello world\")<br>   (match-data))<br> (match-data))<br>",
    "demo_result": "(0<br> (0 5)<br> (6 11)<br> (0 5))"
  },
  {
    "name": "save-restriction",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello world\")<br>  (narrow-to-region 1 6)<br>  (list (buffer-narrowed-p)<br>        (save-restriction<br>          (widen)<br>          (buffer-narrowed-p))<br>        (buffer-narrowed-p)))<br><br>",
    "demo_result": "(t nil t)"
  },
  {
    "name": "scan-lists",
    "demo_src": "(with-temp-buffer<br>  (with-syntax-table emacs-lisp-mode-syntax-table<br>    (insert \"(list (a) (b) (c) (d))\")<br>    (goto-char (scan-lists (point-min) 4 -1))<br>    (insert \"|\")<br>    (buffer-string)))<br>",
    "demo_result": "\"(list (a) (b) (c)| (d))\""
  },
  {
    "name": "scan-sexps",
    "demo_src": "(with-temp-buffer<br>  (with-syntax-table emacs-lisp-mode-syntax-table<br>    (insert \"a b c d\")<br>    (goto-char (scan-sexps (point-min) 3))<br>    (insert \"|\")<br>    (buffer-string)))<br>",
    "demo_result": "\"a b c| d\""
  },
  {
    "name": "seconds-to-string",
    "demo_src": "(seconds-to-string 150)<br>",
    "demo_result": "\"2.50m\""
  },
  {
    "name": "seconds-to-time",
    "demo_src": "(current-time-string<br> (seconds-to-time (* (+ (* 50 365) 12) (* 24 60 60)))<br> t)<br>",
    "demo_result": "\"Wed Jan  1 00:00:00 2020\""
  },
  {
    "name": "secure-hash",
    "demo_src": "(secure-hash 'md5 \"hello\")<br>",
    "demo_result": "\"5d41402abc4b2a76b9719d911017c592\""
  },
  {
    "name": "secure-hash-algorithms",
    "demo_src": "(secure-hash-algorithms)<br>",
    "demo_result": "(md5 sha1 sha224 sha256 sha384 sha512)"
  },
  {
    "name": "select-frame-set-input-focus",
    "demo_src": "(select-frame-set-input-focus (next-frame))<br>",
    "demo_result": "nil"
  },
  {
    "name": "selected-frame",
    "demo_src": "(selected-frame)<br>",
    "demo_result": "#<frame /Users/xcy/src/elisp-demos/elisp-demos.org 0x1049a21e8>"
  },
  {
    "name": "selected-window",
    "demo_src": "(selected-window)<br>",
    "demo_result": "#<window 25 on elisp-demos.org>"
  },
  {
    "name": "selected-window-group",
    "demo_src": "(selected-window-group)<br>",
    "demo_result": "(#<window 42 on elisp-demos.org> #<window 44 on elisp-demos.org>)"
  },
  {
    "name": "seq-concatenate",
    "demo_src": "(seq-concatenate 'list '(1 2) '(3 4) [5 6])<br>",
    "demo_result": "(1 2 3 4 5 6)"
  },
  {
    "name": "seq-contains",
    "demo_src": "(seq-contains '(symbol1 symbol2) 'symbol1)<br>",
    "demo_result": "symbol1"
  },
  {
    "name": "seq-contains-p",
    "demo_src": "(seq-contains-p '(1 2 3) 3)<br>",
    "demo_result": "t"
  },
  {
    "name": "seq-count",
    "demo_src": "(seq-count (lambda (elt) (> elt 0)) [-1 2 0 3 -2])<br>",
    "demo_result": "2"
  },
  {
    "name": "seq-difference",
    "demo_src": "(seq-difference '(2 3 4 5) [1 3 5 6 7])<br>",
    "demo_result": "(2 4)"
  },
  {
    "name": "seq-do",
    "demo_src": "(seq-do #'princ '(1 2 3))<br>",
    "demo_result": "\"123\""
  },
  {
    "name": "seq-doseq",
    "demo_src": "(seq-doseq (i [1 2 3])<br>  (princ i))<br>",
    "demo_result": "\"123\""
  },
  {
    "name": "seq-drop",
    "demo_src": "(seq-drop [1 2 3 4 5 6] 3)<br>",
    "demo_result": "[4 5 6]"
  },
  {
    "name": "seq-drop-while",
    "demo_src": "(seq-drop-while<br> (lambda (elt) (> elt 0))<br> '(1 2 3 -1 -2))<br>",
    "demo_result": "(-1 -2)"
  },
  {
    "name": "seq-elt",
    "demo_src": "(seq-elt [1 2 3 4] 2)<br>",
    "demo_result": "3"
  },
  {
    "name": "seq-empty-p",
    "demo_src": "(seq-map #'seq-empty-p '([] () \"\"))<br>",
    "demo_result": "(t t t)"
  },
  {
    "name": "seq-every-p",
    "demo_src": "(seq-every-p #'numberp [2 4 6])<br>",
    "demo_result": "t"
  },
  {
    "name": "seq-filter",
    "demo_src": "(seq-filter (lambda (elt) (> elt 0)) [1 -1 3 -3 5])<br>",
    "demo_result": "(1 3 5)"
  },
  {
    "name": "seq-find",
    "demo_src": "(seq-find #'numberp [\"abc\" 1 nil])<br>",
    "demo_result": "1"
  },
  {
    "name": "seq-first",
    "demo_src": "(string (seq-first \"hello\"))<br>",
    "demo_result": "\"h\""
  },
  {
    "name": "seq-group-by",
    "demo_src": "(seq-group-by #'integerp '(1 2.1 3 2 3.2))<br>",
    "demo_result": "((t 1 3 2)<br> (nil 2.1 3.2))"
  },
  {
    "name": "seq-intersection",
    "demo_src": "(seq-intersection [2 3 4 5] [1 3 5 6 7])<br>",
    "demo_result": "(3 5)"
  },
  {
    "name": "seq-into",
    "demo_src": "(seq-into [1 2 3] 'list)<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "seq-length",
    "demo_src": "(seq-length [0 1 2 3])<br>",
    "demo_result": "4"
  },
  {
    "name": "seq-let",
    "demo_src": "(seq-let (a _ c) '(1 2 3 4)<br>  (list a c))<br>",
    "demo_result": "(1 3)"
  },
  {
    "name": "seq-map",
    "demo_src": "(seq-map #'1+ '(1 2 3))<br>",
    "demo_result": "(2 3 4)"
  },
  {
    "name": "seq-map-indexed",
    "demo_src": "(seq-map-indexed<br> (lambda (elt idx)<br>   (list idx elt))<br> '(a b c))<br>",
    "demo_result": "((0 a)<br> (1 b)<br> (2 c))"
  },
  {
    "name": "seq-mapcat",
    "demo_src": "(seq-mapcat #'seq-reverse '((3 2 1) (6 5 4)))<br>",
    "demo_result": "(1 2 3 4 5 6)"
  },
  {
    "name": "seq-mapn",
    "demo_src": "(seq-mapn #'+ '(2 4 6) '(20 40 60))<br>",
    "demo_result": "(22 44 66)"
  },
  {
    "name": "seq-max",
    "demo_src": "(seq-max [1 3 2])<br>",
    "demo_result": "3"
  },
  {
    "name": "seq-min",
    "demo_src": "(seq-min [3 1 2])<br>",
    "demo_result": "1"
  },
  {
    "name": "seq-partition",
    "demo_src": "(seq-partition '(0 1 2 3 4 5 6 7) 3)<br>",
    "demo_result": "((0 1 2)<br> (3 4 5)<br> (6 7))"
  },
  {
    "name": "seq-position",
    "demo_src": "(seq-position '(a b c) 'b)<br>",
    "demo_result": "1"
  },
  {
    "name": "seq-random-elt",
    "demo_src": "(seq-random-elt [1 2 3 4])<br>",
    "demo_result": "3"
  },
  {
    "name": "seq-reduce",
    "demo_src": "(seq-reduce #'+ (number-sequence 1 100) 0)<br>",
    "demo_result": "5050"
  },
  {
    "name": "seq-remove",
    "demo_src": "(seq-remove (lambda (elt) (> elt 0)) [1 -1 3 -3 5])<br>",
    "demo_result": "(-1 -3)"
  },
  {
    "name": "seq-rest",
    "demo_src": "(seq-rest \"hello\")<br>",
    "demo_result": "\"ello\""
  },
  {
    "name": "seq-reverse",
    "demo_src": "(seq-reverse (list 1 2 3))<br>",
    "demo_result": "(3 2 1)"
  },
  {
    "name": "seq-set-equal-p",
    "demo_src": "(seq-set-equal-p \"good\" \"dog\")<br>",
    "demo_result": "t"
  },
  {
    "name": "seq-some",
    "demo_src": "(seq-some #'numberp [\"abc\" 1 nil])<br>",
    "demo_result": "t"
  },
  {
    "name": "seq-sort",
    "demo_src": "(seq-sort #'< '(1 3 2))<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "seq-sort-by",
    "demo_src": "(seq-sort-by #'seq-length #'> [\"a\" \"ab\" \"abc\"])<br>",
    "demo_result": "[\"abc\" \"ab\" \"a\"]"
  },
  {
    "name": "seq-subseq",
    "demo_src": "(seq-subseq '(1 2 3 4 5) 1)<br>",
    "demo_result": "(2 3 4 5)"
  },
  {
    "name": "seq-take",
    "demo_src": "(seq-take '(1 2 3 4) 3)<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "seq-take-while",
    "demo_src": "(seq-take-while<br> (lambda (elt)<br>   (> elt 0))<br> '(1 2 3 -1 -2))<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "seq-uniq",
    "demo_src": "(seq-uniq '(1 2 2 1 3))<br>",
    "demo_result": "(1 2 3)"
  },
  {
    "name": "seqp",
    "demo_src": "(seqp [1 2])<br>",
    "demo_result": "t"
  },
  {
    "name": "sequencep",
    "demo_src": "(and (sequencep '(1 2 3))<br>     (sequencep [1 2 3])<br>     (sequencep \"123\"))<br>",
    "demo_result": "t"
  },
  {
    "name": "server-eval-at",
    "demo_src": "(shell-command \"emacs-24.4 -Q --daemon=foo\")<br>(prog1 (server-eval-at \"foo\" 'emacs-version)<br>  (server-eval-at \"foo\" '(kill-emacs)))<br>",
    "demo_result": "\"24.4.1\""
  },
  {
    "name": "server-quote-arg",
    "demo_src": "(server-quote-arg \"'(+ 1 2)\")<br>",
    "demo_result": "\"'(+&_1&_2)\""
  },
  {
    "name": "server-unquote-arg",
    "demo_src": "(server-unquote-arg \"'(+&_1&_2)\")<br>",
    "demo_result": "\"'(+ 1 2)\""
  },
  {
    "name": "set",
    "demo_src": "(let ((x 1))<br>  (set 'x 42)<br>  x)<br>",
    "demo_result": "42"
  },
  {
    "name": "set-binary-mode",
    "demo_src": ";; Flush standard output<br>(set-binary-mode 'stdout nil)<br>",
    "demo_result": ""
  },
  {
    "name": "set-buffer",
    "demo_src": "(progn (set-buffer \"*Messages*\")<br>       (current-buffer))<br>",
    "demo_result": "#<buffer *Messages*>"
  },
  {
    "name": "set-buffer-modified-p",
    "demo_src": "(set-buffer-modified-p (buffer-modified-p))<br>",
    "demo_result": "nil"
  },
  {
    "name": "set-buffer-multibyte",
    "demo_src": "(with-temp-buffer<br>  (set-buffer-multibyte nil)<br>  (insert \"λ\")<br>  (multibyte-string-p (buffer-string)))<br>",
    "demo_result": "nil"
  },
  {
    "name": "set-face-attribute",
    "demo_src": "(set-face-attribute 'default nil :font \"Source Code Pro-13\")<br>",
    "demo_result": "nil"
  },
  {
    "name": "set-file-modes",
    "demo_src": "(let ((file (make-temp-file \"elisp-demos-\")))<br>  (unwind-protect<br>      (progn (set-file-modes file #o644)<br>             (format \"%o\" (file-modes file)))<br>    (delete-file file)))<br>",
    "demo_result": "\"644\""
  },
  {
    "name": "set-keymap-parent",
    "demo_src": "(let ((map (make-sparse-keymap)))<br>  (set-keymap-parent map special-mode-map)<br>  map)<br>",
    "demo_result": ""
  },
  {
    "name": "set-process-plist",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(set-process-plist (get-process \"shell\") '(foo 123 bar 456))<br><br>(process-plist (get-process \"shell\"))<br>",
    "demo_result": "(foo 123 bar 456)"
  },
  {
    "name": "set-process-query-on-exit-flag",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(set-process-query-on-exit-flag (get-process \"shell\") nil)<br>",
    "demo_result": "nil"
  },
  {
    "name": "set-process-sentinel",
    "demo_src": "(set-process-sentinel<br> (start-process \"sleep\" nil \"sleep\" \"3\")<br> (lambda (process event)<br>   (message \"Process: %s had the event '%s'\" process event)))<br>",
    "demo_result": "(lambda<br>  (process event)<br>  (message \"Process: %s had the event '%s'\" process event))"
  },
  {
    "name": "set-syntax-table",
    "demo_src": "(with-temp-buffer<br>  (vector<br>   (string (char-syntax ?\\{))<br>   (progn<br>     ;; {} is not a pair of parens in Emacs Lisp<br>     (set-syntax-table emacs-lisp-mode-syntax-table)<br>     (string (char-syntax ?\\{)))))<br>",
    "demo_result": "[\"(\" \"_\"]"
  },
  {
    "name": "set-transient-map",
    "demo_src": "(set-transient-map<br> (let ((map (make-sparse-keymap)))<br>   (define-key map \"a\" (lambda () (interactive) (message \"=> a\")))<br>   (define-key map \"b\" (lambda () (interactive) (message \"=> b\")))<br>   map))<br>",
    "demo_result": "(defun counter ()<br>  (interactive)<br>  (let* ((i 0)<br>         (msg (lambda () (message \"Use <up> and <down> to adjust: i = %d\" i))))<br>    (funcall msg)<br>    (set-transient-map<br>     (let ((map (make-sparse-keymap)))<br>       (define-key map [up] (lambda () (interactive) (cl-incf i) (funcall msg)))<br>       (define-key map [down] (lambda () (interactive) (cl-decf i) (funcall msg)))<br>       map)<br>     (lambda ()<br>       (member (this-command-keys-vector) '([up] [down])))<br>     (lambda ()<br>       (message \"Exiting: i = %d\" i)))))<br>"
  },
  {
    "name": "set-window-margins",
    "demo_src": "(set-window-margins (selected-window) 40 40)<br>",
    "demo_result": "t"
  },
  {
    "name": "setcar",
    "demo_src": "(let ((x (cons 1 2)))<br>  (setcar x 100)<br>  x)<br>",
    "demo_result": "(100 . 2)"
  },
  {
    "name": "setcdr",
    "demo_src": "(let ((x (cons 1 2)))<br>  (setcdr x 200)<br>  x)<br>",
    "demo_result": "(1 . 200)"
  },
  {
    "name": "setenv",
    "demo_src": "(setenv \"EMACS_VERSION\" emacs-version)<br>",
    "demo_result": "\"26.1\""
  },
  {
    "name": "setf",
    "demo_src": "(let ((numbers (list 1 2 3)))<br>  (setf (elt numbers 1) 200)<br>  numbers)<br><br>",
    "demo_result": "(1 200 3)"
  },
  {
    "name": "setplist",
    "demo_src": "(setplist 'foo '(a 1 b (2 3) c nil))<br>",
    "demo_result": "(a 1 b<br>   (2 3)<br>   c nil)"
  },
  {
    "name": "setq",
    "demo_src": "(let ((x 0))<br>  (setq x 42)<br>  x)<br>",
    "demo_result": "42"
  },
  {
    "name": "sha1",
    "demo_src": "(sha1 \"hello\")<br>",
    "demo_result": "\"aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d\""
  },
  {
    "name": "shell-command-to-string",
    "demo_src": "(shell-command-to-string \"echo hello world\")<br>",
    "demo_result": "\"hello world\\n\""
  },
  {
    "name": "shell-quote-argument",
    "demo_src": "(shell-quote-argument \"Library/Application Support\")<br>",
    "demo_result": "\"Library/Application\\\\ Support\""
  },
  {
    "name": "should",
    "demo_src": "(should (= (expt 2 10) 1024))<br>",
    "demo_result": "t"
  },
  {
    "name": "should-error",
    "demo_src": "(should-error (/ 1 0) :type 'arith-error)<br>",
    "demo_result": "(arith-error)"
  },
  {
    "name": "signal",
    "demo_src": "(signal 'wrong-type-argument '(numberp \"string\"))<br>",
    "demo_result": ""
  },
  {
    "name": "signal-process",
    "demo_src": ";; Start the shell process if not already<br>(shell)<br><br>(signal-process (get-process \"shell\") 'SIGHUP)<br>",
    "demo_result": ""
  },
  {
    "name": "sin",
    "demo_src": "(sin (/ float-pi 2))<br>",
    "demo_result": "1.0"
  },
  {
    "name": "sit-for",
    "demo_src": "(sit-for 3)<br>",
    "demo_result": "t"
  },
  {
    "name": "sleep-for",
    "demo_src": "(sleep-for 3)<br>",
    "demo_result": "nil"
  },
  {
    "name": "slot-boundp",
    "demo_src": "(defclass person ()<br>  ((name :initarg :name<br>         :initform user-full-name)<br>   (birthday :initarg :birthday))<br>  \"A person class.\")<br><br>(list (slot-boundp (person) :name)<br>      (slot-boundp (person) :birthday))<br>",
    "demo_result": "(t nil)"
  },
  {
    "name": "slot-exists-p",
    "demo_src": "(defclass circle ()<br>  ((radius :initarg :radius))<br>  \"A circle class.\")<br><br>(list (slot-exists-p 'circle 'radius)<br>      (slot-exists-p (circle :radius 10) 'radius))<br>",
    "demo_result": "(0 0)"
  },
  {
    "name": "sort",
    "demo_src": "(let ((num '(1 3 2 6 5 4 0)))<br>  (sort num #'<))<br>",
    "demo_result": "(0 1 2 3 4 5 6)"
  },
  {
    "name": "sort-regexp-fields",
    "demo_src": "(with-temp-buffer<br>  (insert \"d, a, c, b,\")<br>  (sort-regexp-fields nil \".,\" \"\\\\&\" (point-min) (point-max))<br>  (buffer-string))<br>",
    "demo_result": "\"a, b, c, d,\""
  },
  {
    "name": "soundex",
    "demo_src": "(soundex \"Rubin\")<br>",
    "demo_result": "\"R150\""
  },
  {
    "name": "special-form-p",
    "demo_src": "(list<br> :if   (special-form-p 'if)<br> :when (special-form-p 'when))<br>",
    "demo_result": "(:if t :when nil)"
  },
  {
    "name": "special-variable-p",
    "demo_src": "(special-variable-p 'emacs-version)<br>",
    "demo_result": "t"
  },
  {
    "name": "split-string",
    "demo_src": "(split-string \"The   quick brown fox.\" \" +\")<br>",
    "demo_result": "(\"The\" \"quick\" \"brown\" \"fox.\")"
  },
  {
    "name": "split-string-and-unquote",
    "demo_src": "(split-string-and-unquote \"-o \\\"foo bar.txt\\\"\")<br>",
    "demo_result": "(\"-o\" \"foo bar.txt\")"
  },
  {
    "name": "sqrt",
    "demo_src": "(sqrt 4)<br>",
    "demo_result": "2.0"
  },
  {
    "name": "start-process",
    "demo_src": "(start-process \"sleep\" \"*sleep*\" \"sleep\" \"5\")<br>",
    "demo_result": "#<process sleep>"
  },
  {
    "name": "start-process-shell-command",
    "demo_src": "(start-process-shell-command \"sleep\" \"*sleep*\" \"sleep 5 && echo wake\")<br>",
    "demo_result": "#<process sleep>"
  },
  {
    "name": "stem-english",
    "demo_src": "(stem-english \"mesmerizing\")<br>",
    "demo_result": "(\"mesmer\" \"mesmeriz\" \"mesmerize\" \"mesmerizing\")"
  },
  {
    "name": "store-substring",
    "demo_src": "(let ((a-str \"hello\"))<br>  (store-substring a-str 0 ?H)<br>  a-str)<br>",
    "demo_result": "\"Hello\""
  },
  {
    "name": "stream",
    "demo_src": "(stream-first (stream '(1 2 3)))<br>",
    "demo_result": "1"
  },
  {
    "name": "stream-append",
    "demo_src": "(seq-into (stream-append (stream '(1 2 3)) (stream '(4 5 6)))<br>          'list)<br>",
    "demo_result": "(1 2 3 4 5 6)"
  },
  {
    "name": "stream-concatenate",
    "demo_src": "(let ((stream1 (stream '(1 2 3)))<br>      (stream2 (stream '(4 5 6))))<br>  (seq-into (stream-concatenate (stream (list stream1 stream2)))<br>            'list))<br>",
    "demo_result": "(1 2 3 4 5 6)"
  },
  {
    "name": "stream-cons",
    "demo_src": "(cl-labels ((fib (a b) (stream-cons a (fib b (+ a b)))))<br>  (let ((stream (fib 0 1)))<br>    (seq-into (seq-take stream 11) 'list)))<br>",
    "demo_result": "(0 1 1 2 3 5 8 13 21 34 55)"
  },
  {
    "name": "stream-empty-p",
    "demo_src": "(stream-empty-p (stream-rest (stream '(1))))<br>",
    "demo_result": "t"
  },
  {
    "name": "stream-first",
    "demo_src": "(stream-first (stream '(1 2 3)))<br>",
    "demo_result": "1"
  },
  {
    "name": "stream-flush",
    "demo_src": "(let ((i 0))<br>  (cl-labels ((fun<br>               ()<br>               (stream-make<br>                (when (< i 10)<br>                  (setq i (1+ i))<br>                  ;; do some side effects<br>                  (message \"=> %d\" i)<br>                  (cons nil (fun))))))<br>    (stream-flush (fun))))<br>",
    "demo_result": ""
  },
  {
    "name": "stream-from-iterator",
    "demo_src": "(let* ((iter-fn (iter-lambda ()<br>                  (let ((a 0)<br>                        (b 1))<br>                    (while t<br>                      (iter-yield a)<br>                      (cl-psetq a b<br>                                b (+ a b))))))<br>       (iter (funcall iter-fn))<br>       (stream (stream-from-iterator iter)))<br>  (seq-into (seq-take stream 11) 'list))<br>",
    "demo_result": "(0 1 1 2 3 5 8 13 21 34 55)"
  },
  {
    "name": "stream-iterate-function",
    "demo_src": "(seq-into (seq-take (stream-iterate-function #'1+ 0)<br>                    10)<br>          'list)<br>",
    "demo_result": "(0 1 2 3 4 5 6 7 8 9)"
  },
  {
    "name": "stream-of-directory-files",
    "demo_src": ";; How many Emacs Lisp files do I have in ~/.emacs.d?<br>(seq-length<br> (stream-of-directory-files<br>  user-emacs-directory nil nil<br>  (lambda (dir)<br>    (let ((basename (file-name-nondirectory dir)))<br>      (not (or (member basename '(\".git\" \"var\" \"etc\" \".cask\" \"el-get\"))<br>               ;; elpa-26.1, elpa-26.2<br>               (string-prefix-p \"elpa\" basename)))))<br>  nil<br>  (lambda (file)<br>    (equal \"el\" (file-name-extension file)))))<br>",
    "demo_result": "80"
  },
  {
    "name": "stream-pop",
    "demo_src": "(let ((stream (stream-range 1 10))<br>      result)<br>  (while (not (stream-empty-p stream))<br>    (push (stream-pop stream) result))<br>  (nreverse result))<br>",
    "demo_result": "(1 2 3 4 5 6 7 8 9)"
  },
  {
    "name": "stream-range",
    "demo_src": "(let ((stream (stream-range 0))<br>      result)<br>  (dotimes (_ 10 (nreverse result))<br>    (push (stream-first stream) result)<br>    (setq stream (stream-rest stream))))<br>",
    "demo_result": "(0 1 2 3 4 5 6 7 8 9)"
  },
  {
    "name": "stream-regexp",
    "demo_src": "(with-temp-buffer<br>  (insert \"<2018-11-30>\")<br>  (goto-char (point-min))<br>  (let ((stream (stream-regexp (current-buffer) \"[0-9]+\")))<br>    (seq-into (seq-map (lambda (match)<br>                         (apply #'buffer-substring match))<br>                       stream)<br>              'list)))<br>",
    "demo_result": "(\"2018\" \"11\" \"30\")"
  },
  {
    "name": "stream-rest",
    "demo_src": "(stream-first (stream-rest (stream '(1 2 3))))<br>",
    "demo_result": "2"
  },
  {
    "name": "stream-scan",
    "demo_src": ";; (* 1 2 3 4 5)<br>;; (* (* (* (* (* 1 1) 2) 3) 4) 5)<br>(seq-elt (stream-scan #'* 1 (stream-range 1))<br>         5)<br>",
    "demo_result": "120"
  },
  {
    "name": "streamp",
    "demo_src": "(streamp (stream '(1 2 3)))<br>",
    "demo_result": "t"
  },
  {
    "name": "string",
    "demo_src": "(string ?a ?b ?c)<br>",
    "demo_result": "\"abc\""
  },
  {
    "name": "string-as-multibyte",
    "demo_src": "(string-as-multibyte (string-as-unibyte \"λ\"))<br>",
    "demo_result": "\"λ\""
  },
  {
    "name": "string-as-unibyte",
    "demo_src": "(mapcar #'identity (string-as-unibyte \"λ\"))<br>",
    "demo_result": "(206 187)"
  },
  {
    "name": "string-blank-p",
    "demo_src": "(string-blank-p \" \")<br>",
    "demo_result": "0"
  },
  {
    "name": "string-bytes",
    "demo_src": ";; #x3bb, #xCE #xBB<br>(string-bytes \"λ\")<br>",
    "demo_result": "2"
  },
  {
    "name": "string-distance",
    "demo_src": "(string-distance \"kitten\" \"sitting\")<br>",
    "demo_result": "3"
  },
  {
    "name": "string-empty-p",
    "demo_src": "(string-empty-p \"\")<br>",
    "demo_result": "t"
  },
  {
    "name": "string-join",
    "demo_src": "(string-join '(\"a\" \"b\" \"c\") \"-\")<br>",
    "demo_result": "\"a-b-c\""
  },
  {
    "name": "string-match",
    "demo_src": "(let ((string \"Today is <2018-11-07>.\"))<br>  (when (string-match \"<\\\\([-0-9]+\\\\)>\" string)<br>    (match-string 1 string)))<br>",
    "demo_result": "\"2018-11-07\""
  },
  {
    "name": "string-match-p",
    "demo_src": "(list (string-match-p \"world\" \"hello world\")<br>      (string-match-p \"12345\" \"hello world\"))<br>",
    "demo_result": "(6 nil)"
  },
  {
    "name": "string-or-null-p",
    "demo_src": "(mapcar #'string-or-null-p '(\"\" nil 42 t))<br>",
    "demo_result": "(t t nil nil)"
  },
  {
    "name": "string-prefix-p",
    "demo_src": "(string-prefix-p \"Sat\" \"Saturday night plans\")<br>",
    "demo_result": "t"
  },
  {
    "name": "string-remove-prefix",
    "demo_src": "(string-remove-prefix \"=> \" \"=> Hello <=\")<br>",
    "demo_result": "\"Hello <=\""
  },
  {
    "name": "string-remove-suffix",
    "demo_src": "(string-remove-suffix \" <=\" \"=> Hello <=\")<br>",
    "demo_result": "\"=> Hello\""
  },
  {
    "name": "string-suffix-p",
    "demo_src": "(string-suffix-p \"!\" \"Cats are the best!\")<br>",
    "demo_result": "t"
  },
  {
    "name": "string-to-char",
    "demo_src": "(string-to-char \"abc\")<br>",
    "demo_result": "97"
  },
  {
    "name": "string-to-list",
    "demo_src": "(string-to-list \"abc\")<br>",
    "demo_result": "(97 98 99)"
  },
  {
    "name": "string-to-multibyte",
    "demo_src": ";; λ, #x3bb, #xCE #xBB<br>(string-to-multibyte \"\\u03BB\")<br>",
    "demo_result": "\"λ\""
  },
  {
    "name": "string-to-number",
    "demo_src": "(string-to-number \"42\")<br>",
    "demo_result": "42"
  },
  {
    "name": "string-to-syntax",
    "demo_src": "(string-to-syntax \"()\")<br>",
    "demo_result": "(4 . 41)"
  },
  {
    "name": "string-to-unibyte",
    "demo_src": ";; FIXME: I don't understand this function<br>",
    "demo_result": ""
  },
  {
    "name": "string-to-vector",
    "demo_src": "(string-to-vector \"hello\")<br>",
    "demo_result": "[104 101 108 108 111]"
  },
  {
    "name": "string-trim",
    "demo_src": "(string-trim \" hello \")<br>",
    "demo_result": "\"hello\""
  },
  {
    "name": "string-trim-left",
    "demo_src": "(string-trim-left \" hello \")<br>",
    "demo_result": "\"hello \""
  },
  {
    "name": "string-trim-right",
    "demo_src": "(string-trim-right \" hello \")<br>",
    "demo_result": "\" hello\""
  },
  {
    "name": "string-version-lessp",
    "demo_src": "(string-version-lessp \"foo2.png\" \"foo12.png\")<br>",
    "demo_result": "t"
  },
  {
    "name": "string-width",
    "demo_src": "(string-width \"你好，世界！\")<br>",
    "demo_result": "12"
  },
  {
    "name": "string<",
    "demo_src": "(string< \"abc\" \"abd\")<br>",
    "demo_result": "t"
  },
  {
    "name": "string=",
    "demo_src": "(string= \"foo\" \"foo\")<br>",
    "demo_result": "t"
  },
  {
    "name": "string>",
    "demo_src": "(string> \"abd\" \"abc\")<br>",
    "demo_result": "t"
  },
  {
    "name": "stringp",
    "demo_src": "(stringp \"\")<br>",
    "demo_result": "t"
  },
  {
    "name": "subr-arity",
    "demo_src": "(subr-arity (symbol-function 'message))<br>",
    "demo_result": "(1 . many)"
  },
  {
    "name": "subrp",
    "demo_src": "(subrp (symbol-function 'message))<br>",
    "demo_result": "t"
  },
  {
    "name": "subst-char-in-region",
    "demo_src": "(with-temp-buffer<br>  (insert \"/Users/xcy/.emacs.d/init.el\")<br>  (subst-char-in-region (point-min) (point-max) ?/ ?!)<br>  (buffer-string))<br>",
    "demo_result": "\"!Users!xcy!.emacs.d!init.el\""
  },
  {
    "name": "subst-char-in-string",
    "demo_src": "(subst-char-in-string ?/ ?! \"/Users/xcy/.emacs.d/init.el\")<br>",
    "demo_result": "\"!Users!xcy!.emacs.d!init.el\""
  },
  {
    "name": "substitute-command-keys",
    "demo_src": "(substitute-command-keys \"To save a file, type \\\\[save-buffer].\")<br>",
    "demo_result": "\"To save a file, type C-x C-s.\""
  },
  {
    "name": "substitute-in-file-name",
    "demo_src": "(substitute-in-file-name \"$HOME/.vimrc\")<br>",
    "demo_result": "\"/Users/xcy/.vimrc\""
  },
  {
    "name": "substring",
    "demo_src": "(substring \"abcdefg\" 0 3)<br>",
    "demo_result": "\"abc\""
  },
  {
    "name": "substring-no-properties",
    "demo_src": "(substring-no-properties (propertize \"hello\" 'face 'italic))<br>",
    "demo_result": "\"hello\""
  },
  {
    "name": "suspend-emacs",
    "demo_src": ";; Emacs -> Vim -> Emacs<br>(suspend-emacs \"vim ; fg\")<br>",
    "demo_result": ""
  },
  {
    "name": "svg-circle",
    "demo_src": "(let ((svg (svg-create 100 100)))<br>  (svg-circle svg 50 50 50 :fill-color \"red\")<br>  svg)<br>",
    "demo_result": "(svg<br> ((width . 100)<br>  (height . 100)<br>  (version . \"1.1\")<br>  (xmlns . \"http://www.w3.org/2000/svg\"))<br> (circle<br>  ((cx . 50)<br>   (cy . 50)<br>   (r . 50)<br>   (fill . \"red\"))))<br>"
  },
  {
    "name": "svg-create",
    "demo_src": "(svg-create 100 100)<br>",
    "demo_result": "(svg<br> ((width . 100)<br>  (height . 100)<br>  (version . \"1.1\")<br>  (xmlns . \"http://www.w3.org/2000/svg\")))"
  },
  {
    "name": "svg-gradient",
    "demo_src": "(let ((svg (svg-create 400 400)))<br>  (svg-gradient svg \"gradient1\" 'linear '((0 . \"red\") (100 . \"blue\")))<br>  (svg-circle svg 200 200 100 :gradient \"gradient1\")<br>  svg)<br>",
    "demo_result": "(svg<br> ((width . 400)<br>  (height . 400)<br>  (version . \"1.1\")<br>  (xmlns . \"http://www.w3.org/2000/svg\"))<br> (defs nil<br>   (linearGradient<br>    ((id . \"gradient1\")<br>     (x1 . 0)<br>     (x2 . 0)<br>     (y1 . 0)<br>     (y2 . 1))<br>    (stop<br>     ((offset . \"0%\")<br>      (stop-color . \"red\")))<br>    (stop<br>     ((offset . \"100%\")<br>      (stop-color . \"blue\")))))<br> (circle<br>  ((cx . 200)<br>   (cy . 200)<br>   (r . 100)<br>   (x1 . 0)<br>   (x2 . 0)<br>   (y1 . 0)<br>   (y2 . 1)<br>   (fill . \"url(#gradient1)\"))))<br>"
  },
  {
    "name": "svg-image",
    "demo_src": "(svg-image (svg-create 100 100))<br>",
    "demo_result": "(image :type svg :data \"<svg width=\\\"100\\\" height=\\\"100\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"></svg>\" :scale 1)"
  },
  {
    "name": "svg-insert-image",
    "demo_src": "(let ((svg (svg-create 300 200)))<br>  (svg-rectangle svg 0 0 \"100%\" \"100%\" :fill-color \"red\")<br>  (svg-circle svg 150 100 80 :fill-color \"green\")<br>  (svg-text svg \"SVG\"<br>            :font-size 60<br>            :text-anchor \"middle\"<br>            :x 150<br>            :y 125<br>            :fill-color \"white\")<br>  (with-current-buffer (generate-new-buffer \"*SVG*\")<br>    (svg-insert-image svg)<br>    (display-buffer (current-buffer)))<br>  nil)<br>",
    "demo_result": "nil"
  },
  {
    "name": "svg-line",
    "demo_src": "(let ((svg (svg-create 100 100)))<br>  (svg-line svg 0 0 100 100 :stroke-color \"red\")<br>  svg)<br>",
    "demo_result": "(svg<br> ((width . 100)<br>  (height . 100)<br>  (version . \"1.1\")<br>  (xmlns . \"http://www.w3.org/2000/svg\"))<br> (line<br>  ((x1 . 0)<br>   (x2 . 100)<br>   (y1 . 0)<br>   (y2 . 100)<br>   (stroke . \"red\"))))<br>"
  },
  {
    "name": "svg-print",
    "demo_src": "(with-temp-buffer<br>  (svg-print (svg-create 100 100))<br>  (buffer-string))<br>",
    "demo_result": "\"<svg width=\\\"100\\\" height=\\\"100\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"></svg>\""
  },
  {
    "name": "svg-rectangle",
    "demo_src": "(let ((svg (svg-create 100 100)))<br>  (svg-rectangle svg 0 0 \"100%\" \"100%\" :fill-color \"red\")<br>  svg)<br>",
    "demo_result": "(svg<br> ((width . 100)<br>  (height . 100)<br>  (version . \"1.1\")<br>  (xmlns . \"http://www.w3.org/2000/svg\"))<br> (rect<br>  ((width . \"100%\")<br>   (height . \"100%\")<br>   (x . 0)<br>   (y . 0)<br>   (fill . \"red\"))))<br>"
  },
  {
    "name": "svg-remove",
    "demo_src": "(let ((svg (svg-create 100 100)))<br>  (svg-line svg 0 0 100 100 :stroke-color \"red\" :id \"line1\")<br>  (svg-remove svg \"line1\")<br>  svg)<br>",
    "demo_result": "(svg<br> ((width . 100)<br>  (height . 100)<br>  (version . \"1.1\")<br>  (xmlns . \"http://www.w3.org/2000/svg\")))"
  },
  {
    "name": "svg-text",
    "demo_src": "(let ((svg (svg-create 300 200)))<br>  (svg-text<br>   svg \"SVG\"<br>   :font-size 60<br>   :text-anchor \"middle\"<br>   :x 150<br>   :y 125<br>   :fill-color \"white\")<br>  svg)<br>",
    "demo_result": "(svg<br> ((width . 300)<br>  (height . 200)<br>  (version . \"1.1\")<br>  (xmlns . \"http://www.w3.org/2000/svg\"))<br> (text<br>  ((y . 125)<br>   (x . 150)<br>   (text-anchor . \"middle\")<br>   (font-size . 60)<br>   (fill . \"white\"))<br>  \"SVG\"))<br>"
  },
  {
    "name": "symbol-file",
    "demo_src": "(symbol-file 'pcase)<br>",
    "demo_result": "\"/Users/xcy/src/emacs-mac/lisp/emacs-lisp/pcase.elc\""
  },
  {
    "name": "symbol-function",
    "demo_src": "(symbol-function '+)<br>",
    "demo_result": "#<subr +>"
  },
  {
    "name": "symbol-name",
    "demo_src": "(symbol-name 'foo)<br>",
    "demo_result": "\"foo\""
  },
  {
    "name": "symbol-plist",
    "demo_src": "(symbol-plist 'arith-error)<br>",
    "demo_result": "(error-conditions<br> (arith-error error)<br> error-message \"Arithmetic error\")"
  },
  {
    "name": "symbol-value",
    "demo_src": "(symbol-value (intern \"emacs-version\"))<br>",
    "demo_result": "\"26.1\""
  },
  {
    "name": "symbolp",
    "demo_src": "(symbolp 'foo)<br>",
    "demo_result": "t"
  },
  {
    "name": "syntax-after",
    "demo_src": "(with-temp-buffer<br>  (insert \"()\")<br>  ;; the temporarily buffer uses standard-syntax-table<br>  (syntax-after (point-min)))<br><br>;; (string-to-syntax \"()\")<br>;; => (4 . 41)<br>",
    "demo_result": "(4 . 41)"
  },
  {
    "name": "syntax-class",
    "demo_src": "(with-temp-buffer<br>  (insert \"()\")<br>  (syntax-class (syntax-after (point-min))))<br><br>;; (string-to-syntax \"(\")<br>;; => (4)<br>",
    "demo_result": "4"
  },
  {
    "name": "system-name",
    "demo_src": "(system-name)<br>",
    "demo_result": "\"Chunyangs-MacBook-Air.local\""
  },
  {
    "name": "tan",
    "demo_src": "(tan (/ float-pi 4))<br>",
    "demo_result": "0.9999999999999999"
  },
  {
    "name": "temporary-file-directory",
    "demo_src": "(list :local<br>      (temporary-file-directory)<br>      :remote<br>      (let ((default-directory \"/ssh:root@192.168.8.1:\"))<br>        (temporary-file-directory)))<br>",
    "demo_result": "(:local \"/var/folders/7f/s191h4q97p90374yw15ssrs00000gn/T/\" :remote \"/ssh:root@192.168.8.1:/tmp\")"
  },
  {
    "name": "terminal-list",
    "demo_src": "(terminal-list)<br>",
    "demo_result": "(#<terminal 1 on Mac>)"
  },
  {
    "name": "terminal-name",
    "demo_src": "(terminal-name)<br>",
    "demo_result": "\"Mac\""
  },
  {
    "name": "terpri",
    "demo_src": "(terpri)<br>",
    "demo_result": "\"\\n\""
  },
  {
    "name": "test-completion",
    "demo_src": "(test-completion \"bar\" '(\"foo\" \"bar\" \"baz\"))<br>",
    "demo_result": "t"
  },
  {
    "name": "text-property-any",
    "demo_src": "(let ((s (propertize<br>          (concat (propertize \"alice\" 'sender t)<br>                  (propertize \" => \" 'separator t)<br>                  (propertize \"bob\" 'receiver t))<br>          'message t)))<br>  (text-property-any 0 (length s) 'separator t s))<br>",
    "demo_result": "5"
  },
  {
    "name": "text-property-not-all",
    "demo_src": "(let ((s (propertize<br>          (concat (propertize \"alice\" 'sender t)<br>                  (propertize \" => \" 'separator t)<br>                  (propertize \"bob\" 'receiver t))<br>          'message t)))<br>  (text-property-not-all 0 (length s) 'sender t s))<br>",
    "demo_result": "5"
  },
  {
    "name": "text-property-search-backward",
    "demo_src": "(with-temp-buffer<br>  (insert (format \"<< %s, %s, %s >>\"<br>                  (propertize \"foo\" 'face 'bold)<br>                  (propertize \"bar\" 'face 'italic)<br>                  (propertize \"baz\" 'face 'bold)))<br>  (cl-loop with match<br>           while (setq match (text-property-search-backward 'face 'bold t))<br>           collect (buffer-substring (prop-match-beginning match)<br>                                     (prop-match-end match))))<br>",
    "demo_result": "(#(\"baz\" 0 3<br>   (face bold))<br> #(\"foo\" 0 3<br>   (face bold)))"
  },
  {
    "name": "text-property-search-forward",
    "demo_src": "(with-temp-buffer<br>  (insert<br>   (replace-regexp-in-string<br>    (rx (or \"bold\" \"italic\"))<br>    (lambda (s)<br>      (pcase s<br>        (\"bold\" (propertize \"bold\" 'face 'bold))<br>        (\"italic\" (propertize \"italic\" 'face 'italic))))<br>    \"This is a bold and here's bolditalic and this is the end.\"))<br>  (goto-char (point-min))<br>  (cl-loop with match<br>           while (setq match (text-property-search-forward 'face nil nil))<br>           collect (buffer-substring (prop-match-beginning match)<br>                                     (prop-match-end match))))<br>",
    "demo_result": "(#(\"bold\" 0 4<br>   (face bold))<br> #(\"bold\" 0 4<br>   (face bold))<br> #(\"italic\" 0 6<br>   (face italic)))"
  },
  {
    "name": "thing-at-point",
    "demo_src": "(thing-at-point 'symbol)<br>",
    "demo_result": ""
  },
  {
    "name": "thing-at-point-looking-at",
    "demo_src": "(with-temp-buffer<br>  (insert \"Today is <2019-10-30>.\")<br>  ;;       123456789abcdef<br>  (goto-char #xf)<br>  (when (thing-at-point-looking-at<br>         (rx (+ (in \"0-9-\")))<br>         ;; limit to current line<br>         (max (- (point) (line-beginning-position))<br>              (- (line-end-position) (point))))<br>    (match-string 0)))<br>",
    "demo_result": "\"2019-10-30\""
  },
  {
    "name": "thread-first",
    "demo_src": "(thread-first 5<br>  (+ 20)<br>  (/ 25)<br>  -<br>  (+ 40))<br>",
    "demo_result": "39"
  },
  {
    "name": "thread-join",
    "demo_src": "(thread-join<br> (make-thread<br>  (lambda ()<br>    (sit-for 3))))<br>",
    "demo_result": "nil"
  },
  {
    "name": "thread-last",
    "demo_src": "(thread-last 5<br>  (+ 20)<br>  (/ 25)<br>  -<br>  (+ 40))<br>",
    "demo_result": "39"
  },
  {
    "name": "threadp",
    "demo_src": "(threadp (current-thread))<br>",
    "demo_result": "t"
  },
  {
    "name": "thunk-delay",
    "demo_src": "(let ((delayed (thunk-delay (message \"this message is delayed\"))))<br>  (thunk-force delayed))<br>",
    "demo_result": "\"this message is delayed\""
  },
  {
    "name": "thunk-evaluated-p",
    "demo_src": "(let ((delayed (thunk-delay (message \"this message is delayed\"))))<br>  (thunk-force delayed)<br>  (thunk-evaluated-p delayed))<br>",
    "demo_result": "t"
  },
  {
    "name": "thunk-force",
    "demo_src": "(let ((x 1))<br>  (let ((delayed (thunk-delay (setq x (1+ x)))))<br>    (list x<br>          (thunk-force delayed)<br>          (thunk-force delayed)<br>          (thunk-force delayed))))<br>",
    "demo_result": "(1 2 2 2)"
  },
  {
    "name": "thunk-let",
    "demo_src": "(thunk-let ((x (/ 1 0)))<br>  42)<br>",
    "demo_result": "42"
  },
  {
    "name": "time-add",
    "demo_src": "(time-add nil 3600)<br>",
    "demo_result": "(23532 41872 521709 0)"
  },
  {
    "name": "time-convert",
    "demo_src": "(time-convert (current-time) 'integer)<br>",
    "demo_result": "1577874377"
  },
  {
    "name": "time-equal-p",
    "demo_src": "(time-equal-p<br> (encode-time '(29 31 17 30 4 2019 2 t 7200))<br> '(23752 27217))<br>",
    "demo_result": "t"
  },
  {
    "name": "time-less-p",
    "demo_src": "(time-less-p before-init-time after-init-time)<br>",
    "demo_result": "t"
  },
  {
    "name": "time-subtract",
    "demo_src": "(let ((t1 (current-time)))<br>  (sit-for 1)<br>  (message \"Elapsed time: %fs\"<br>           (float-time (time-subtract nil t1))))<br>",
    "demo_result": "\"Elapsed time: 1.006051s\""
  },
  {
    "name": "time-to-day-in-year",
    "demo_src": "(time-to-day-in-year (current-time))<br>",
    "demo_result": "319"
  },
  {
    "name": "time-to-days",
    "demo_src": "(time-to-days (current-time))<br>",
    "demo_result": "737013"
  },
  {
    "name": "time-to-seconds",
    "demo_src": "(time-to-seconds)<br>",
    "demo_result": "1542230349.328713"
  },
  {
    "name": "timerp",
    "demo_src": "(timerp (car timer-list))<br>",
    "demo_result": "t"
  },
  {
    "name": "tooltip-show",
    "demo_src": "(tooltip-show \"Emacs is addictive!\")<br>",
    "demo_result": "nil"
  },
  {
    "name": "tq-close",
    "demo_src": "(let ((tq (tq-create (start-process \"cat\" \"*cat*\" \"cat\"))))<br>  (tq-close tq))<br>",
    "demo_result": "t"
  },
  {
    "name": "tq-create",
    "demo_src": "(tq-create (start-process \"cat\" \"*cat*\" \"cat\"))<br>",
    "demo_result": "(nil #<process cat> . #<buffer  tq-temp-cat>)"
  },
  {
    "name": "tq-enqueue",
    "demo_src": "(let ((tq (tq-create (start-process \"upcase\" \"*upcase*\" \"tr\" \"a-z\" \"A-Z\"))))<br>  (tq-enqueue tq<br>              (concat user-full-name \"\\n\")<br>              \"^$\"<br>              nil<br>              (lambda (_ response)<br>                (message \"Result: %s\" response)))<br>  (sit-for .1)<br>  (tq-close tq))<br>",
    "demo_result": ""
  },
  {
    "name": "translate-region",
    "demo_src": "(with-temp-buffer<br>  (insert \"Hello World\")<br>  ;; Reverse case, a -> A and A -> a<br>  (translate-region<br>   (point-min)<br>   (point-max)<br>   (apply #'string<br>          (mapcar (lambda (char)<br>                    (cond ((<= ?a char ?z) (- char 32))<br>                          ((<= ?A char ?Z) (+ char 32))<br>                          (t char)))<br>                  ;; ASCII code range<br>                  (number-sequence 0 255))))<br>  (buffer-string))<br>",
    "demo_result": "\"hELLO wORLD\""
  },
  {
    "name": "transpose-regions",
    "demo_src": "(with-temp-buffer<br>  (let (beg1 end1 beg2 end2)<br>    (insert \"hello\" ?\\n<br>            \"world\" ?\\n)<br>    (goto-char (point-min))<br>    (setq beg1 (line-beginning-position)<br>          end1 (line-end-position))<br><br>    (forward-line 1)<br>    (setq beg2 (line-beginning-position)<br>          end2 (line-end-position))<br>    (transpose-regions beg1 end1<br>                       beg2 end2)<br>    (buffer-string)))<br>",
    "demo_result": "\"world\\nhello\\n\""
  },
  {
    "name": "truncate",
    "demo_src": "(truncate 1.2)<br>",
    "demo_result": "1"
  },
  {
    "name": "truncate-string-to-width",
    "demo_src": "(truncate-string-to-width \"magit-diff: elisp-demos\" 18 nil nil t)<br>",
    "demo_result": "\"magit-diff: eli...\""
  },
  {
    "name": "try-completion",
    "demo_src": "(try-completion \"b\" '(\"foo\" \"baz\" \"bar\"))<br>",
    "demo_result": "\"ba\""
  },
  {
    "name": "type-of",
    "demo_src": "(type-of 42)<br>",
    "demo_result": "integer"
  },
  {
    "name": "ucs-names",
    "demo_src": "(hash-table-count (ucs-names))<br>",
    "demo_result": "43519"
  },
  {
    "name": "ucs-normalize-NFC-string",
    "demo_src": ";; (string ?e 769) -> (string ?é)<br>(ucs-normalize-NFC-string (string ?e 769))<br>",
    "demo_result": "\"é\""
  },
  {
    "name": "ucs-normalize-NFD-string",
    "demo_src": ";; (string ?c ?a ?f ?é) -> (string ?c ?a ?f ?e 769)<br>(ucs-normalize-NFD-string \"café\")<br>",
    "demo_result": "\"café\""
  },
  {
    "name": "ucs-normalize-NFKC-string",
    "demo_src": "(ucs-normalize-NFKC-string \"ﬃ\")<br>",
    "demo_result": "\"ffi\""
  },
  {
    "name": "ucs-normalize-NFKD-string",
    "demo_src": "(ucs-normalize-NFKD-string \"⁵\")<br>",
    "demo_result": "\"5\""
  },
  {
    "name": "unibyte-string",
    "demo_src": ";; λ, #x3bb, #xCE #xBB<br>(string-as-multibyte (unibyte-string #xCE #xBB))<br>",
    "demo_result": "\"λ\""
  },
  {
    "name": "unintern",
    "demo_src": "(let ((a-obarray (make-vector 3 0)))<br>  (intern \"foo\" a-obarray)<br>  (unintern \"foo\" a-obarray))<br>",
    "demo_result": "t"
  },
  {
    "name": "unless",
    "demo_src": "(unless nil 123)<br>",
    "demo_result": "123"
  },
  {
    "name": "unwind-protect",
    "demo_src": "(let ((buffer (get-buffer-create \"*temp*\")))<br>  (with-current-buffer buffer<br>    (unwind-protect<br>        (foo-bar-baz-aux)<br>      (kill-buffer buffer))))<br>",
    "demo_result": ""
  },
  {
    "name": "upcase",
    "demo_src": "(upcase \"Hello World\")<br>",
    "demo_result": "\"HELLO WORLD\""
  },
  {
    "name": "upcase-initials",
    "demo_src": "(upcase-initials \"The CAT in the hAt\")<br>",
    "demo_result": "\"The CAT In The HAt\""
  },
  {
    "name": "url-build-query-string",
    "demo_src": "(url-build-query-string '((name \"tom\") (age 3)))<br>",
    "demo_result": "\"name=tom&age=3\""
  },
  {
    "name": "url-copy-file",
    "demo_src": "(url-copy-file \"http://example.com\" \"index.html\")<br>",
    "demo_result": "t"
  },
  {
    "name": "url-encode-url",
    "demo_src": "(url-encode-url \"HTTPS://Google.com?q=hello world\")<br>",
    "demo_result": "\"https://google.com?q=hello%20world\""
  },
  {
    "name": "url-file-directory",
    "demo_src": "(url-file-directory<br> \"https://www.google.com/webhp?hl=en&sa=X&ved=0ahUKEwj_5qqF0sngAhXlw4sBHUT3DYcQPAgH\")<br>",
    "demo_result": "\"https://www.google.com/\""
  },
  {
    "name": "url-file-extension",
    "demo_src": "(url-file-extension \"https://github.com/rejeep/evm/blob/master/README.md?rel=xuchunyang\")<br>",
    "demo_result": "\".md\""
  },
  {
    "name": "url-file-nondirectory",
    "demo_src": "(url-file-nondirectory<br> \"https://www.google.com/webhp?hl=en&sa=X&ved=0ahUKEwj_5qqF0sngAhXlw4sBHUT3DYcQPAgH\")<br>",
    "demo_result": "\"webhp\""
  },
  {
    "name": "url-filename",
    "demo_src": "(url-filename (url-generic-parse-url \"http://localhost:8000/pkg/io/#CopyN\"))<br>",
    "demo_result": "\"/pkg/io/\""
  },
  {
    "name": "url-generic-parse-url",
    "demo_src": "(url-generic-parse-url \"https://www.gnu.org/software/emacs/\")<br>",
    "demo_result": "#s(url \"https\" nil nil \"www.gnu.org\" nil \"/software/emacs/\" nil nil t nil t t)"
  },
  {
    "name": "url-hexify-string",
    "demo_src": "(url-hexify-string \"hello world\")<br>",
    "demo_result": "\"hello%20world\""
  },
  {
    "name": "url-host",
    "demo_src": "(url-host (url-generic-parse-url \"http://example.com/index.html\"))<br>",
    "demo_result": "\"example.com\""
  },
  {
    "name": "url-http-user-agent-string",
    "demo_src": "(url-http-user-agent-string)<br>",
    "demo_result": "\"User-Agent: URL/Emacs Emacs/26.2 (nil; x86_64-apple-darwin18.5.0)\r\\n\""
  },
  {
    "name": "url-insert-file-contents",
    "demo_src": "(with-temp-buffer<br>  ;; (info \"(url) Disk Caching\") is breaking `url-insert-file-contents', so<br>  ;; disable cache<br>  (let ((url-request-extra-headers '((\"Pragma\" . \"no-cache\"))))<br>    (url-insert-file-contents \"http://example.com\"))<br>  (re-search-forward (rx \"<title>\" (group (1+ anything)) \"</title>\"))<br>  (match-string 1))<br>",
    "demo_result": "\"Example Domain\""
  },
  {
    "name": "url-parse-query-string",
    "demo_src": "(url-parse-query-string \"name=tom&age=3\")<br>",
    "demo_result": "((\"age\" \"3\")<br> (\"name\" \"tom\"))"
  },
  {
    "name": "url-path-and-query",
    "demo_src": "(url-path-and-query<br> (url-generic-parse-url<br>  \"https://www.google.com/webhp?hl=en&sa=X&ved=0ahUKEwj_5qqF0sngAhXlw4sBHUT3DYcQPAgH\"))<br>",
    "demo_result": "(\"/webhp\" . \"hl=en&sa=X&ved=0ahUKEwj_5qqF0sngAhXlw4sBHUT3DYcQPAgH\")"
  },
  {
    "name": "url-queue-retrieve",
    "demo_src": "(url-queue-retrieve \"http://example.com/\"<br>                    (lambda (status)<br>                      (message \"Status: %s\" status)<br>                      (display-buffer (current-buffer))))<br>",
    "demo_result": "[nil 0 1 0 1 url-queue-check-progress nil idle 0]"
  },
  {
    "name": "url-recreate-url",
    "demo_src": "(url-recreate-url (url-generic-parse-url \"https://www.gnu.org/software/emacs/\"))<br>",
    "demo_result": "\"https://www.gnu.org/software/emacs/\""
  },
  {
    "name": "url-retrieve",
    "demo_src": "(url-retrieve \"http://example.com\"<br>              (lambda (status start-time)<br>                (message \"The request is completed in %f seconds\"<br>                         (float-time (time-subtract nil start-time)))<br>                (display-buffer (current-buffer)))<br>              `(,(current-time))<br>              'silent<br>              'inhibit-cookies)<br>",
    "demo_result": "#<buffer  *http example.com:80*-426008>"
  },
  {
    "name": "url-retrieve-synchronously",
    "demo_src": "(url-retrieve-synchronously \"http://example.com/\")<br>",
    "demo_result": "#<buffer  *http example.com:80*-771275>"
  },
  {
    "name": "url-target",
    "demo_src": "(url-target<br> (url-generic-parse-url \"http://localhost:8000/pkg/io/#CopyN\"))<br>",
    "demo_result": "\"CopyN\""
  },
  {
    "name": "url-unhex-string",
    "demo_src": "(url-unhex-string \"hello%20world\")<br>",
    "demo_result": "\"hello world\""
  },
  {
    "name": "user-error",
    "demo_src": "(user-error \"It's all your fault, not mime\")<br>",
    "demo_result": ""
  },
  {
    "name": "user-full-name",
    "demo_src": "(let ((user-full-name \"Hello Kitty\"))<br>  (user-full-name))<br>",
    "demo_result": "\"Hello Kitty\""
  },
  {
    "name": "user-login-name",
    "demo_src": "(user-login-name)<br>",
    "demo_result": "\"xcy\""
  },
  {
    "name": "user-real-login-name",
    "demo_src": "(user-real-login-name)<br>",
    "demo_result": "\"xcy\""
  },
  {
    "name": "user-real-uid",
    "demo_src": "(user-real-uid)<br>",
    "demo_result": "501"
  },
  {
    "name": "user-uid",
    "demo_src": "(user-uid)<br>",
    "demo_result": "501"
  },
  {
    "name": "vconcat",
    "demo_src": "(vconcat '(a b) \"cd\" [e f])<br>",
    "demo_result": "[a b 99 100 e f]"
  },
  {
    "name": "vector",
    "demo_src": "(vector 1 2 3)<br>",
    "demo_result": "[1 2 3]"
  },
  {
    "name": "vectorp",
    "demo_src": "(vectorp [1 2 3])<br>",
    "demo_result": "t"
  },
  {
    "name": "verify-visited-file-modtime",
    "demo_src": "(verify-visited-file-modtime)<br>",
    "demo_result": "t"
  },
  {
    "name": "version-to-list",
    "demo_src": "(version-to-list \"26.1\")<br>",
    "demo_result": "(26 1)"
  },
  {
    "name": "version<",
    "demo_src": "(version< \"24.5\" \"26.1\")<br>",
    "demo_result": "t"
  },
  {
    "name": "version<=",
    "demo_src": "(version<= \"24.5\" \"26.1\")<br>",
    "demo_result": "t"
  },
  {
    "name": "version=",
    "demo_src": "(version= \"24.5\" \"24.5\")<br>",
    "demo_result": "t"
  },
  {
    "name": "visible-frame-list",
    "demo_src": "(visible-frame-list)<br>",
    "demo_result": "(#<frame /Users/xcy/src/elisp-demos/elisp-demos.org 0x1049a21e8>)"
  },
  {
    "name": "websocket-open",
    "demo_src": "(websocket-open<br> \"wss://echo.websocket.org/\"<br> :on-open<br> (lambda (ws)<br>   (message \"Connected\")<br>   (websocket-send-text ws \"Hello, WebSocket!\"))<br> :on-message<br> (lambda (ws frame)<br>   (message \"Receive: %s\" (websocket-frame-text frame))<br>   (websocket-close ws))<br> :on-close<br> (lambda (ws)<br>   (message \"Closed\")))<br>",
    "demo_result": ""
  },
  {
    "name": "websocket-server",
    "demo_src": "(let ((wss<br>       (websocket-server<br>        8888<br>        :on-open<br>        (lambda (ws)<br>          (message \"[Server] on-open\"))<br>        :on-message<br>        (lambda (ws frame)<br>          (message \"[Server] on-message\")<br>          (message \"[Server] Received %S from client\" (websocket-frame-text frame))<br>          (message \"[Server] Sending %S to client\" (upcase (websocket-frame-text frame)))<br>          (websocket-send-text ws (upcase (websocket-frame-text frame))))<br>        :on-close<br>        (lambda (ws)<br>          (message \"[Server] on-close\")))))<br>  (websocket-open<br>   \"ws://localhost:8888/\"<br>   :on-open<br>   (lambda (ws)<br>     (message \"[Client] on-open\")<br>     (message \"[Client] Sending %S to server\" \"Hello, WebSocket!\")<br>     (websocket-send-text ws \"Hello, WebSocket!\"))<br>   :on-message<br>   (lambda (ws frame)<br>     (message \"[Client] Received %S from server\" (websocket-frame-text frame))<br>     ;; Close the client<br>     (websocket-close ws))<br>   :on-close<br>   (lambda (ws)<br>     (message \"[Client] on-close\")))<br>  (run-with-idle-timer<br>   1 nil<br>   (lambda ()<br>     (message \"Cleanup, closing the server\")<br>     (websocket-server-close wss))))<br>",
    "demo_result": ""
  },
  {
    "name": "when",
    "demo_src": "(when t 123)<br>",
    "demo_result": "123"
  },
  {
    "name": "when-let",
    "demo_src": "(when-let ((match-index (string-match \"d\" \"abcd\")))<br>  (+ match-index 2))<br>",
    "demo_result": "5"
  },
  {
    "name": "when-let*",
    "demo_src": "(when-let* ((match-index (string-match \"d\" \"abcd\")))<br>  (+ match-index 2))<br>",
    "demo_result": "5"
  },
  {
    "name": "where-is-internal",
    "demo_src": "(where-is-internal 'save-buffer)<br>",
    "demo_result": "([24 19]<br> [menu-bar file save-buffer])"
  },
  {
    "name": "while",
    "demo_src": "(let ((i 1)<br>      (sum 0))<br>  (while (<= i 100)<br>    (setq sum (+ sum i))<br>    (setq i (+ i 1)))<br>  sum)<br>",
    "demo_result": "5050"
  },
  {
    "name": "widen",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello world\")<br>  (narrow-to-region 1 6)<br>  `(:narrowed<br>    ,(buffer-string)<br>    ,@(widen)<br>    :widened<br>    ,(buffer-string)))<br>",
    "demo_result": "(:narrowed \"hello\" :widened \"hello world\")"
  },
  {
    "name": "window-frame",
    "demo_src": "(window-frame)<br>",
    "demo_result": "#<frame /Users/xcy/src/elisp-demos/elisp-demos.org 0x10495b9c8>"
  },
  {
    "name": "window-list",
    "demo_src": "(window-list)<br>",
    "demo_result": "(#<window 111 on elisp-demos.org> #<window 119 on *scratch*>)"
  },
  {
    "name": "window-live-p",
    "demo_src": "(window-live-p (selected-window))<br>",
    "demo_result": "t"
  },
  {
    "name": "window-margins",
    "demo_src": "(window-margins)<br>",
    "demo_result": "(nil)"
  },
  {
    "name": "window-minibuffer-p",
    "demo_src": "(window-minibuffer-p (minibuffer-window))<br>",
    "demo_result": "t"
  },
  {
    "name": "window-parent",
    "demo_src": "(window-parent)<br>",
    "demo_result": "#<window 43>"
  },
  {
    "name": "window-valid-p",
    "demo_src": "(window-valid-p (selected-window))<br>",
    "demo_result": "t"
  },
  {
    "name": "windowp",
    "demo_src": "(windowp (selected-window))<br>",
    "demo_result": "t"
  },
  {
    "name": "with-current-buffer",
    "demo_src": "(with-current-buffer \"*Messages*\"<br>  (current-buffer))<br>",
    "demo_result": "#<buffer *Messages*>"
  },
  {
    "name": "with-demoted-errors",
    "demo_src": "(with-demoted-errors \"Error: %S\"<br>  (/ 1 0))<br>",
    "demo_result": "nil"
  },
  {
    "name": "with-eval-after-load",
    "demo_src": "(with-eval-after-load 'dired<br>  (require 'dired-x))<br>",
    "demo_result": "dired-x"
  },
  {
    "name": "with-help-window",
    "demo_src": "(with-help-window \"*My Help Window*\"<br>  (princ \"Used keymap is help-mode-map:\")<br>  (terpri)<br>  (terpri)<br>  (prin1 help-mode-map)<br>  (terpri))<br>",
    "demo_result": "t"
  },
  {
    "name": "with-output-to-string",
    "demo_src": "(with-output-to-string<br>  (princ \"Hello World\"))<br>",
    "demo_result": "\"Hello World\""
  },
  {
    "name": "with-silent-modifications",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello\")<br>  (set-buffer-modified-p nil)<br>  (with-silent-modifications<br>    (add-text-properties (point-min) (point-max) '(display \"world\")))<br>  (buffer-modified-p))<br>",
    "demo_result": "nil"
  },
  {
    "name": "with-slots",
    "demo_src": "(defclass my-color ()<br>  ((alpha) (red) (green) (blue))<br>  \"A color class.\")<br><br>(let ((c (my-color)))<br>  (with-slots (red green blue (a alpha)) c<br>    (setq red   #x41<br>          green #x69<br>          blue  #xE1<br>          a 1.0))<br>  c)<br>",
    "demo_result": "#s(my-color 1.0 65 105 225)"
  },
  {
    "name": "with-syntax-table",
    "demo_src": "(list<br> (with-syntax-table emacs-lisp-mode-syntax-table<br>   ;; Comment starters: ‘<’<br>   (string (char-syntax ?\\;)))<br><br> (with-syntax-table text-mode-syntax-table<br>   ;; Punctuation characters: ‘.’<br>   (string (char-syntax ?\\;))))<br>",
    "demo_result": "(\"<\" \".\")"
  },
  {
    "name": "with-temp-buffer",
    "demo_src": "(with-temp-buffer<br>  (insert \"hello\")<br>  (insert \"world\")<br>  (buffer-string))<br>",
    "demo_result": "\"helloworld\""
  },
  {
    "name": "with-temp-file",
    "demo_src": "(with-temp-file (make-temp-file \"elisp-demos-\")<br>  (insert \"This will be inserted to the file.\\n\")<br>  (insert \"Peace.\\n\")<br>  42)<br>",
    "demo_result": "42"
  },
  {
    "name": "with-temp-message",
    "demo_src": "(progn (message \"The original message\")<br>       (sit-for 3)<br>       (with-temp-message \"Hello World\"<br>         (sit-for 3)))<br>",
    "demo_result": "t"
  },
  {
    "name": "with-timeout",
    "demo_src": "(with-timeout (3 (message \"You've not type any key\"))<br>  (read-char \"Type some key in 3 seconds\"))<br>",
    "demo_result": "\"You've not type any key\""
  },
  {
    "name": "write-char",
    "demo_src": "(write-char ?a)<br>",
    "demo_result": "\"a\""
  },
  {
    "name": "write-region",
    "demo_src": "(write-region \"Hello World\\n\" nil \"/tmp/tmp.txt\")<br>",
    "demo_result": "nil"
  },
  {
    "name": "ws-start",
    "demo_src": "(require 'web-server)<br><br>;; http://localhost:8888<br>(ws-start<br> (lambda (request)<br>   (process-send-string<br>    (oref request process)<br>    (let ((body \"Hello, World!\\n\"))<br>      (concat \"HTTP/1.1 200 OK\\r\\n\"<br>              \"Content-Type: text/plain; charset=UTF-8\\r\\n\"<br>              (format \"Content-Length: %d\\r\\n\" (string-bytes body))<br>              \"\\r\\n\"<br>              body))))<br> 8888)<br>",
    "demo_result": ""
  },
  {
    "name": "x-display-list",
    "demo_src": "(x-display-list)<br>",
    "demo_result": "(\"Mac\")"
  },
  {
    "name": "x-popup-dialog",
    "demo_src": "(x-popup-dialog (selected-frame) '(\"Are you ready?\" (\"Yes\" . :yes) (\"No\" . :no)))<br>",
    "demo_result": ":yes"
  },
  {
    "name": "x-popup-menu",
    "demo_src": "(x-popup-menu<br> t<br> (list \"What action?\"<br>       (cons \"\"<br>             '((\"Copy here\" . copy)<br>               (\"Move here\" . move)<br>               (\"Link here\" . link)<br>               \"--\"<br>               (\"Cancel\" . nil)))))<br>",
    "demo_result": "copy"
  },
  {
    "name": "x-server-vendor",
    "demo_src": "(x-server-vendor)<br>",
    "demo_result": "\"Apple Inc.\""
  },
  {
    "name": "x-server-version",
    "demo_src": "(x-server-version)<br>",
    "demo_result": "(10 14 5)"
  },
  {
    "name": "xml-get-children",
    "demo_src": "(with-temp-buffer<br>  (insert<br>   \"<info>\"<br>   \"<user id=\\\"1\\\"><name>Bob</name></user>\"<br>   \"<user id=\\\"2\\\"><name>Joe</name></user>\"<br>   \"</info>\")<br>  (let ((x (xml-parse-region)))<br>    (xml-get-children (assq 'info x) 'user)))<br>",
    "demo_result": "((user<br>  ((id . \"1\"))<br>  (name nil \"Bob\"))<br> (user<br>  ((id . \"2\"))<br>  (name nil \"Joe\")))"
  },
  {
    "name": "xml-node-attributes",
    "demo_src": "(xml-node-attributes<br> '(user<br>   ((id . \"1\"))<br>   (name nil \"Bob\")))<br>",
    "demo_result": "((id . \"1\"))"
  },
  {
    "name": "xml-node-children",
    "demo_src": "(xml-node-children<br> '(user<br>   ((id . \"1\"))<br>   (name nil \"Bob\")))<br>",
    "demo_result": "((name nil \"Bob\"))"
  },
  {
    "name": "xml-node-name",
    "demo_src": "(xml-node-name<br> '(user<br>   ((id . \"1\"))<br>   (name nil \"Bob\")))<br>",
    "demo_result": "user"
  },
  {
    "name": "xml-parse-file",
    "demo_src": "(let ((file (make-temp-file \"elisp-demos-\")))<br>  (write-region \"<note>hello world!</note>\" nil file)<br>  (unwind-protect<br>      (xml-parse-file file)<br>    (delete-file file)))<br>",
    "demo_result": "((note nil \"hello world!\"))"
  },
  {
    "name": "xml-parse-region",
    "demo_src": "(with-temp-buffer<br>  (insert \"\\<br><?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><br><note><br>  <to>Tove</to><br>  <from>Jani</from><br>  <heading>Reminder</heading><br>  <body>Don't forget me this weekend!</body><br></note>\")<br>  (xml-parse-region))<br>",
    "demo_result": "((note nil \"\\n  \"<br>       (to nil \"Tove\")<br>       \"\\n  \"<br>       (from nil \"Jani\")<br>       \"\\n  \"<br>       (heading nil \"Reminder\")<br>       \"\\n  \"<br>       (body nil \"Don't forget me this weekend!\")<br>       \"\\n\"))"
  },
  {
    "name": "xmlgen",
    "demo_src": "((lambda (string)<br>   \"Prettify HTML in STRING.\"<br>   (with-temp-buffer<br>     (insert string)<br>     (html-mode)<br>     (sgml-pretty-print (point-min) (point-max))<br>     (buffer-string)))<br> (xmlgen '(html<br>           (head<br>            (title \"Example Domain\")<br>            (meta :charset \"utf-8\"))<br>           (body<br>            (h1 \"Example Domain\")<br>            (p \"This domain...\")<br>            (p (a :href \"http://www.iana.org/domains/example\" \"More information...\"))))))<br>",
    "demo_result": "<html><br>  <head><br>    <title>Example Domain<br>    </title><br>    <meta charset=\"utf-8\"/><br>  </head><br>  <body><br>    <h1>Example Domain<br>    </h1><br>    <p>This domain...<br>    </p><br>    <p><br>      <a href=\"http://www.iana.org/domains/example\">More information...<br>      </a><br>    </p><br>  </body><br></html><br>"
  },
  {
    "name": "xor",
    "demo_src": "(list (xor nil t)<br>      (xor t nil)<br>      (xor nil nil)<br>      (xor t t))<br>",
    "demo_result": "(t t nil nil)"
  },
  {
    "name": "xr",
    "demo_src": "(xr \"\\\\.\\\\(?:mp4\\\\|mp3\\\\)\\\\'\")<br>",
    "demo_result": "(seq \".\"<br>     (or \"mp4\" \"mp3\")<br>     eos)"
  },
  {
    "name": "y-or-n-p",
    "demo_src": "(y-or-n-p \"Are you ready? \")<br>",
    "demo_result": "t"
  },
  {
    "name": "y-or-n-p-with-timeout",
    "demo_src": "(y-or-n-p-with-timeout \"Are you ready? \" 3 'default)<br>",
    "demo_result": "default"
  },
  {
    "name": "yes-or-no-p",
    "demo_src": "(yes-or-no-p \"Are you ready? \")<br>",
    "demo_result": "t"
  },
  {
    "name": "zerop",
    "demo_src": "(zerop 0)<br>",
    "demo_result": "t"
  },
  {
    "name": "zlib-available-p",
    "demo_src": "(zlib-available-p)<br>",
    "demo_result": "t"
  },
  {
    "name": "zlib-decompress-region",
    "demo_src": "(with-temp-buffer<br>  (set-buffer-multibyte nil)<br>  (let ((coding-system-for-read 'binary)<br>        (coding-system-for-write 'binary))<br>    (call-process-region \"hello\" nil \"gzip\" nil t))<br>  (when (zlib-decompress-region (point-min) (point-max))<br>    (buffer-string)))<br>",
    "demo_result": "\"hello\""
  }
]