[
  {
    "name": "%",
    "demo-src": "(% 9 4)\n",
    "demo-result": "1"
  },
  {
    "name": "*",
    "demo-src": "(* 2 3)\n",
    "demo-result": "6"
  },
  {
    "name": "+",
    "demo-src": "(+ 1 2 3)\n",
    "demo-result": "6"
  },
  {
    "name": "-",
    "demo-src": "(- 3 1)\n",
    "demo-result": "2"
  },
  {
    "name": "-->",
    "demo-src": "(--> \"def\" (concat \"abc\" it \"ghi\") (upcase it))\n",
    "demo-result": "\"ABCDEFGHI\""
  },
  {
    "name": "--all?",
    "demo-src": "(--all? (= 0 (% it 2)) '(2 4 6))\n",
    "demo-result": "t"
  },
  {
    "name": "--annotate",
    "demo-src": "(--annotate (< 1 it) '(0 1 2 3))\n",
    "demo-result": "((nil . 0)\n (nil . 1)\n (t . 2)\n (t . 3))"
  },
  {
    "name": "--any?",
    "demo-src": "(--any? (> it 3) '(1 2 3 4))\n",
    "demo-result": "t"
  },
  {
    "name": "--count",
    "demo-src": "(--count (< it 4) '(1 2 3 4))\n",
    "demo-result": "3"
  },
  {
    "name": "--dotimes",
    "demo-src": "(--dotimes 3 (princ it))\n",
    "demo-result": "\"012\""
  },
  {
    "name": "--drop-while",
    "demo-src": "(--drop-while (< it 4) '(1 2 3 4 3 2 1))\n",
    "demo-result": "(4 3 2 1)"
  },
  {
    "name": "--filter",
    "demo-src": "(--filter (= 0 (% it 2)) '(1 2 3 4))\n",
    "demo-result": "(2 4)"
  },
  {
    "name": "--find-index",
    "demo-src": "(--find-index (< 5 it) '(2 4 1 6 3 3 5 8))\n",
    "demo-result": "3"
  },
  {
    "name": "--find-indices",
    "demo-src": "(--find-indices (zerop (% it 2)) '(1 2 3 4))\n",
    "demo-result": "(1 3)"
  },
  {
    "name": "--find-last-index",
    "demo-src": "(--find-last-index (< 5 it) '(2 7 1 6 3 8 5 2))\n",
    "demo-result": "5"
  },
  {
    "name": "--fix",
    "demo-src": "(--fix (if (zerop it)\n           it\n         (1- it))\n       5)\n",
    "demo-result": "0"
  },
  {
    "name": "--if-let",
    "demo-src": "(--if-let (cl-evenp 4)\n    it\n  nil)\n",
    "demo-result": "t"
  },
  {
    "name": "--iterate",
    "demo-src": "(--iterate (* it it) 2 5)\n",
    "demo-result": "(2 4 16 256 65536)"
  },
  {
    "name": "--keep",
    "demo-src": "(--keep (and (cl-evenp it) (* it it))\n        '(1 2 3 4))\n",
    "demo-result": "(4 16)"
  },
  {
    "name": "--last",
    "demo-src": "(--last (> (length it) 3) '(\"a\" \"looong\" \"word\" \"and\" \"short\" \"one\"))\n",
    "demo-result": "\"short\""
  },
  {
    "name": "--map",
    "demo-src": "(--map (* it it) '(1 2 3 4))\n",
    "demo-result": "(1 4 9 16)"
  },
  {
    "name": "--map-first",
    "demo-src": "(--map-first (> it 2) (* it it) '(1 2 3 4))\n",
    "demo-result": "(1 2 9 4)"
  },
  {
    "name": "--map-indexed",
    "demo-src": "(--map-indexed (cons it-index it) '(a b c d))\n",
    "demo-result": "((0 . a)\n (1 . b)\n (2 . c)\n (3 . d))"
  },
  {
    "name": "--map-last",
    "demo-src": "(--map-last (> it 2) (* it it) '(1 2 3 4))\n",
    "demo-result": "(1 2 3 16)"
  },
  {
    "name": "--map-when",
    "demo-src": "(--map-when (numberp it) (* it it) '(a b 1 2 3))\n",
    "demo-result": "(a b 1 4 9)"
  },
  {
    "name": "--mapcat",
    "demo-src": "(--mapcat\n (list (car it) (cdr it))\n '((x . 1) (y . 2) (z . 3)))\n",
    "demo-result": "(x 1 y 2 z 3)"
  },
  {
    "name": "--min-by",
    "demo-src": "(--min-by (> (length it) (length other)) '((1 2 3) (2) (3 2)))\n",
    "demo-result": "(2)"
  },
  {
    "name": "--none?",
    "demo-src": "(--none? (= 0 (% it 2)) '(1 3 5 7))\n",
    "demo-result": "t"
  },
  {
    "name": "--only-some?",
    "demo-src": "(--only-some? (zerop (% it 2)) '(1 2 3))\n",
    "demo-result": "t"
  },
  {
    "name": "--partition-by",
    "demo-src": "(--partition-by (< it 3) '(1 2 3 4 3 2 1))\n",
    "demo-result": "((1 2)\n (3 4 3)\n (2 1))"
  },
  {
    "name": "--partition-by-header",
    "demo-src": "(--partition-by-header (= it 1) '(1 2 3 1 2 1 2 3 4))\n",
    "demo-result": "((1 2 3)\n (1 2)\n (1 2 3 4))"
  },
  {
    "name": "--reduce",
    "demo-src": "(--reduce (format \"%s-%d\" acc it) '(1 2 3))\n",
    "demo-result": "\"1-2-3\""
  },
  {
    "name": "--reduce-from",
    "demo-src": "(--reduce-from (concat acc \" \" it) \"START\" '(\"a\" \"b\" \"c\"))\n",
    "demo-result": "\"START a b c\""
  },
  {
    "name": "--reduce-r",
    "demo-src": "(--reduce-r (format \"%s-%d\" acc it) '(1 2 3))\n",
    "demo-result": "\"3-2-1\""
  },
  {
    "name": "--reduce-r-from",
    "demo-src": "(--reduce-r-from (concat it \" \" acc) \"END\" '(\"a\" \"b\" \"c\"))\n",
    "demo-result": "\"a b c END\""
  },
  {
    "name": "--remove",
    "demo-src": "(--remove (= 0 (% it 2)) '(1 2 3 4))\n",
    "demo-result": "(1 3)"
  },
  {
    "name": "--remove-first",
    "demo-src": "(--remove-first (zerop (% it 2)) '(1 2 3 4))\n",
    "demo-result": "(1 3 4)"
  },
  {
    "name": "--remove-last",
    "demo-src": "(--remove-last #'cl-evenp '(1 2 3 4))\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "--separate",
    "demo-src": "(--separate (< it 5) '(3 7 5 9 3 2 1 4 6))\n",
    "demo-result": "((3 3 2 1 4)\n (7 5 9 6))"
  },
  {
    "name": "--some",
    "demo-src": "(--some (and (> it 0) it) '(0 1 2))\n",
    "demo-result": "1"
  },
  {
    "name": "--splice",
    "demo-src": "(--splice t\n          (list (car it) (cdr it))\n          '((x . 1)\n            (y . 2)\n            (z . 3)))\n",
    "demo-result": "(x 1 y 2 z 3)"
  },
  {
    "name": "--splice-list",
    "demo-src": "(--splice-list (keywordp it) '(a b c) '(1 :foo 2))\n",
    "demo-result": "(1 a b c 2)"
  },
  {
    "name": "--split-when",
    "demo-src": "(--split-when (memq it '(&optional &rest))\n              '(a b &optional c d &rest args))\n",
    "demo-result": "((a b)\n (c d)\n (args))"
  },
  {
    "name": "--take-while",
    "demo-src": "(--take-while (< it 4) '(1 2 3 4 3 2 1))\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "--tree-map",
    "demo-src": "(--tree-map (length it) '(\"<body>\" (\"<p>\" \"text\" \"</p>\") \"</body>\"))\n",
    "demo-result": "(6\n (3 4 4)\n 7)"
  },
  {
    "name": "--tree-reduce",
    "demo-src": "(--tree-reduce\n (cond ((stringp it) (concat it \" \" acc))\n       (t (let ((sn (symbol-name it)))\n            (concat \"<\" sn \">\" acc \"</\" sn \">\"))))\n '(body (p \"some words\") (div \"more\" (b \"bold\") \"words\")))\n",
    "demo-result": "\"<body><p>some words</p> <div>more <b>bold</b> words</div></body>\""
  },
  {
    "name": "--unfold",
    "demo-src": "(--unfold (when it (cons it (cdr it))) '(1 2 3 4))\n",
    "demo-result": "((1 2 3 4)\n (2 3 4)\n (3 4)\n (4))"
  },
  {
    "name": "--update-at",
    "demo-src": "(--update-at 2 (length it) '(\"foo\" \"bar\" \"baz\" \"quux\"))\n",
    "demo-result": "(\"foo\" \"bar\" 3 \"quux\")"
  },
  {
    "name": "--when-let",
    "demo-src": "(--when-let (string-match \"d\" \"abcd\")\n  (+ it 2))\n",
    "demo-result": "5"
  },
  {
    "name": "->",
    "demo-src": ";; (/ (- 5 1) 2)\n(-> 5 (- 1) (/ 2))\n",
    "demo-result": "2"
  },
  {
    "name": "->>",
    "demo-src": ";; (+ 40 (- (/ 25 (+ 20 5))))\n(->> 5\n     (+ 20)\n     (/ 25)\n     -\n     (+ 40))\n",
    "demo-result": "39"
  },
  {
    "name": "-all?",
    "demo-src": "(-all? #'cl-evenp '(2 4 6 8))\n",
    "demo-result": "t"
  },
  {
    "name": "-andfn",
    "demo-src": "(funcall (-andfn #'numberp #'cl-evenp) 4)\n",
    "demo-result": "t"
  },
  {
    "name": "-annotate",
    "demo-src": "(-annotate #'1+ '(1 2 3))\n",
    "demo-result": "((2 . 1)\n (3 . 2)\n (4 . 3))"
  },
  {
    "name": "-any?",
    "demo-src": "(-any? #'cl-evenp '(1 2 3))\n",
    "demo-result": "t"
  },
  {
    "name": "-applify",
    "demo-src": "(funcall (-applify #'<) '(3 6))\n",
    "demo-result": "t"
  },
  {
    "name": "-as->",
    "demo-src": "(-as-> 3 my-var 1+ (/ my-var 2))\n",
    "demo-result": "2"
  },
  {
    "name": "-butlast",
    "demo-src": "(-butlast '(1 2 3))\n",
    "demo-result": "(1 2)"
  },
  {
    "name": "-clone",
    "demo-src": "(let* ((original '(:x (1 2 3)))\n       (shallow (-copy original))\n       (deep (-clone original)))\n  (list (eq (plist-get original :x) (plist-get shallow :x))\n        (eq (plist-get original :x) (plist-get deep :x))))\n",
    "demo-result": "(t nil)"
  },
  {
    "name": "-common-prefix",
    "demo-src": "(-common-prefix '(1 2) '(1 2 3) '(1 2 3 4))\n",
    "demo-result": "(1 2)"
  },
  {
    "name": "-compose",
    "demo-src": "(funcall (-compose #'string-trim #'upcase) \" hello \")\n",
    "demo-result": "\"HELLO\""
  },
  {
    "name": "-concat",
    "demo-src": "(-concat '(1) '(2 3) '(4))\n",
    "demo-result": "(1 2 3 4)"
  },
  {
    "name": "-cons*",
    "demo-src": "(-cons* 1 2 3)\n",
    "demo-result": "(1 2 . 3)"
  },
  {
    "name": "-const",
    "demo-src": "(-map (-const 1) '(\"a\" \"b\" \"c\" \"d\"))\n",
    "demo-result": "(1 1 1 1)"
  },
  {
    "name": "-contains?",
    "demo-src": "(-contains? '(1 2 3) 1)\n",
    "demo-result": "t"
  },
  {
    "name": "-copy",
    "demo-src": "(-copy '(1 2 3))\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "-count",
    "demo-src": "(-count #'cl-evenp '(1 2 3 4 5))\n",
    "demo-result": "2"
  },
  {
    "name": "-counter",
    "demo-src": "(let ((c (-counter 0)))\n  (list (funcall c)\n        (funcall c)\n        (funcall c)))\n",
    "demo-result": "(0 1 2)"
  },
  {
    "name": "-cut",
    "demo-src": "(funcall (-cut list 1 <> 3 <> 5) 2 4)\n",
    "demo-result": "(1 2 3 4 5)"
  },
  {
    "name": "-cycle",
    "demo-src": "(-cycle '(1 2 3))\n",
    "demo-result": "(1 2 3 1 2 . #2)"
  },
  {
    "name": "-difference",
    "demo-src": "(-difference '(1 2 3 4) '(3 4 5 6))\n",
    "demo-result": "(1 2)"
  },
  {
    "name": "-distinct",
    "demo-src": "(-distinct '(1 2 2 4))\n",
    "demo-result": "(1 2 4)"
  },
  {
    "name": "-dotimes",
    "demo-src": "(-dotimes 3 #'princ)\n",
    "demo-result": "\"012\""
  },
  {
    "name": "-doto",
    "demo-src": "(-doto '(1 . 2) (setcar 3) (setcdr 4))\n",
    "demo-result": "(3 . 4)"
  },
  {
    "name": "-drop",
    "demo-src": "(-drop 3 '(1 2 3 4 5))\n",
    "demo-result": "(4 5)"
  },
  {
    "name": "-drop-last",
    "demo-src": "(-drop-last 3 '(1 2 3 4 5))\n",
    "demo-result": "(1 2)"
  },
  {
    "name": "-drop-while",
    "demo-src": "(-drop-while #'cl-evenp '(1 2 3 4))\n",
    "demo-result": "(1 2 3 4)"
  },
  {
    "name": "-each",
    "demo-src": "(-each '(1 2 3) #'princ)\n",
    "demo-result": "\"123\""
  },
  {
    "name": "-each-indexed",
    "demo-src": "(-each-indexed '(a b c) (lambda (index item)\n                          (princ index)\n                          (princ item)))\n",
    "demo-result": "\"0a1b2c\""
  },
  {
    "name": "-each-r",
    "demo-src": "(-each-r '(1 2 3) #'princ)\n",
    "demo-result": "\"321\""
  },
  {
    "name": "-each-r-while",
    "demo-src": "(-each-r-while '(2 4 5 6) #'cl-evenp #'princ)\n",
    "demo-result": "\"6\""
  },
  {
    "name": "-each-while",
    "demo-src": "(-each-while '(2 4 5 6) #'cl-evenp #'princ)\n",
    "demo-result": "\"24\""
  },
  {
    "name": "-elem-index",
    "demo-src": "(-elem-index 2 '(6 7 8 2 3 4))\n",
    "demo-result": "3"
  },
  {
    "name": "-elem-indices",
    "demo-src": "(-elem-indices 2 '(6 7 8 2 3 4 2 1))\n",
    "demo-result": "(3 6)"
  },
  {
    "name": "-fifth-item",
    "demo-src": "(-fifth-item '(1 2 3 4 5))\n",
    "demo-result": "5"
  },
  {
    "name": "-filter",
    "demo-src": "(-filter #'cl-evenp '(1 2 3 4))\n",
    "demo-result": "(2 4)"
  },
  {
    "name": "-find-index",
    "demo-src": "(-find-index #'cl-evenp '(1 2 3 4))\n",
    "demo-result": "1"
  },
  {
    "name": "-find-indices",
    "demo-src": "(-find-indices #'cl-evenp '(1 2 3 4))\n",
    "demo-result": "(1 3)"
  },
  {
    "name": "-find-last-index",
    "demo-src": "(-find-last-index #'cl-evenp '(1 2 3 4))\n",
    "demo-result": "3"
  },
  {
    "name": "-first",
    "demo-src": "(-first #'cl-evenp '(1 2 3))\n",
    "demo-result": "2"
  },
  {
    "name": "-first-item",
    "demo-src": "(-first-item '(1 2 3))\n",
    "demo-result": "1"
  },
  {
    "name": "-fix",
    "demo-src": "(-fix (lambda (x) (expt (+ x 10) 0.25))\n      2.0)\n",
    "demo-result": "1.8555845286409378"
  },
  {
    "name": "-fixfn",
    "demo-src": "(funcall (-fixfn (lambda (x) (expt (+ x 10) 0.25)))\n         2.0)\n",
    "demo-result": "1.8555845286409378"
  },
  {
    "name": "-flatten",
    "demo-src": "(-flatten '((1 (2 3) (((4 (5)))))))\n",
    "demo-result": "(1 2 3 4 5)"
  },
  {
    "name": "-flatten-n",
    "demo-src": "(-flatten-n 1 '((1 2) ((3 4) ((5 6)))))\n",
    "demo-result": "(1 2\n   (3 4)\n   ((5 6)))"
  },
  {
    "name": "-flip",
    "demo-src": "(funcall (-flip #'<) 2 1)\n",
    "demo-result": "t"
  },
  {
    "name": "-fourth-item",
    "demo-src": "(-fourth-item '(1 2 3 4))\n",
    "demo-result": "4"
  },
  {
    "name": "-group-by",
    "demo-src": "(-group-by #'cl-evenp '(1 2 3 4))\n",
    "demo-result": "((nil 1 3)\n (t 2 4))"
  },
  {
    "name": "-if-let",
    "demo-src": "(-if-let (match-index (string-match \"d\" \"abc\"))\n    (+ match-index 3)\n  7)\n",
    "demo-result": "7"
  },
  {
    "name": "-inits",
    "demo-src": "(-inits '(1 2 3 4))\n",
    "demo-result": "(nil\n (1)\n (1 2)\n (1 2 3)\n (1 2 3 4))"
  },
  {
    "name": "-insert-at",
    "demo-src": "(-insert-at 1 'x '(a b c))\n",
    "demo-result": "(a x b c)"
  },
  {
    "name": "-interleave",
    "demo-src": "(-interleave '(1 2) '(\"a\" \"b\"))\n",
    "demo-result": "(1 \"a\" 2 \"b\")"
  },
  {
    "name": "-interpose",
    "demo-src": "(-interpose \"-\" '(\"a\" \"b\" \"c\"))\n",
    "demo-result": "(\"a\" \"-\" \"b\" \"-\" \"c\")"
  },
  {
    "name": "-intersection",
    "demo-src": "(-intersection '(1 2 3 4) '(3 4 5 6))\n",
    "demo-result": "(3 4)"
  },
  {
    "name": "-is-infix?",
    "demo-src": "(-is-infix? '(2 3 4) '(1 2 3 4 5))\n",
    "demo-result": "t"
  },
  {
    "name": "-is-prefix?",
    "demo-src": "(-is-prefix? '(1 2 3) '(1 2 3 4 5))\n",
    "demo-result": "t"
  },
  {
    "name": "-is-suffix?",
    "demo-src": "(-is-suffix? '(3 4 5) '(1 2 3 4 5))\n",
    "demo-result": "t"
  },
  {
    "name": "-iterate",
    "demo-src": "(-iterate #'1+ 1 10)\n",
    "demo-result": "(1 2 3 4 5 6 7 8 9 10)"
  },
  {
    "name": "-iteratefn",
    "demo-src": "(funcall (-iteratefn #'1+ 3) 1)\n",
    "demo-result": "4"
  },
  {
    "name": "-juxt",
    "demo-src": "(funcall (-juxt #'+ #'-) 3 5)\n",
    "demo-result": "(8 -2)"
  },
  {
    "name": "-keep",
    "demo-src": "(-keep (lambda (num)\n         (and (cl-evenp num) (* num num)))\n       '(1 2 3 4))\n",
    "demo-result": "(4 16)"
  },
  {
    "name": "-lambda",
    "demo-src": "(-map (-lambda ((x . y))\n        (+ x y))\n      '((1 . 2)\n        (3 . 4)\n        (5 . 6)))\n",
    "demo-result": "(3 7 11)"
  },
  {
    "name": "-last",
    "demo-src": "(-last #'cl-evenp '(1 2 3 4 5 6 3 3 3))\n",
    "demo-result": "6"
  },
  {
    "name": "-last-item",
    "demo-src": "(-last-item '(1 2 3))\n",
    "demo-result": "3"
  },
  {
    "name": "-let",
    "demo-src": "(-let (([a (b c) d]\n        [1 (2 3) 4]))\n  (list a b c d))\n",
    "demo-result": "(1 2 3 4)"
  },
  {
    "name": "-let*",
    "demo-src": "(-let* (((a b) '( 1 2))\n        ((c d) (--map (+ it 2) (list a b))))\n  (list a b c d))\n",
    "demo-result": "(1 2 3 4)"
  },
  {
    "name": "-list",
    "demo-src": "(-list 1 2 3)\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "-map",
    "demo-src": "(-map #'1+ '(1 2 3))\n",
    "demo-result": "(2 3 4)"
  },
  {
    "name": "-map-first",
    "demo-src": "(-map-first #'numberp #'1+ '(a b 1 2 3))\n",
    "demo-result": "(a b 2 2 3)"
  },
  {
    "name": "-map-indexed",
    "demo-src": "(-map-indexed (lambda (index item)\n                (cons index item))\n              '(a b c d))\n",
    "demo-result": "((0 . a)\n (1 . b)\n (2 . c)\n (3 . d))"
  },
  {
    "name": "-map-last",
    "demo-src": "(-map-last #'numberp #'1+ '(a b c 1 2))\n",
    "demo-result": "(a b c 1 3)"
  },
  {
    "name": "-map-when",
    "demo-src": "(-map-when #'numberp #'1+ '(a b 1 2 3))\n",
    "demo-result": "(a b 2 3 4)"
  },
  {
    "name": "-mapcat",
    "demo-src": "(-mapcat\n (pcase-lambda (`(,key . ,val))\n   (list (intern (format \":%s\" key))\n         val))\n '((x . 1) (y . 2) (z . 3)))\n",
    "demo-result": "(:x 1 :y 2 :z 3)"
  },
  {
    "name": "-max",
    "demo-src": "(-max '(1 2 3))\n",
    "demo-result": "3"
  },
  {
    "name": "-max-by",
    "demo-src": "(--max-by (> (length it) (length other)) '((1 2 3) (2) (3 2)))\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "-min",
    "demo-src": "(-min '(3 2 1))\n",
    "demo-result": "1"
  },
  {
    "name": "-min-by",
    "demo-src": "(-min-by #'> '(4 3 6 1))\n",
    "demo-result": "1"
  },
  {
    "name": "-non-nil",
    "demo-src": "(-non-nil '(1 nil 2 nil nil 3 4 nil 5 nil))\n",
    "demo-result": "(1 2 3 4 5)"
  },
  {
    "name": "-none?",
    "demo-src": "(-none? #'cl-evenp '(1 3 5 7))\n",
    "demo-result": "t"
  },
  {
    "name": "-not",
    "demo-src": "(funcall (-not #'cl-evenp) 5)\n",
    "demo-result": "t"
  },
  {
    "name": "-on",
    "demo-src": "(-sort (-on #'< #'length) '((1 2 3) (1) (1 2)))\n",
    "demo-result": "((1)\n (1 2)\n (1 2 3))"
  },
  {
    "name": "-only-some?",
    "demo-src": "(-only-some? #'cl-evenp '(1 2 3))\n",
    "demo-result": "t"
  },
  {
    "name": "-orfn",
    "demo-src": "(funcall (-orfn #'stringp #'cl-evenp) 4)\n",
    "demo-result": "t"
  },
  {
    "name": "-pad",
    "demo-src": "(-pad 0 '(1 2 3) '(4 5))\n",
    "demo-result": "((1 2 3)\n (4 5 0))"
  },
  {
    "name": "-partial",
    "demo-src": "(funcall (-partial '- 5) 3)\n",
    "demo-result": "2"
  },
  {
    "name": "-partition",
    "demo-src": "(-partition 2 '(1 2 3 4 5))\n",
    "demo-result": "((1 2)\n (3 4))"
  },
  {
    "name": "-partition-after-item",
    "demo-src": "(-partition-after-item '| '(a | b | c))\n",
    "demo-result": "((a |)\n (b |)\n (c))"
  },
  {
    "name": "-partition-after-pred",
    "demo-src": "(-partition-after-pred #'cl-oddp '(1 2 3 4))\n",
    "demo-result": "((1)\n (2 3)\n (4))"
  },
  {
    "name": "-partition-all",
    "demo-src": "(-partition-all 2 '(1 2 3 4 5))\n",
    "demo-result": "((1 2)\n (3 4)\n (5))"
  },
  {
    "name": "-partition-all-in-steps",
    "demo-src": "(-partition-all-in-steps 3 2 '(1 2 3 4))\n",
    "demo-result": "((1 2 3)\n (3 4))"
  },
  {
    "name": "-partition-before-item",
    "demo-src": "(-partition-before-item '| '(a | b | c))\n",
    "demo-result": "((a)\n (| b)\n (| c))"
  },
  {
    "name": "-partition-before-pred",
    "demo-src": "(-partition-before-pred #'cl-oddp '(0 1 2 3 4))\n",
    "demo-result": "((0)\n (1 2)\n (3 4))"
  },
  {
    "name": "-partition-by",
    "demo-src": "(-partition-by #'cl-evenp '(1 1 2 2 2 3 4 6 8))\n",
    "demo-result": "((1 1)\n (2 2 2)\n (3)\n (4 6 8))"
  },
  {
    "name": "-partition-by-header",
    "demo-src": "(-partition-by-header #'cl-evenp '(2 1 1 1 4 1 3 5 6 6 1))\n",
    "demo-result": "((2 1 1 1)\n (4 1 3 5)\n (6 6 1))"
  },
  {
    "name": "-partition-in-steps",
    "demo-src": "(-partition-in-steps 2 1 '(1 2 3 4))\n",
    "demo-result": "((1 2)\n (2 3)\n (3 4))"
  },
  {
    "name": "-permutations",
    "demo-src": "(-permutations '(a b c))\n",
    "demo-result": "((a b c)\n (a c b)\n (b a c)\n (b c a)\n (c a b)\n (c b a))"
  },
  {
    "name": "-powerset",
    "demo-src": "(-powerset '(x y z))\n",
    "demo-result": "((x y z)\n (x y)\n (x z)\n (x)\n (y z)\n (y)\n (z)\n nil)"
  },
  {
    "name": "-prodfn",
    "demo-src": "(funcall (-prodfn '1+ '1- 'number-to-string)\n         '(1 2 3))\n",
    "demo-result": "(2 1 \"3\")"
  },
  {
    "name": "-product",
    "demo-src": "(-product '(1 2 3 4))\n",
    "demo-result": "24"
  },
  {
    "name": "-reduce",
    "demo-src": "(-reduce #'- '(1 2 3 4))\n",
    "demo-result": "-8"
  },
  {
    "name": "-reduce-from",
    "demo-src": "(-reduce-from #'- 10 '(1 2 3))\n",
    "demo-result": "4"
  },
  {
    "name": "-reduce-r",
    "demo-src": ";; (- 1 (- 2 (- 3 4)))\n(-reduce-r #'- '(1 2 3 4))\n",
    "demo-result": "-2"
  },
  {
    "name": "-reduce-r-from",
    "demo-src": ";; (- 3 (- 2 (- 1 10)))\n(-reduce-r-from #'- 10 '(1 2 3))\n",
    "demo-result": "-8"
  },
  {
    "name": "-reductions",
    "demo-src": "(-reductions '+ '(1 2 3 4))\n",
    "demo-result": "(1 3 6 10)"
  },
  {
    "name": "-reductions-from",
    "demo-src": "(-reductions-from '*  1 '(1 2 3 4))\n",
    "demo-result": "(1 1 2 6 24)"
  },
  {
    "name": "-reductions-r",
    "demo-src": "(-reductions-r #'+ '(1 2 3 4))\n",
    "demo-result": "(10 9 7 4)"
  },
  {
    "name": "-reductions-r-from",
    "demo-src": "(-reductions-r-from '* 1 '(1 2 3 4))\n",
    "demo-result": "(24 24 12 4 1)"
  },
  {
    "name": "-remove",
    "demo-src": "(-remove #'cl-evenp '(1 2 3 4))\n",
    "demo-result": "(1 3)"
  },
  {
    "name": "-remove-at",
    "demo-src": "(-remove-at 0 '(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\"))\n",
    "demo-result": "(\"1\" \"2\" \"3\" \"4\" \"5\")"
  },
  {
    "name": "-remove-at-indices",
    "demo-src": "(-remove-at-indices '(0 3) '(a b c d))\n",
    "demo-result": "(b c)"
  },
  {
    "name": "-remove-first",
    "demo-src": "(-remove-first #'cl-evenp '(1 2 3 4))\n",
    "demo-result": "(1 3 4)"
  },
  {
    "name": "-remove-item",
    "demo-src": "(-remove-item 'foo '(foo bar baz foo))\n",
    "demo-result": "(bar baz)"
  },
  {
    "name": "-remove-last",
    "demo-src": "(-remove-last #'cl-evenp '(1 2 3 4))\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "-repeat",
    "demo-src": "(-repeat 3 'a)\n",
    "demo-result": "(a a a)"
  },
  {
    "name": "-replace",
    "demo-src": "(-replace 1 \"1\" '(1 2 3 4 3 2 1))\n",
    "demo-result": "(\"1\" 2 3 4 3 2 \"1\")"
  },
  {
    "name": "-replace-at",
    "demo-src": "(-replace-at 0 9 '(0 1 2 3 4 5))\n",
    "demo-result": "(9 1 2 3 4 5)"
  },
  {
    "name": "-replace-first",
    "demo-src": "(-replace-first 1 \"1\" '(1 2 3 4 3 2 1))\n",
    "demo-result": "(\"1\" 2 3 4 3 2 1)"
  },
  {
    "name": "-replace-last",
    "demo-src": "(-replace-last 1 \"1\" '(1 2 3 4 3 2 1))\n",
    "demo-result": "(1 2 3 4 3 2 \"1\")"
  },
  {
    "name": "-rotate",
    "demo-src": "(-rotate 3 '(1 2 3 4 5 6 7))\n",
    "demo-result": "(5 6 7 1 2 3 4)"
  },
  {
    "name": "-rpartial",
    "demo-src": "(funcall (-rpartial '- 5) 8)\n",
    "demo-result": "3"
  },
  {
    "name": "-running-product",
    "demo-src": "(-running-product '(1 2 3 4))\n",
    "demo-result": "(1 2 6 24)"
  },
  {
    "name": "-running-sum",
    "demo-src": "(-running-sum '(1 2 3 4))\n",
    "demo-result": "(1 3 6 10)"
  },
  {
    "name": "-same-items?",
    "demo-src": "(-same-items? '(1 2 3) '(3 2 1))\n",
    "demo-result": "t"
  },
  {
    "name": "-second-item",
    "demo-src": "(-second-item '(1 2 3))\n",
    "demo-result": "2"
  },
  {
    "name": "-select-by-indices",
    "demo-src": "(-select-by-indices '(2 1 0) '(a b c))\n",
    "demo-result": "(c b a)"
  },
  {
    "name": "-select-column",
    "demo-src": "(-select-column 1 '((1 2 3)\n                    (a b c)\n                    (:a :b :c)))\n",
    "demo-result": "(2 b :b)"
  },
  {
    "name": "-select-columns",
    "demo-src": "(-select-columns '(0 2)\n                 '((1 2 3)\n                   (a b c)\n                   (:a :b :c)))\n",
    "demo-result": "((1 3)\n (a c)\n (:a :c))"
  },
  {
    "name": "-separate",
    "demo-src": "(-separate #'cdr '((1 2) (1) (1 2 3) (4)))\n",
    "demo-result": "(((1 2)\n  (1 2 3))\n ((1)\n  (4)))"
  },
  {
    "name": "-setq",
    "demo-src": "(let (a b)\n  (-setq [a b] [1 2 3])\n  (list a b))\n",
    "demo-result": "(1 2)"
  },
  {
    "name": "-slice",
    "demo-src": "(-slice '(a b c d e) 1 4)\n",
    "demo-result": "(b c d)"
  },
  {
    "name": "-snoc",
    "demo-src": "(-snoc '(1 2 3) 4 5 6)\n",
    "demo-result": "(1 2 3 4 5 6)"
  },
  {
    "name": "-some",
    "demo-src": "(-some #'cl-evenp '(1 2 3))\n",
    "demo-result": "t"
  },
  {
    "name": "-some-->",
    "demo-src": "(-some--> \"def\" (concat \"abc\" it \"ghi\"))\n",
    "demo-result": "\"abcdefghi\""
  },
  {
    "name": "-some->",
    "demo-src": "(-some-> 6 (/ 2))\n",
    "demo-result": "3"
  },
  {
    "name": "-some->>",
    "demo-src": "(-some->> '(2 4 6) (-last #'cl-evenp) (+ 100))\n",
    "demo-result": "106"
  },
  {
    "name": "-sort",
    "demo-src": "(-sort #'< '(3 1 2))\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "-splice",
    "demo-src": "(-splice #'cl-evenp (lambda (x) (list x x)) '(1 2 3 4))\n",
    "demo-result": "(1 2 2 3 4 4)"
  },
  {
    "name": "-splice-list",
    "demo-src": "(-splice-list 'keywordp '(a b c) '(1 :foo 2))\n",
    "demo-result": "(1 a b c 2)"
  },
  {
    "name": "-split-at",
    "demo-src": "(-split-at 3 '(1 2 3 4 5))\n",
    "demo-result": "((1 2 3)\n (4 5))"
  },
  {
    "name": "-split-on",
    "demo-src": "(-split-on '| '(Nil | Leaf a | Node [Tree a]))\n",
    "demo-result": "((Nil)\n (Leaf a)\n (Node\n  [Tree a]))"
  },
  {
    "name": "-split-when",
    "demo-src": "(-split-when #'cl-evenp '(1 2 3 4 5 6))\n",
    "demo-result": "((1)\n (3)\n (5))"
  },
  {
    "name": "-split-with",
    "demo-src": "(-split-with #'cl-evenp '(2 4 5 6))\n",
    "demo-result": "((2 4)\n (5 6))"
  },
  {
    "name": "-sum",
    "demo-src": "(-sum '(1 2 3 4))\n",
    "demo-result": "10"
  },
  {
    "name": "-table",
    "demo-src": "(-table #'* '(1 2 3) '(1 2 3))\n",
    "demo-result": "((1 2 3)\n (2 4 6)\n (3 6 9))"
  },
  {
    "name": "-table-flat",
    "demo-src": "(-table-flat #'list '(1 2 3) '(a b c))\n",
    "demo-result": "((1 a)\n (2 a)\n (3 a)\n (1 b)\n (2 b)\n (3 b)\n (1 c)\n (2 c)\n (3 c))"
  },
  {
    "name": "-tails",
    "demo-src": "(-tails '(1 2 3 4))\n",
    "demo-result": "((1 2 3 4)\n (2 3 4)\n (3 4)\n (4)\n nil)"
  },
  {
    "name": "-take",
    "demo-src": "(-take 3 '(1 2 3 4 5))\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "-take-last",
    "demo-src": "(-take-last 3 '(1 2 3 4 5))\n",
    "demo-result": "(3 4 5)"
  },
  {
    "name": "-take-while",
    "demo-src": "(-take-while #'cl-evenp '(2 4 5 6))\n",
    "demo-result": "(2 4)"
  },
  {
    "name": "-third-item",
    "demo-src": "(-third-item '(1 2 3))\n",
    "demo-result": "3"
  },
  {
    "name": "-tree-map",
    "demo-src": "(-tree-map #'1+ '(1 (2 3) (4 (5 6) 7)))\n",
    "demo-result": "(2\n (3 4)\n (5\n  (6 7)\n  8))"
  },
  {
    "name": "-tree-map-nodes",
    "demo-src": "(-tree-map-nodes\n 'keywordp\n (lambda (x) (symbol-name x))\n '(1 :foo 4 ((5 6 :bar) :baz 8)))\n",
    "demo-result": "(1 \":foo\" 4\n   ((5 6 \":bar\")\n    \":baz\" 8))"
  },
  {
    "name": "-tree-reduce",
    "demo-src": "(-tree-reduce #'+ '(1 (2 3) (4 5)))\n",
    "demo-result": "15"
  },
  {
    "name": "-tree-reduce-from",
    "demo-src": "(-tree-reduce-from '+ 1 '(1 (1 1) ((1))))\n",
    "demo-result": "8"
  },
  {
    "name": "-unfold",
    "demo-src": "(-unfold (lambda (x)\n           (unless (= x 0) (cons x (1- x))))\n         10)\n",
    "demo-result": "(10 9 8 7 6 5 4 3 2 1)"
  },
  {
    "name": "-union",
    "demo-src": "(-union '(1 1 2 2) '(3 2 1))\n",
    "demo-result": "(1 1 2 2 3)"
  },
  {
    "name": "-unzip",
    "demo-src": "(-unzip '((1 2) (3 4) (5 6) (7 8) (9 10)))\n",
    "demo-result": "((1 3 5 7 9)\n (2 4 6 8 10))"
  },
  {
    "name": "-update-at",
    "demo-src": "(-update-at 0 (lambda (x) (+ x 9)) '(0 1 2 3 4 5))\n",
    "demo-result": "(9 1 2 3 4 5)"
  },
  {
    "name": "-when-let",
    "demo-src": "(-when-let (match-index (string-match \"d\" \"abcd\"))\n  (+ match-index 2))\n",
    "demo-result": "5"
  },
  {
    "name": "-when-let*",
    "demo-src": "(-when-let* ((x 5)\n             (y 3)\n             (z (+ y 4)))\n  (+ x y z))\n",
    "demo-result": "15"
  },
  {
    "name": "-zip",
    "demo-src": "(-zip '(1 2 3) '(4 5 6))\n",
    "demo-result": "((1 . 4)\n (2 . 5)\n (3 . 6))"
  },
  {
    "name": "-zip-fill",
    "demo-src": "(-zip-fill 0 '(1 2 3 4 5) '(6 7 8 9))\n",
    "demo-result": "((1 . 6)\n (2 . 7)\n (3 . 8)\n (4 . 9)\n (5 . 0))"
  },
  {
    "name": "-zip-with",
    "demo-src": "(-zip-with 'cons '(1 2 3) '(4 5 6))\n",
    "demo-result": "((1 . 4)\n (2 . 5)\n (3 . 6))"
  },
  {
    "name": "/",
    "demo-src": "(/ 6 2)\n",
    "demo-result": "3"
  },
  {
    "name": "/=",
    "demo-src": "(/= 2 3)\n",
    "demo-result": "t"
  },
  {
    "name": "1+",
    "demo-src": "(1+ 2)\n",
    "demo-result": "3"
  },
  {
    "name": "1-",
    "demo-src": "(1- 2)\n",
    "demo-result": "1"
  },
  {
    "name": "<",
    "demo-src": "(< 2 3)\n",
    "demo-result": "t"
  },
  {
    "name": "<=",
    "demo-src": "(<= 2 2.0)\n",
    "demo-result": "t"
  },
  {
    "name": "=",
    "demo-src": "(= 1 1.0)\n",
    "demo-result": "t"
  },
  {
    "name": ">",
    "demo-src": "(> 3 2)\n",
    "demo-result": "t"
  },
  {
    "name": ">=",
    "demo-src": "(>= 2 2.0)\n",
    "demo-result": "t"
  },
  {
    "name": "`",
    "demo-src": "(apply #'+ `(1 ,@(number-sequence 2 4) 5))\n",
    "demo-result": "15"
  },
  {
    "name": "abbreviate-file-name",
    "demo-src": "(abbreviate-file-name user-init-file)\n",
    "demo-result": "\"~/.emacs.d/init.el\""
  },
  {
    "name": "abs",
    "demo-src": "(abs -4)\n",
    "demo-result": "4"
  },
  {
    "name": "accept-process-output",
    "demo-src": ";; Block untill the process is done\n(accept-process-output\n (start-process-shell-command \"sh\" nil \"sleep 3\"))\n",
    "demo-result": "nil"
  },
  {
    "name": "access-file",
    "demo-src": "(access-file user-init-file \"Can't open your init file\")\n",
    "demo-result": "nil"
  },
  {
    "name": "acos",
    "demo-src": "(acos 0)\n",
    "demo-result": "1.5707963267948966"
  },
  {
    "name": "active-minibuffer-window",
    "demo-src": "(active-minibuffer-window)\n",
    "demo-result": "nil"
  },
  {
    "name": "add-face-text-property",
    "demo-src": "(let ((s \"RED|GREEN\"))\n  (add-face-text-property 0 3 '(:foreground \"red\") 'append s)\n  (add-face-text-property 4 9 '(:foreground \"green\") 'append s)\n  (message s))\n",
    "demo-result": "#(\"RED|GREEN\" 0 3\n  (face\n   (:foreground \"red\"))\n  4 9\n  (face\n   (:foreground \"green\")))"
  },
  {
    "name": "add-hook",
    "demo-src": "(add-hook 'lisp-interaction-mode-hook #'prettify-symbols-mode)\n",
    "demo-result": ""
  },
  {
    "name": "add-text-properties",
    "demo-src": "(let ((s \"hello\"))\n  (add-text-properties 0 (length s) '(display \"world\") s)\n  s)\n",
    "demo-result": "#(\"hello\" 0 5\n  (display \"world\"))"
  },
  {
    "name": "add-to-list",
    "demo-src": "(let ((l '(1 2)))\n  (add-to-list 'l 1)\n  (add-to-list 'l 2)\n  (add-to-list 'l 3)\n  l)\n",
    "demo-result": "(3 1 2)"
  },
  {
    "name": "advice-add",
    "demo-src": "(advice-add 'emacs-version :around #'ignore)\n",
    "demo-result": ""
  },
  {
    "name": "advice-eval-interactive-spec",
    "demo-src": "(advice-eval-interactive-spec \"r\\nP\")\n",
    "demo-result": ""
  },
  {
    "name": "advice-remove",
    "demo-src": "(advice-remove 'emacs-version #'ignore)\n",
    "demo-result": ""
  },
  {
    "name": "aio-defun",
    "demo-src": "(aio-defun foo (url)\n  (aio-await (aio-sleep 3))\n  (message \"Done sleeping. Now fetching %s\" url)\n  (let* ((result (aio-await (aio-url-retrieve url)))\n         (contents (with-current-buffer (cdr result)\n                     (prog1 (buffer-string)\n                       (kill-buffer)))))\n    (message \"Result: %s\" contents)))\n\n(foo \"http://example.com\")\n",
    "demo-result": "#s(aio-promise nil nil)"
  },
  {
    "name": "aio-lambda",
    "demo-src": "(funcall\n (aio-lambda ()\n   (aio-await (aio-sleep 3))\n   (message \"Done sleeping 3 seconds\")))\n",
    "demo-result": "#s(aio-promise nil nil)"
  },
  {
    "name": "alist-get",
    "demo-src": "(alist-get 'y '((x . 1) (y . 2)))\n",
    "demo-result": "2"
  },
  {
    "name": "all-completions",
    "demo-src": "(all-completions \"b\" '(\"foo\" \"bar\" \"baz\"))\n",
    "demo-result": "(\"bar\" \"baz\")"
  },
  {
    "name": "and",
    "demo-src": "(list (and 1 2 3)\n      (and 1 nil 3))\n",
    "demo-result": "(3 nil)"
  },
  {
    "name": "and-let*",
    "demo-src": "(and-let* ((bashrc (expand-file-name \"~/.bashrc\"))\n           ((file-readable-p bashrc))\n           (attrs (file-attributes bashrc))\n           (mt (file-attribute-modification-time attrs))\n           ((format-time-string \"%Y-%m-%d\" mt))))\n",
    "demo-result": "\"2018-10-27\""
  },
  {
    "name": "ansi-color-apply",
    "demo-src": "(ansi-color-apply (concat \"\\e[31m\" \"Hello world\" \"\\e[0m\"))\n",
    "demo-result": "#(\"Hello world\" 0 11\n  (font-lock-face\n   (foreground-color . \"red3\")))"
  },
  {
    "name": "append",
    "demo-src": "(append '(1) '(2 3 4) nil)\n",
    "demo-result": "(1 2 3 4)"
  },
  {
    "name": "apply",
    "demo-src": "(apply #'+ 1 2 '(3 4))\n",
    "demo-result": "10"
  },
  {
    "name": "apply-partially",
    "demo-src": "(mapcar (apply-partially #'* 2) '(1 2 3))\n",
    "demo-result": "(2 4 6)"
  },
  {
    "name": "aref",
    "demo-src": "(aref [1 2 3] 0)\n",
    "demo-result": "1"
  },
  {
    "name": "arrayp",
    "demo-src": "(arrayp [])\n",
    "demo-result": "t"
  },
  {
    "name": "aset",
    "demo-src": "(let ((array [vector 1 2 3]))\n  (aset array 0 100)\n  array)\n",
    "demo-result": "[100 1 2 3]"
  },
  {
    "name": "ash",
    "demo-src": "(ash #B111 1)\n",
    "demo-result": "14"
  },
  {
    "name": "asin",
    "demo-src": "(asin 1)\n",
    "demo-result": "1.5707963267948966"
  },
  {
    "name": "assoc",
    "demo-src": "(assoc \"two\" '((\"one\" 1)\n               (\"two\" 2)\n               (\"three\" 3)))\n",
    "demo-result": "(\"two\" 2)"
  },
  {
    "name": "assoc-default",
    "demo-src": "(list (assoc-default 'x '(x (y 2)) #'eq 1)\n      (assoc-default 'y '(x (y 2)) #'eq 1)\n      (assoc-default 'z '(x (y 2)) #'eq 1))\n",
    "demo-result": "(1\n (2)\n nil)"
  },
  {
    "name": "assoc-delete-all",
    "demo-src": "(assoc-delete-all \"a\" '((\"a\" 1)\n                        (\"b\" 2)\n                        (\"c\" 3)\n                        (\"a\" 4)))\n",
    "demo-result": "((\"b\" 2)\n (\"c\" 3))"
  },
  {
    "name": "assoc-string",
    "demo-src": "(assoc-string \"path\"\n              '((\"Domain\" . \"example.com\")\n                (\"Path\" . \"/\"))\n              'ignore-case)\n",
    "demo-result": "(\"Path\" . \"/\")"
  },
  {
    "name": "assq",
    "demo-src": "(assq 'y '((x . 1)\n           (y . 2)\n           (z . 3)))\n",
    "demo-result": "(y . 2)"
  },
  {
    "name": "assq-delete-all",
    "demo-src": "(let ((alist (list (cons 1 11)\n                   (cons 2 22)\n                   (cons 3 33)\n                   (cons 1 1111))))\n  (setq alist (assq-delete-all 1 alist)))\n",
    "demo-result": "((2 . 22)\n (3 . 33))"
  },
  {
    "name": "atan",
    "demo-src": "(atan 1)\n",
    "demo-result": "0.7853981633974483"
  },
  {
    "name": "atom",
    "demo-src": "(atom 42)\n",
    "demo-result": "t"
  },
  {
    "name": "atomic-change-group",
    "demo-src": "(with-temp-buffer\n  (insert \"hello\")\n  (ignore-errors\n    (atomic-change-group\n      (insert \"world\")\n      (error \"I cannot do it\")))\n  (buffer-string))\n",
    "demo-result": "\"hello\""
  },
  {
    "name": "auth-source-forget-all-cached",
    "demo-src": "(auth-source-forget-all-cached)\n",
    "demo-result": "nil"
  },
  {
    "name": "auth-source-pick-first-password",
    "demo-src": "(auth-source-pick-first-password :host \"vlc\")\n",
    "demo-result": "\"secret\""
  },
  {
    "name": "auth-source-search",
    "demo-src": "(let ((tmpfile (make-temp-file \"elisp-demos-authinfo-\")))\n  (write-region\n   (concat \"machine foo.com login user1 password pass1\" \"\\n\"\n           \"machine bar.com login user2 password pass2\" \"\\n\"\n           \"machine baz.com login user3 password pass2\" \"\\n\")\n   nil tmpfile)\n  (unwind-protect\n      (let ((auth-source-do-cache nil)\n            (auth-sources (list tmpfile)))\n        (when-let ((plist (car (auth-source-search :host \"bar.com\" :max 1)))\n                   (user (plist-get plist :user))\n                   (pass (funcall (plist-get plist :secret))))\n          (list user pass)))\n    (delete-file tmpfile)))\n",
    "demo-result": "(\"user2\" \"pass2\")"
  },
  {
    "name": "autoload",
    "demo-src": "(autoload #'dired-omit-mode \"dired-x\")\n",
    "demo-result": "nil"
  },
  {
    "name": "autoloadp",
    "demo-src": "(autoloadp (symbol-function 'run-python))\n",
    "demo-result": "t"
  },
  {
    "name": "base64-decode-region",
    "demo-src": "(with-temp-buffer\n  (insert \"aGVsbG8=\")\n  (base64-decode-region (point-min) (point-max))\n  (buffer-string))\n",
    "demo-result": "\"hello\""
  },
  {
    "name": "base64-decode-string",
    "demo-src": "(base64-decode-string \"aGVsbG8=\")\n",
    "demo-result": "\"hello\""
  },
  {
    "name": "base64-encode-region",
    "demo-src": "(with-temp-buffer\n  (insert \"hello\")\n  (base64-encode-region (point-min) (point-max))\n  (buffer-string))\n",
    "demo-result": "\"aGVsbG8=\""
  },
  {
    "name": "base64-encode-string",
    "demo-src": "(base64-encode-string \"hello\")\n",
    "demo-result": "\"aGVsbG8=\""
  },
  {
    "name": "beginning-of-line",
    "demo-src": "(beginning-of-line)\n",
    "demo-result": "nil"
  },
  {
    "name": "benchmark",
    "demo-src": "(benchmark 10 '(sit-for 0.1))\n",
    "demo-result": "\"Elapsed time: 1.087937s\""
  },
  {
    "name": "benchmark-elapse",
    "demo-src": "(benchmark-elapse\n  (sit-for 1))\n",
    "demo-result": "1.011088"
  },
  {
    "name": "benchmark-progn",
    "demo-src": "(benchmark-progn\n  (dotimes (i 1000000 i)))\n",
    "demo-result": "1000000"
  },
  {
    "name": "benchmark-run",
    "demo-src": "(benchmark-run 10 (sit-for 0.1))\n",
    "demo-result": "(1.072229 0 0.0)"
  },
  {
    "name": "benchmark-run-compiled",
    "demo-src": "(benchmark-run 1\n  (let ((i 10000000))\n    (while (> (setq i (1- i)) 0))))\n",
    "demo-result": "(1.377883 0 0.0)"
  },
  {
    "name": "bind-keys",
    "demo-src": "(bind-keys :map winner-mode-map\n           (\"M-N\" . winner-redo)\n           (\"M-P\" . winner-undo))\n",
    "demo-result": ""
  },
  {
    "name": "bindat-get-field",
    "demo-src": "(let* ((binary-data [192 168 1 100 192 168 1 101 4 210 17 215])\n       (spec '((dest-ip ip)\n               (src-ip ip)\n               (dest-port u16)\n               (src-port u16)))\n       (decoded (bindat-unpack spec binary-data)))\n  (bindat-get-field decoded 'src-ip))\n",
    "demo-result": "[192 168 1 101]"
  },
  {
    "name": "bindat-ip-to-string",
    "demo-src": "(bindat-ip-to-string [127 0 0 1])\n",
    "demo-result": "\"127.0.0.1\""
  },
  {
    "name": "bindat-length",
    "demo-src": "(bindat-length '((id strz 8)\n                 (ip ip))\n               '((id . [?A ?B ?C ?D ?E ?F ?G 0])\n                 (ip . [192 168 1 100])))\n",
    "demo-result": "12"
  },
  {
    "name": "bindat-pack",
    "demo-src": "(string-to-vector\n (bindat-pack '((dest-ip ip)\n                (src-ip ip)\n                (dest-port u16)\n                (src-port u16))\n              '((dest-ip   . [192 168 1 100])\n                (src-ip    . [192 168 1 101])\n                (dest-port . 1234)\n                (src-port  . 4567))))\n",
    "demo-result": "[192 168 1 100 192 168 1 101 4 210 17 215]"
  },
  {
    "name": "bindat-unpack",
    "demo-src": "(bindat-unpack '((dest-ip ip)\n                 (src-ip ip)\n                 (dest-port u16)\n                 (src-port u16))\n               [192 168 1 100 192 168 1 101 4 210 17 215])\n",
    "demo-result": "((src-port . 4567)\n (dest-port . 1234)\n (src-ip .\n         [192 168 1 101])\n (dest-ip .\n          [192 168 1 100]))"
  },
  {
    "name": "bindat-vector-to-hex",
    "demo-src": "(bindat-vector-to-hex [0 1 2 255 256] \" \")\n",
    "demo-result": "\"00 01 02 ff 100\""
  },
  {
    "name": "bobp",
    "demo-src": "(with-temp-buffer (bobp))\n",
    "demo-result": "t"
  },
  {
    "name": "bolp",
    "demo-src": "(with-temp-buffer (bolp))\n",
    "demo-result": "t"
  },
  {
    "name": "bool-vector",
    "demo-src": "(vconcat (bool-vector nil t nil t))\n",
    "demo-result": "[nil t nil t]"
  },
  {
    "name": "bool-vector-count-consecutive",
    "demo-src": "(bool-vector-count-consecutive\n (bool-vector nil t nil t t t t t nil)\n t 3)\n",
    "demo-result": "5"
  },
  {
    "name": "bool-vector-count-population",
    "demo-src": "(bool-vector-count-population (bool-vector nil t nil t t))\n",
    "demo-result": "3"
  },
  {
    "name": "bool-vector-exclusive-or",
    "demo-src": "(vconcat\n (bool-vector-exclusive-or (bool-vector nil t nil t)\n                           (bool-vector nil t t nil)))\n",
    "demo-result": "[nil nil t t]"
  },
  {
    "name": "bool-vector-intersection",
    "demo-src": "(vconcat\n (bool-vector-intersection (bool-vector nil nil t t)\n                           (bool-vector nil t nil t)))\n",
    "demo-result": "[nil nil nil t]"
  },
  {
    "name": "bool-vector-not",
    "demo-src": "(vconcat (bool-vector-not (bool-vector nil t)))\n",
    "demo-result": "[t nil]"
  },
  {
    "name": "bool-vector-p",
    "demo-src": "(bool-vector-p (bool-vector))\n",
    "demo-result": "t"
  },
  {
    "name": "bool-vector-set-difference",
    "demo-src": "(vconcat\n (bool-vector-set-difference (bool-vector nil nil t t)\n                             (bool-vector nil t nil t)))\n",
    "demo-result": "[nil nil t nil]"
  },
  {
    "name": "bool-vector-subsetp",
    "demo-src": "(bool-vector-subsetp (bool-vector t nil t nil)\n                     (bool-vector t t t t))\n",
    "demo-result": "t"
  },
  {
    "name": "bool-vector-union",
    "demo-src": "(vconcat\n (bool-vector-union (bool-vector nil nil t t)\n                    (bool-vector nil t nil t)))\n",
    "demo-result": "[nil t t t]"
  },
  {
    "name": "booleanp",
    "demo-src": "(booleanp nil)\n",
    "demo-result": "t"
  },
  {
    "name": "boundp",
    "demo-src": "(boundp 'emacs-version)\n",
    "demo-result": "t"
  },
  {
    "name": "buffer-chars-modified-tick",
    "demo-src": "(buffer-chars-modified-tick)\n",
    "demo-result": "62893"
  },
  {
    "name": "buffer-end",
    "demo-src": "(cl-assert (buffer-end +1) (point-max))\n(cl-assert (buffer-end -1) (point-min))\n",
    "demo-result": "nil"
  },
  {
    "name": "buffer-file-name",
    "demo-src": "(buffer-file-name)\n",
    "demo-result": "\"/Users/xcy/src/elisp-demos/elisp-demos.org\""
  },
  {
    "name": "buffer-hash",
    "demo-src": "(with-temp-buffer\n  (buffer-hash))\n",
    "demo-result": "\"da39a3ee5e6b4b0d3255bfef95601890afd80709\""
  },
  {
    "name": "buffer-list",
    "demo-src": "(message \"There are %d buffers\" (length (buffer-list)))\n",
    "demo-result": "\"There are 32 buffers\""
  },
  {
    "name": "buffer-live-p",
    "demo-src": "(let ((buffer (generate-new-buffer \"*test*\")))\n  (list buffer\n        (buffer-live-p buffer)\n        (kill-buffer buffer)\n        (buffer-live-p buffer)\n        buffer))\n",
    "demo-result": "(#<killed buffer> t t nil #<killed buffer>)"
  },
  {
    "name": "buffer-local-value",
    "demo-src": "(buffer-local-value 'major-mode (get-buffer \"*Messages*\"))\n",
    "demo-result": "messages-buffer-mode"
  },
  {
    "name": "buffer-modified-p",
    "demo-src": "(buffer-modified-p)\n",
    "demo-result": "t"
  },
  {
    "name": "buffer-modified-tick",
    "demo-src": "(buffer-modified-tick)\n",
    "demo-result": "62561"
  },
  {
    "name": "buffer-name",
    "demo-src": "(buffer-name)\n",
    "demo-result": "\"elisp-demos.org\""
  },
  {
    "name": "buffer-narrowed-p",
    "demo-src": "(list (buffer-narrowed-p)\n      (with-temp-buffer\n        (insert \"hello\")\n        (narrow-to-region 1 2)\n        (buffer-narrowed-p)))\n",
    "demo-result": "(nil t)"
  },
  {
    "name": "buffer-size",
    "demo-src": "(buffer-size)\n",
    "demo-result": "14480"
  },
  {
    "name": "buffer-string",
    "demo-src": "(with-temp-buffer\n  (insert (propertize \"hello\" 'face 'bold))\n  (buffer-string))\n",
    "demo-result": "#(\"hello\" 0 5\n  (face bold))"
  },
  {
    "name": "buffer-swap-text",
    "demo-src": "(let ((b1 (generate-new-buffer \"*buffer 1*\"))\n      (b2 (generate-new-buffer \"*buffer 2*\")))\n  (with-current-buffer b1\n    (insert \"hello\")\n    (with-current-buffer b2 (insert \"world\"))\n    (buffer-swap-text b2)\n    (list (buffer-string)\n          (with-current-buffer b2 (buffer-string)))))\n",
    "demo-result": "(\"world\" \"hello\")"
  },
  {
    "name": "bufferp",
    "demo-src": "(mapcar #'bufferp (list \"*Messages*\" (get-buffer \"*Messages*\")))\n",
    "demo-result": "(nil t)"
  },
  {
    "name": "butlast",
    "demo-src": "(butlast '(1 2 3 4 5) 2)\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "byte-code-function-p",
    "demo-src": "(byte-code-function-p (symbol-function 'next-line))\n",
    "demo-result": "t"
  },
  {
    "name": "byte-compile",
    "demo-src": "(byte-compile '(lambda (a b) (+ a a b)))\n",
    "demo-result": ";; byte-compiled code is more efficient than interpreted code\n(let* ((form '(let ((i 10000000))\n                (while (> (setq i (- i 1)) 0))))\n       (fun `(lambda () ,form))\n       (compiled (byte-compile fun)))\n  (list (benchmark-elapse 1 (funcall fun))\n        (benchmark-elapse 1 (funcall compiled))))\n"
  },
  {
    "name": "byte-to-position",
    "demo-src": "(with-temp-buffer\n  (insert \"lambda λ\")\n  (byte-to-position 10))\n",
    "demo-result": "9"
  },
  {
    "name": "byte-to-string",
    "demo-src": "(byte-to-string 65)\n",
    "demo-result": "\"A\""
  },
  {
    "name": "caar",
    "demo-src": "(caar '((42)))\n",
    "demo-result": "42"
  },
  {
    "name": "cadr",
    "demo-src": "(cadr '(1 2 3))\n",
    "demo-result": "2"
  },
  {
    "name": "calc-eval",
    "demo-src": "(calc-eval \"2 + 3\")\n",
    "demo-result": "\"5\""
  },
  {
    "name": "calendar-absolute-from-gregorian",
    "demo-src": ";; How many days since the Gregorian date 12/31/1 BC\n(calendar-absolute-from-gregorian\n (calendar-current-date))\n",
    "demo-result": "737031"
  },
  {
    "name": "calendar-chinese-from-absolute",
    "demo-src": "(calendar-chinese-from-absolute\n (calendar-absolute-from-gregorian\n  (calendar-current-date)))\n",
    "demo-result": "(78 35 10 26)"
  },
  {
    "name": "calendar-current-date",
    "demo-src": "(calendar-current-date)\n",
    "demo-result": "(12 3 2018)"
  },
  {
    "name": "call-interactively",
    "demo-src": "(call-interactively #'emacs-version)\n",
    "demo-result": "\"GNU Emacs 26.1 (build 1, x86_64-apple-darwin18.2.0, Carbon Version 158 AppKit 1671.1) of 2018-11-11\""
  },
  {
    "name": "call-process",
    "demo-src": "(with-temp-buffer\n  (list :exit-status\n        (call-process \"echo\" nil t nil \"hello\" \"world\")\n        :output\n        (buffer-string)))\n",
    "demo-result": "(:exit-status 0 :output \"hello world\\n\")"
  },
  {
    "name": "call-process-region",
    "demo-src": "(with-temp-buffer\n  (insert \"hello\\n\")\n  (call-process-region (point-min) (point-max) \"wc\" t t)\n  (buffer-string))\n",
    "demo-result": "\"       1       1       6\\n\""
  },
  {
    "name": "call-process-shell-command",
    "demo-src": "(with-temp-buffer\n  (list :exit-status\n        (call-process-shell-command \"echo hello | wc\" nil t)\n        :output\n        (buffer-string)))\n",
    "demo-result": "(:exit-status 0 :output \"       1       1       6\\n\")"
  },
  {
    "name": "cancel-timer",
    "demo-src": "(cancel-timer (run-at-time 1 nil #'ignore))\n",
    "demo-result": "nil"
  },
  {
    "name": "capitalize",
    "demo-src": "(capitalize \"THE cat in the hat\")\n",
    "demo-result": "\"The Cat In The Hat\""
  },
  {
    "name": "car",
    "demo-src": "(car '(a b c))\n",
    "demo-result": "a"
  },
  {
    "name": "car-safe",
    "demo-src": "(car-safe '(1))\n",
    "demo-result": "1"
  },
  {
    "name": "catch",
    "demo-src": "(catch 'break\n  (while t\n    (throw 'break 42)))\n",
    "demo-result": "42"
  },
  {
    "name": "category-docstring",
    "demo-src": "(category-docstring ?a)\n",
    "demo-result": "\"ASCII\\nASCII graphic characters 32-126 (ISO646 IRV:1983[4/0])\""
  },
  {
    "name": "category-set-mnemonics",
    "demo-src": "(category-set-mnemonics (char-category-set ?a))\n",
    "demo-result": "\".Lalr\""
  },
  {
    "name": "cdar",
    "demo-src": "(cdar '((1 2 3)))\n",
    "demo-result": "(2 3)"
  },
  {
    "name": "cddr",
    "demo-src": "(cddr '(1 2 3 4))\n",
    "demo-result": "(3 4)"
  },
  {
    "name": "cdr",
    "demo-src": "(cdr '(a b c))\n",
    "demo-result": "(b c)"
  },
  {
    "name": "cdr-safe",
    "demo-src": "(cdr-safe '(1 2 3))\n",
    "demo-result": "(2 3)"
  },
  {
    "name": "ceiling",
    "demo-src": ";; -> +∞\n(ceiling 1.2)\n",
    "demo-result": "2"
  },
  {
    "name": "char-after",
    "demo-src": "(with-temp-buffer\n  (insert \"ABC\")\n  (string (char-after (point-min))))\n",
    "demo-result": "\"A\""
  },
  {
    "name": "char-before",
    "demo-src": "(with-temp-buffer\n  (insert \"ABC\")\n  (string (char-before)))\n",
    "demo-result": "\"C\""
  },
  {
    "name": "char-category-set",
    "demo-src": "(aref (char-category-set ?A) ?a)\n",
    "demo-result": "t"
  },
  {
    "name": "char-equal",
    "demo-src": "(list (char-equal ?x ?X)\n      (let ((case-fold-search nil))\n        (char-equal ?x ?X)))\n",
    "demo-result": "(t nil)"
  },
  {
    "name": "char-fold-to-regexp",
    "demo-src": "(char-fold-to-regexp \"(\")\n",
    "demo-result": "\"[(⁽₍︵﹙（]\""
  },
  {
    "name": "char-from-name",
    "demo-src": "(string (char-from-name \"GREEK SMALL LETTER LAMBDA\"))\n",
    "demo-result": "\"λ\""
  },
  {
    "name": "char-or-string-p",
    "demo-src": "(mapcar #'char-or-string-p '(\"\" ?x 42 nil t))\n",
    "demo-result": "(t t t nil nil)"
  },
  {
    "name": "char-syntax",
    "demo-src": "(string (char-syntax ?a))\n",
    "demo-result": "\"w\""
  },
  {
    "name": "char-table-range",
    "demo-src": ";; (aref char-width-table ?💯)\n;; => 2\n\n(char-table-range char-width-table ?💯)\n",
    "demo-result": "2"
  },
  {
    "name": "char-to-string",
    "demo-src": "(char-to-string ?A)\n",
    "demo-result": "\"A\""
  },
  {
    "name": "char-width",
    "demo-src": "(char-width ?你)\n",
    "demo-result": "2"
  },
  {
    "name": "characterp",
    "demo-src": "(characterp 97)\n",
    "demo-result": "t"
  },
  {
    "name": "chart-bar-quickie",
    "demo-src": ";; http://francismurillo.github.io/2017-04-15-Exploring-Emacs-chart-Library/\n(chart-bar-quickie\n 'vertical\n \"Eye Colors\"\n '(\"Green\" \"Hazel\" \"Blue\" \"Brown\") \"Colors\"\n '(64 93 215 220) \"Frequency\")\n",
    "demo-result": ""
  },
  {
    "name": "check-coding-system",
    "demo-src": "(check-coding-system 'utf-8)\n",
    "demo-result": "utf-8"
  },
  {
    "name": "cl-adjoin",
    "demo-src": "(cl-adjoin 1 '(2 3))\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "cl-assert",
    "demo-src": "(cl-assert (= (+ 2 3) 5))\n",
    "demo-result": "nil"
  },
  {
    "name": "cl-block",
    "demo-src": "(cl-block nil\n  1\n  (cl-return 2)\n  3)\n",
    "demo-result": "2"
  },
  {
    "name": "cl-callf",
    "demo-src": ";; Toggle the value of `lexical-binding'\n(cl-callf not lexical-binding)\n",
    "demo-result": "t"
  },
  {
    "name": "cl-callf2",
    "demo-src": "(let ((s \"foo\"))\n  (cl-callf2 concat \"<\" s \">\")\n  s)\n",
    "demo-result": "\"<foo>\""
  },
  {
    "name": "cl-case",
    "demo-src": "(cl-case (random 5)\n  (0 \"0\")\n  ((1 2 3) \"[1, 3]\")\n  (t \"4\"))\n",
    "demo-result": "\"[1, 3]\""
  },
  {
    "name": "cl-ceiling",
    "demo-src": "(cl-ceiling 10 3)\n",
    "demo-result": "(4 -2)"
  },
  {
    "name": "cl-coerce",
    "demo-src": "(cl-coerce 42 'float)\n",
    "demo-result": "42.0"
  },
  {
    "name": "cl-concatenate",
    "demo-src": "(cl-concatenate 'vector '(1 2) [4 5] \"67\")\n",
    "demo-result": "[1 2 4 5 54 55]"
  },
  {
    "name": "cl-copy-list",
    "demo-src": "(cl-copy-list '(1 2 . 3))\n",
    "demo-result": "(1 2 . 3)"
  },
  {
    "name": "cl-count",
    "demo-src": "(cl-count nil '(1 2 nil () 3 4 nil) :test #'eq)\n",
    "demo-result": "3"
  },
  {
    "name": "cl-count-if",
    "demo-src": "(cl-count-if #'cl-evenp '(1 2 3 4 5))\n",
    "demo-result": "2"
  },
  {
    "name": "cl-count-if-not",
    "demo-src": "(cl-count-if-not #'cl-evenp '(1 2 3 4 5))\n",
    "demo-result": "3"
  },
  {
    "name": "cl-defgeneric",
    "demo-src": "(cl-defgeneric greet (greeter))\n\n(cl-defstruct cow)\n\n(cl-defmethod greet ((_ cow))\n  \"Moo!\")\n\n(cl-defstruct bird)\n\n(cl-defmethod greet ((_ bird))\n  \"Chirp!\")\n\n(list (greet (make-cow))\n      (greet (make-bird)))\n",
    "demo-result": "(\"Moo!\" \"Chirp!\")"
  },
  {
    "name": "cl-defmethod",
    "demo-src": "(cl-defstruct dog)\n(cl-defstruct person name)\n\n(cl-defgeneric say-hi (object)\n  \"Greeting from OBJECT.\")\n\n(cl-defmethod say-hi ((n number))\n  \"Greating from a number.\"\n  (number-to-string n))\n\n(cl-defmethod say-hi ((d dog))\n  \"Greeting from a dog.\"\n  \"wowowowowoowooo\")\n\n(cl-defmethod say-hi ((p person))\n  \"Greeting from a person.\"\n  (format \"Hello, I am %s\" (person-name p)))\n\n(mapcar #'say-hi (list 42 (make-dog) (make-person :name user-full-name)))\n",
    "demo-result": "(\"42\" \"wowowowowoowooo\" \"Hello, I am Xu Chunyang\")"
  },
  {
    "name": "cl-defstruct",
    "demo-src": "(cl-defstruct (person (:constructor person-create)\n                      (:copier nil))\n  name age sex)\n\n(let ((tom (person-create :name \"Tom\" :age 19 :sex \"Male\")))\n  (cl-incf (person-age tom))\n  tom)\n",
    "demo-result": "#s(person \"Tom\" 20 \"Male\")"
  },
  {
    "name": "cl-defun",
    "demo-src": "(cl-defun foo (a &optional b &key c d (e 17))\n  (list :a a\n        :b b\n        :c c\n        :d d\n        :e e))\n\n(foo 1 2 :c 3 :d 4)\n",
    "demo-result": "(:a 1 :b 2 :c 3 :d 4 :e 17)"
  },
  {
    "name": "cl-delete",
    "demo-src": ";; old will be changed by `cl-delete'\n(let* ((old (list 0 1 2 0))\n       (new (cl-delete 0 old :test #'=)))\n  (list new old))\n",
    "demo-result": "((1 2)\n (0 1 2))"
  },
  {
    "name": "cl-delete-duplicates",
    "demo-src": "(cl-delete-duplicates (list 1 2 3 3 2 1) :test #'=)\n",
    "demo-result": "(3 2 1)"
  },
  {
    "name": "cl-destructuring-bind",
    "demo-src": "(cl-destructuring-bind (_ b c) (list 1 2 3)\n  (list b c))\n",
    "demo-result": "(2 3)"
  },
  {
    "name": "cl-digit-char-p",
    "demo-src": "(cl-digit-char-p ?F 16)\n",
    "demo-result": "15"
  },
  {
    "name": "cl-do",
    "demo-src": "(let (res)\n  (cl-do ((x '(1 2 3) (cdr x))\n          (y '(4 5 6 7) (cdr y)))\n      ((not (and x y)) (nreverse res))\n    (push (cons (car x) (car y)) res)))\n",
    "demo-result": "((1 . 4)\n (2 . 5)\n (3 . 6))"
  },
  {
    "name": "cl-do-all-symbols",
    "demo-src": "(let (cmds)\n  (cl-do-all-symbols (sym)\n    (when (commandp sym)\n      (push sym cmds)))\n  (message \"There are %d Emacs commands right now\" (length cmds)))\n",
    "demo-result": "\"There are 8173 Emacs commands right now\""
  },
  {
    "name": "cl-do-symbols",
    "demo-src": "(let (cmds)\n  (cl-do-symbols (sym)\n    (when (commandp sym)\n      (push sym cmds)))\n  (message \"There are %d Emacs commands right now\" (length cmds)))\n",
    "demo-result": "\"There are 8173 Emacs commands right now\""
  },
  {
    "name": "cl-dolist",
    "demo-src": "(cl-dolist (i '(1 2 3 4))\n  (when (> i 2)\n    (cl-return i)))\n",
    "demo-result": "3"
  },
  {
    "name": "cl-dotimes",
    "demo-src": "(cl-dotimes (i 10)\n  (when (> i 3)\n    (cl-return i)))\n",
    "demo-result": "4"
  },
  {
    "name": "cl-ecase",
    "demo-src": "(condition-case err\n    (cl-ecase 4\n      ((1 2 3) 'do-something))\n  (error err))\n",
    "demo-result": "(error \"cl-ecase failed: 4, (3 2 1)\")"
  },
  {
    "name": "cl-equalp",
    "demo-src": "(cl-equalp 3 3.0)\n",
    "demo-result": "t"
  },
  {
    "name": "cl-etypecase",
    "demo-src": "(condition-case err\n    (cl-etypecase 42\n      (float 'float))\n  (error err))\n",
    "demo-result": "(error \"cl-etypecase failed: 42, (float)\")"
  },
  {
    "name": "cl-evenp",
    "demo-src": "(cl-evenp 0)\n",
    "demo-result": "t"
  },
  {
    "name": "cl-every",
    "demo-src": "(cl-every #'cl-evenp [0 2 4 6])\n",
    "demo-result": "t"
  },
  {
    "name": "cl-fill",
    "demo-src": "(cl-fill (list 1 2 3) 0)\n",
    "demo-result": "(0 0 0)"
  },
  {
    "name": "cl-find",
    "demo-src": "(cl-find ?o \"hello\" :test #'=)\n",
    "demo-result": "111"
  },
  {
    "name": "cl-find-if",
    "demo-src": "(cl-find-if #'cl-evenp '(1 2 3 4))\n",
    "demo-result": "2"
  },
  {
    "name": "cl-find-if-not",
    "demo-src": "(cl-find-if-not #'zerop '(0 0 0 1 2))\n",
    "demo-result": "1"
  },
  {
    "name": "cl-flet",
    "demo-src": "(cl-flet ((mean\n           (numbers)\n           (/ (apply #'+ numbers)\n              (float (length numbers)))))\n  (mean '(1 2 3 4)))\n",
    "demo-result": "2.5"
  },
  {
    "name": "cl-flet*",
    "demo-src": "(cl-flet* ((mean\n            (numbers)\n            (/ (apply #'+ numbers)\n               (float (length numbers))))\n           (variance\n            (numbers)\n            (let ((m (mean numbers)))\n              (/ (apply #'+ (mapcar (lambda (x) (expt (- x m) 2)) numbers))\n                 (float (length numbers))))))\n  (variance '(1 2 3 4)))\n",
    "demo-result": "1.25"
  },
  {
    "name": "cl-floor",
    "demo-src": "(cl-floor 10 3)\n",
    "demo-result": "(3 1)"
  },
  {
    "name": "cl-gcd",
    "demo-src": "(cl-gcd 4 6)\n",
    "demo-result": "2"
  },
  {
    "name": "cl-generic-p",
    "demo-src": "(cl-generic-p #'seq-map)\n",
    "demo-result": ""
  },
  {
    "name": "cl-incf",
    "demo-src": "(let ((x 0))\n  (cl-incf x)\n  x)\n",
    "demo-result": "1"
  },
  {
    "name": "cl-intersection",
    "demo-src": "(cl-intersection '(1 2 3) '(2 3 4))\n",
    "demo-result": "(3 2)"
  },
  {
    "name": "cl-isqrt",
    "demo-src": "(cl-isqrt 27)\n",
    "demo-result": "5"
  },
  {
    "name": "cl-labels",
    "demo-src": "(cl-labels ((len\n             (l)\n             (if l\n                 (1+ (len (cdr l)))\n               0)))\n  (len '(a b c d e)))\n",
    "demo-result": "5"
  },
  {
    "name": "cl-lcm",
    "demo-src": "(cl-lcm 4 6)\n",
    "demo-result": "12"
  },
  {
    "name": "cl-ldiff",
    "demo-src": "(let ((l (list 1 2 3 4)))\n  (cl-ldiff l (cddr l)))\n",
    "demo-result": "(1 2)"
  },
  {
    "name": "cl-letf",
    "demo-src": "(cl-letf (((symbol-function 'emacs-version) #'ignore))\n  (emacs-version))\n",
    "demo-result": "nil"
  },
  {
    "name": "cl-letf*",
    "demo-src": "(let ((lst (list 1 2 3 4)))\n  (cl-letf* (((car lst) 100)\n             ((car lst) 200))\n    (format \"%s\" lst)))\n",
    "demo-result": "\"(200 2 3 4)\""
  },
  {
    "name": "cl-loop",
    "demo-src": "(cl-loop for i from 1 to 5\n         collect i)\n",
    "demo-result": "(1 2 3 4 5)"
  },
  {
    "name": "cl-macrolet",
    "demo-src": "(cl-macrolet ((inc (var) `(setq ,var (1+ ,var))))\n  (let ((x 42))\n    (inc x)\n    x))\n",
    "demo-result": "43"
  },
  {
    "name": "cl-map",
    "demo-src": "(cl-map 'vector #'1+ '(1 2 3))\n",
    "demo-result": "[2 3 4]"
  },
  {
    "name": "cl-mapc",
    "demo-src": "(cl-mapc #'message [\"Hi, %s\" \"Hello, %s\"] '(Emacs Tom))\n",
    "demo-result": "[\"Hi, %s\" \"Hello, %s\"]"
  },
  {
    "name": "cl-mapcan",
    "demo-src": "(cl-mapcan\n (lambda (pair)\n   (let ((key (car pair))\n         (val (cdr pair)))\n     (list (intern (format \":%s\" key)) val)))\n '((x . 1) (y . 2) (z . 3)))\n",
    "demo-result": "(:x 1 :y 2 :z 3)"
  },
  {
    "name": "cl-mapcar",
    "demo-src": "(cl-mapcar #'cons '(a b c) '(1 2 3))\n",
    "demo-result": "((a . 1)\n (b . 2)\n (c . 3))"
  },
  {
    "name": "cl-mapcon",
    "demo-src": "(cl-mapcon #'copy-sequence '(1 2 3))\n",
    "demo-result": "(1 2 3 2 3 3)"
  },
  {
    "name": "cl-mapl",
    "demo-src": "(cl-mapl #'princ '(1 2 3))\n",
    "demo-result": "\"(1 2 3)(2 3)(3)\""
  },
  {
    "name": "cl-maplist",
    "demo-src": "(cl-maplist #'identity '(1 2 3))\n",
    "demo-result": "((1 2 3)\n (2 3)\n (3))"
  },
  {
    "name": "cl-member",
    "demo-src": "(cl-member 2 '(1 2 3 4) :test #'=)\n",
    "demo-result": "(2 3 4)"
  },
  {
    "name": "cl-member-if",
    "demo-src": "(cl-member-if #'cl-evenp '(1 2 3 4))\n",
    "demo-result": "(2 3 4)"
  },
  {
    "name": "cl-member-if-not",
    "demo-src": "(cl-member-if-not #'cl-evenp '(0 2 3 4 5))\n",
    "demo-result": "(3 4 5)"
  },
  {
    "name": "cl-merge",
    "demo-src": "(cl-merge 'list '(1 4 6) '(2 3 5) #'<)\n",
    "demo-result": "(1 2 3 4 5 6)"
  },
  {
    "name": "cl-minusp",
    "demo-src": "(cl-minusp -1)\n",
    "demo-result": "t"
  },
  {
    "name": "cl-mismatch",
    "demo-src": "(cl-mismatch \"HELLO\" \"hello1\" :key #'upcase)\n",
    "demo-result": "5"
  },
  {
    "name": "cl-mod",
    "demo-src": "(cl-mod 10 3)\n",
    "demo-result": "1"
  },
  {
    "name": "cl-notany",
    "demo-src": "(cl-notany #'zerop [1 2 3])\n",
    "demo-result": "t"
  },
  {
    "name": "cl-notevery",
    "demo-src": "(cl-notevery #'zerop [0 0 0 0])\n",
    "demo-result": "nil"
  },
  {
    "name": "cl-nsubst",
    "demo-src": "(let ((l (list 1 0 (list 0 1))))\n  (cl-nsubst :one 1 l :test #'eq)\n  l)\n",
    "demo-result": "(:one 0\n      (0 :one))"
  },
  {
    "name": "cl-nsubstitute",
    "demo-src": "(cl-nsubstitute :new :old (list 1 :old 2 :old) :test #'eq)\n",
    "demo-result": "(1 :new 2 :new)"
  },
  {
    "name": "cl-nsubstitute-if",
    "demo-src": "(cl-nsubstitute-if :zero #'zerop (list 1 0 1 0))\n",
    "demo-result": "(1 :zero 1 :zero)"
  },
  {
    "name": "cl-nsubstitute-if-not",
    "demo-src": "(cl-substitute-if-not :not-zero #'zerop (list 1 0 1 0))\n",
    "demo-result": "(:not-zero 0 :not-zero 0)"
  },
  {
    "name": "cl-oddp",
    "demo-src": "(cl-oddp 1)\n",
    "demo-result": "t"
  },
  {
    "name": "cl-parse-integer",
    "demo-src": "(cl-parse-integer \"400\" :radix #x10)\n",
    "demo-result": "1024"
  },
  {
    "name": "cl-plusp",
    "demo-src": "(cl-plusp 1)\n",
    "demo-result": "t"
  },
  {
    "name": "cl-position",
    "demo-src": "(cl-position \"bar\" '(\"foo\" \"bar\" \"bar\") :test #'equal)\n",
    "demo-result": "1"
  },
  {
    "name": "cl-position-if",
    "demo-src": "(cl-position-if #'zerop '(1 1 1 0 0))\n",
    "demo-result": "3"
  },
  {
    "name": "cl-position-if-not",
    "demo-src": "(cl-position-if-not #'zerop '(0 0 0 1 2))\n",
    "demo-result": "3"
  },
  {
    "name": "cl-progv",
    "demo-src": "(cl-progv (list (intern \"x\")) (list 42)\n  x)\n",
    "demo-result": "42"
  },
  {
    "name": "cl-psetf",
    "demo-src": "(let (x y z)\n  (cl-psetf x (setq z 1)\n            y (setq z 2))\n  (list x y z))\n",
    "demo-result": "(1 2 2)"
  },
  {
    "name": "cl-psetq",
    "demo-src": "(let ((x 1)\n      (y 2))\n  (cl-psetq x y\n            y x)\n  (list x y))\n",
    "demo-result": "(2 1)"
  },
  {
    "name": "cl-pushnew",
    "demo-src": "(let ((l (list 1 2 3)))\n  (cl-pushnew 0 l :test #'=)\n  (cl-pushnew 2 l :test #'=)\n  (cl-pushnew 4 l :test #'=)\n  l)\n",
    "demo-result": "(4 0 1 2 3)"
  },
  {
    "name": "cl-random",
    "demo-src": "(cl-random 10)\n",
    "demo-result": "7"
  },
  {
    "name": "cl-random-state-p",
    "demo-src": "(cl-random-state-p (cl-make-random-state))\n",
    "demo-result": "t"
  },
  {
    "name": "cl-reduce",
    "demo-src": "(cl-reduce #'+ [1 2 3])\n",
    "demo-result": "6"
  },
  {
    "name": "cl-rem",
    "demo-src": "(cl-rem 10 3)\n",
    "demo-result": "1"
  },
  {
    "name": "cl-remove",
    "demo-src": "(cl-remove 0 [0 1 2 0] :test #'=)\n",
    "demo-result": "[1 2]"
  },
  {
    "name": "cl-remove-duplicates",
    "demo-src": "(cl-remove-duplicates (list 1 nil 2 () 1) :test #'eq)\n",
    "demo-result": "(2 nil 1)"
  },
  {
    "name": "cl-remove-if",
    "demo-src": "(cl-remove-if (lambda (elt) (< elt 0)) '(0 1 -1 3 -3 5))\n",
    "demo-result": "(0 1 3 5)"
  },
  {
    "name": "cl-replace",
    "demo-src": "(cl-replace (list 0 0 3 4) (list 1 2))\n",
    "demo-result": "(1 2 3 4)"
  },
  {
    "name": "cl-return",
    "demo-src": "(cl-dolist (i '(1 2 3 4 5))\n  (when (> i 3)\n    (cl-return i)))\n",
    "demo-result": "4"
  },
  {
    "name": "cl-return-from",
    "demo-src": "(cl-block 'found\n  (dolist (i '(1 2 3 4 5))\n    (when (> i 3)\n      (cl-return-from 'found i))))\n",
    "demo-result": "4"
  },
  {
    "name": "cl-rotatef",
    "demo-src": "(seq-let [a b c d] [1 2 3 4]\n  (cl-rotatef a b c d)\n  (list a b c d))\n",
    "demo-result": "(2 3 4 1)"
  },
  {
    "name": "cl-round",
    "demo-src": "(cl-round 3 2)\n",
    "demo-result": "(2 -1)"
  },
  {
    "name": "cl-search",
    "demo-src": "(cl-search \"ar\" \"foobarzzzzz\" :test #'=)\n",
    "demo-result": "4"
  },
  {
    "name": "cl-set-difference",
    "demo-src": "(cl-set-difference '(1 2 3 4) '(2 3))\n",
    "demo-result": "(1 4)"
  },
  {
    "name": "cl-set-exclusive-or",
    "demo-src": "(cl-set-exclusive-or '(1 2 3) '(2 3 4))\n",
    "demo-result": "(1 4)"
  },
  {
    "name": "cl-shiftf",
    "demo-src": "(seq-let [a b c d] [1 2 3 4]\n  (cl-shiftf a b c d)\n  (list a b c d))\n",
    "demo-result": "(2 3 4 4)"
  },
  {
    "name": "cl-some",
    "demo-src": "(cl-some #'cdr '(nil (1) (2 . 3) (4 5)))\n",
    "demo-result": "3"
  },
  {
    "name": "cl-sort",
    "demo-src": "(cl-sort (list (cons 1 4)\n               (cons 3 6)\n               (cons 2 5))\n         #'<\n         :key #'car)\n",
    "demo-result": "((1 . 4)\n (2 . 5)\n (3 . 6))"
  },
  {
    "name": "cl-stable-sort",
    "demo-src": "(cl-stable-sort (list (cons 1 4)\n                      (cons 3 6)\n                      (cons 2 5)\n                      (cons 3 0))\n                #'<\n                :key #'car)\n",
    "demo-result": "((1 . 4)\n (2 . 5)\n (3 . 6)\n (3 . 0))"
  },
  {
    "name": "cl-subseq",
    "demo-src": "(cl-subseq '(a b c d) 1 3)\n",
    "demo-result": "(b c)"
  },
  {
    "name": "cl-subsetp",
    "demo-src": "(cl-subsetp '(1 3) '(1 2 3 4))\n",
    "demo-result": "t"
  },
  {
    "name": "cl-subst",
    "demo-src": "(cl-subst \"1\" 1 '(1 0 (1 0)) :test #'eq)\n",
    "demo-result": "(\"1\" 0\n (\"1\" 0))"
  },
  {
    "name": "cl-substitute",
    "demo-src": "(cl-substitute ?A ?a \"|aaa|\" :test #'=)\n",
    "demo-result": "\"|AAA|\""
  },
  {
    "name": "cl-substitute-if",
    "demo-src": "(cl-substitute-if :zero #'zerop '(1 0 1 0))\n",
    "demo-result": "(1 :zero 1 :zero)"
  },
  {
    "name": "cl-substitute-if-not",
    "demo-src": "(cl-substitute-if-not :not-zero #'zerop '(1 0 1 0))\n",
    "demo-result": "(:not-zero 0 :not-zero 0)"
  },
  {
    "name": "cl-symbol-macrolet",
    "demo-src": "(let ((pair (cons 5 9)))\n  (cl-symbol-macrolet ((x (car pair)))\n    (cl-incf x))\n  pair)\n",
    "demo-result": "(6 . 9)"
  },
  {
    "name": "cl-tailp",
    "demo-src": "(let* ((x '(3 4))\n       (y `(1 2 ,@x)))\n  (cl-tailp x y))\n",
    "demo-result": "t"
  },
  {
    "name": "cl-tree-equal",
    "demo-src": "(cl-tree-equal '(?a . (?b . ?c))\n               '(?A . (?B . ?C))\n               :test #'=\n               :key #'upcase)\n",
    "demo-result": "t"
  },
  {
    "name": "cl-truncate",
    "demo-src": "(cl-truncate 10 3)\n",
    "demo-result": "(3 1)"
  },
  {
    "name": "cl-typecase",
    "demo-src": "(mapcar (lambda (x)\n          (cl-typecase x\n            (integer 'integer)\n            (float   'float)\n            (string 'string)\n            (t 'anything-else)))\n        (list 42 float-pi emacs-version (current-time)))\n",
    "demo-result": "(integer float string anything-else)"
  },
  {
    "name": "cl-typep",
    "demo-src": "(cl-typep 42 'integer)\n",
    "demo-result": "t"
  },
  {
    "name": "cl-union",
    "demo-src": "(cl-union '(1 2 3) '(2 3 4))\n",
    "demo-result": "(4 1 2 3)"
  },
  {
    "name": "cl-values-list",
    "demo-src": "(cl-values-list (list 1 2 3))\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "class-p",
    "demo-src": "(defclass my-class () () \"My Class.\")\n(class-p 'my-class)\n",
    "demo-result": "t"
  },
  {
    "name": "clear-string",
    "demo-src": "(let ((password \"123456\"))\n  (clear-string password)\n  (string-to-list password))\n",
    "demo-result": "(0 0 0 0 0 0)"
  },
  {
    "name": "clrhash",
    "demo-src": "(let ((table (make-hash-table)))\n  (puthash 'x 1 table)\n  (puthash 'y 2 table)\n  (clrhash table)\n  table)\n",
    "demo-result": "#s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data\n())"
  },
  {
    "name": "coding-system-aliases",
    "demo-src": "(coding-system-aliases 'chinese-gbk)\n",
    "demo-result": "(chinese-gbk gbk cp936 windows-936)"
  },
  {
    "name": "coding-system-change-eol-conversion",
    "demo-src": "(coding-system-change-eol-conversion 'utf-8 'unix)\n",
    "demo-result": "utf-8-unix"
  },
  {
    "name": "coding-system-change-text-conversion",
    "demo-src": "(coding-system-change-text-conversion 'unix 'utf-8)\n",
    "demo-result": "utf-8-unix"
  },
  {
    "name": "coding-system-eol-type",
    "demo-src": "(coding-system-eol-type 'utf-8)\n",
    "demo-result": "[utf-8-unix utf-8-dos utf-8-mac]"
  },
  {
    "name": "coding-system-get",
    "demo-src": "(coding-system-get 'chinese-gbk :mime-charset)\n",
    "demo-result": "gbk"
  },
  {
    "name": "coding-system-list",
    "demo-src": "(length (coding-system-list 'base-only))\n",
    "demo-result": "116"
  },
  {
    "name": "coding-system-p",
    "demo-src": "(coding-system-p 'utf-8)\n",
    "demo-result": "t"
  },
  {
    "name": "color-complement",
    "demo-src": "(color-complement \"green\")\n",
    "demo-result": "(1.0 0.0 1.0)"
  },
  {
    "name": "color-name-to-rgb",
    "demo-src": "(color-name-to-rgb \"green\")\n",
    "demo-result": "(0.0 1.0 0.0)"
  },
  {
    "name": "color-rgb-to-hex",
    "demo-src": "(color-rgb-to-hex 0.0 1.0 0.0 2)\n",
    "demo-result": "\"#00ff00\""
  },
  {
    "name": "color-rgb-to-hsl",
    "demo-src": "(color-rgb-to-hsl #x86 #xDE #xFA)\n",
    "demo-result": "(0.5 -0.3036649214659686 192.0)"
  },
  {
    "name": "color-values",
    "demo-src": "(color-values \"green\")\n",
    "demo-result": "(0 65535 0)"
  },
  {
    "name": "combine-and-quote-strings",
    "demo-src": "(combine-and-quote-strings '(\"-o\" \"foo bar.txt\"))\n",
    "demo-result": "\"-o \\\"foo bar.txt\\\"\""
  },
  {
    "name": "commandp",
    "demo-src": "(commandp #'next-line)\n",
    "demo-result": "t"
  },
  {
    "name": "compare-buffer-substrings",
    "demo-src": "(with-temp-buffer\n  (insert \"foo foobar\")\n  (compare-buffer-substrings nil 1 4 nil 5 8))\n",
    "demo-result": "0"
  },
  {
    "name": "compare-strings",
    "demo-src": "(compare-strings \"hello\" nil nil \"he\" nil nil)\n",
    "demo-result": "3"
  },
  {
    "name": "completing-read",
    "demo-src": "(completing-read \"Enter a name: \" '(\"Tom\" \"Jerry\" \"Spike\" \"Tyke\"))\n",
    "demo-result": "\"Tom\""
  },
  {
    "name": "completing-read-multiple",
    "demo-src": "(completing-read-multiple \"> \" '(\"alice\" \"bob\" \"eve\"))\n",
    "demo-result": "(\"alice\" \"bob\")"
  },
  {
    "name": "completion-table-dynamic",
    "demo-src": "(completing-read\n \"> \"\n (completion-table-dynamic\n  (lambda (s)\n    (list (concat s \"123\")\n          (concat s \"456\")))))\n",
    "demo-result": ""
  },
  {
    "name": "completion-table-with-cache",
    "demo-src": "(completing-read\n \"> \"\n (completion-table-with-cache\n  (lambda (input)\n    (message \"=> Caching %s\" input)\n    (with-temp-buffer\n      (call-process \"seq\" nil t nil input)\n      (cl-loop for line in (split-string (buffer-string) \"\\n\" t)\n               collect (concat input line))))))\n",
    "demo-result": ""
  },
  {
    "name": "concat",
    "demo-src": "(concat \"hello\" \" world\")\n",
    "demo-result": "\"hello world\""
  },
  {
    "name": "cond",
    "demo-src": "(let ((x 42))\n  (cond ((= x 0) 'zero)\n        ((> x 0) 'positive)\n        (t 'negative)))\n",
    "demo-result": "positive"
  },
  {
    "name": "condition-case",
    "demo-src": "(condition-case err\n    (/ 1 0)\n  (arith-error\n   (message \"%s\" (error-message-string err))\n   nil))\n",
    "demo-result": "nil"
  },
  {
    "name": "condition-case-unless-debug",
    "demo-src": "(condition-case-unless-debug nil\n    (/ 1 0)\n  (error nil))\n",
    "demo-result": "nil"
  },
  {
    "name": "cons",
    "demo-src": "(cons 1 (cons 2 (cons 3 nil)))\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "consp",
    "demo-src": "(consp '(1 . 2))\n",
    "demo-result": "t"
  },
  {
    "name": "controlling-tty-p",
    "demo-src": "(list window-system (controlling-tty-p))\n",
    "demo-result": "(mac nil)"
  },
  {
    "name": "convert-standard-filename",
    "demo-src": "(convert-standard-filename \"etc/\")\n",
    "demo-result": "\"etc/\""
  },
  {
    "name": "copy-alist",
    "demo-src": "(let* ((alist (list (list 1 2 2)\n                    (list 3 4 4)\n                    (list 5 6 6)))\n       (copy (copy-alist alist)))\n  (list (eq (alist-get 1 alist)\n            (alist-get 1 copy))\n        (setcdr (assq 1 copy) '(22 22))\n        (eq (alist-get 1 alist)\n            (alist-get 1 copy))))\n",
    "demo-result": "(t\n (22 22)\n nil)"
  },
  {
    "name": "copy-hash-table",
    "demo-src": "(copy-hash-table #s(hash-table data (x 1 y 2)))\n",
    "demo-result": "#s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data\n(x 1 y 2))"
  },
  {
    "name": "copy-keymap",
    "demo-src": "(equal (current-local-map) (copy-keymap (current-local-map)))\n",
    "demo-result": "t"
  },
  {
    "name": "copy-sequence",
    "demo-src": "(let* ((x '(1 2 3 4))\n       (y x)\n       (z (copy-sequence x)))\n  (setq x (nreverse x))\n  (list :reversed x\n        :modified y\n        :copied z))\n",
    "demo-result": "(:reversed\n (4 3 2 1)\n :modified\n (1)\n :copied\n (1 2 3 4))"
  },
  {
    "name": "copy-tree",
    "demo-src": "(let* ((list '((1 2)))\n       (shallow-copy (copy-sequence list))\n       (deep-copy (copy-tree list)))\n  (cl-assert      (eq (car shallow-copy) (car list)))\n  (cl-assert (not (eq (car deep-copy) (car list)))))\n",
    "demo-result": "nil"
  },
  {
    "name": "copysign",
    "demo-src": "(copysign 4.0 -1.0)\n",
    "demo-result": "-4.0"
  },
  {
    "name": "cos",
    "demo-src": "(cos 0)\n",
    "demo-result": "1.0"
  },
  {
    "name": "count-lines",
    "demo-src": "(with-temp-buffer\n  (insert \"foo\\n\"\n          \"bar\\n\"\n          \"baz\\n\")\n  (count-lines (point-min) (point-max)))\n",
    "demo-result": "3"
  },
  {
    "name": "create-image",
    "demo-src": "(message (propertize \" \" 'display (create-image \"splash.png\")))\n(sit-for 3)\n",
    "demo-result": "(create-image\n ;; binary data\n (with-temp-buffer\n   (set-buffer-multibyte nil)\n   (insert-file-contents-literally\n    (expand-file-name \"images/splash.png\" data-directory))\n   (buffer-string))\n 'png 'data)\n"
  },
  {
    "name": "current-active-maps",
    "demo-src": "(length (current-active-maps))\n",
    "demo-result": "10"
  },
  {
    "name": "current-buffer",
    "demo-src": "(current-buffer)\n",
    "demo-result": "#<buffer elisp-demos.org>"
  },
  {
    "name": "current-column",
    "demo-src": "(with-temp-buffer\n  (insert \"hello\")\n  (current-column))\n",
    "demo-result": "5"
  },
  {
    "name": "current-idle-time",
    "demo-src": "(run-at-time 3 nil\n             (lambda ()\n               (sit-for 1)\n               (message \"=> %s\" (time-to-seconds (current-idle-time)))))\n",
    "demo-result": "[nil 23532 38890 487039 nil\n     (lambda nil\n       (sit-for 1)\n       (message \"=> %s\"\n                (time-to-seconds\n                 (current-idle-time))))\n     nil nil 0]"
  },
  {
    "name": "current-kill",
    "demo-src": "(progn (kill-new \"hello\")\n       (list (current-kill 0 'do-not-move)\n             (car kill-ring)))\n",
    "demo-result": "(\"hello\" \"hello\")"
  },
  {
    "name": "current-message",
    "demo-src": "(progn\n  (message \"Hello World\")\n  (current-message))\n",
    "demo-result": "\"Hello World\""
  },
  {
    "name": "current-thread",
    "demo-src": "(current-thread)\n",
    "demo-result": "#<thread 0x10061fef8>"
  },
  {
    "name": "current-time",
    "demo-src": "(current-time)\n",
    "demo-result": "(23532 37172 685559 0)"
  },
  {
    "name": "current-time-string",
    "demo-src": "(current-time-string)\n",
    "demo-result": "\"Thu Nov 15 05:18:28 2018\""
  },
  {
    "name": "current-time-zone",
    "demo-src": "(current-time-zone)\n",
    "demo-result": "(28800 \"CST\")"
  },
  {
    "name": "date-days-in-month",
    "demo-src": "(date-days-in-month 2020 2)\n",
    "demo-result": "29"
  },
  {
    "name": "date-leap-year-p",
    "demo-src": "(date-leap-year-p 2018)\n",
    "demo-result": "nil"
  },
  {
    "name": "date-to-time",
    "demo-src": "(date-to-time \"Fri, 25 Mar 2016 16:24:56 +0100\")\n",
    "demo-result": "(22261 22600)"
  },
  {
    "name": "declare",
    "demo-src": "(defun greeting ()\n  (declare (interactive-only \"Use `message' instead.\"))\n  (interactive)\n  (message \"Hello\"))\n",
    "demo-result": "greeting"
  },
  {
    "name": "declare-function",
    "demo-src": "(declare-function dired-jump \"dired-x\" (&optional other-window file-name))\n",
    "demo-result": ""
  },
  {
    "name": "decode-char",
    "demo-src": "(decode-char 'unicode ?λ)\n",
    "demo-result": "955"
  },
  {
    "name": "decode-coding-region",
    "demo-src": "(with-temp-buffer\n  (set-buffer-multibyte nil)\n  (insert #xCE #xC4)\n  (decode-coding-region (point-min) (point-max) 'chinese-gbk t))\n",
    "demo-result": "#(\"文\" 0 1\n  (charset chinese-gbk))"
  },
  {
    "name": "decode-coding-string",
    "demo-src": ";; (string-to-vector (encode-coding-string \"好\" 'chinese-gbk))\n;; => [186 195]\n\n(decode-coding-string (unibyte-string 186 195) 'chinese-gbk)\n\n;; This does NOT work\n;; (decode-coding-string (string 186 195) 'chinese-gbk)\n;;\n;; (multibyte-string-p (unibyte-string 186 195))\n;; => nil\n;; (multibyte-string-p (string 186 195))\n;; => t\n",
    "demo-result": "#(\"好\" 0 1\n  (charset chinese-gbk))"
  },
  {
    "name": "decode-time",
    "demo-src": "(decode-time)\n",
    "demo-result": "(42 20 5 15 11 2018 4 nil 28800)"
  },
  {
    "name": "defalias",
    "demo-src": "(defalias '\\` (symbol-function 'backquote))\n",
    "demo-result": ""
  },
  {
    "name": "defclass",
    "demo-src": "(defclass person ()\n  ((name :initarg :name)\n   (age :initarg :age)))\n\n(cl-defmethod say-hi ((p person))\n  (message \"Hi, I'm %s and %d years old\"\n           (oref p :name)\n           (oref p :age)))\n\n(say-hi (person :name user-full-name :age 26))\n",
    "demo-result": "\"Hi, I'm Xu Chunyang and 26 years old\""
  },
  {
    "name": "defconst",
    "demo-src": "(defconst foo-pi 3.141592653589793\n  \"The value of Pi.\")\n",
    "demo-result": ""
  },
  {
    "name": "defcustom",
    "demo-src": "(defcustom magit-git-executable \"git\"\n  \"The Git executable used by Magit.\"\n  :group 'magit-process\n  :type 'string)\n",
    "demo-result": ""
  },
  {
    "name": "defface",
    "demo-src": "(defface highlight\n  '((((class color) (min-colors 88) (background light))\n     :background \"darkseagreen2\")\n    (((class color) (min-colors 88) (background dark))\n     :background \"darkolivegreen\")\n    (((class color) (min-colors 16) (background light))\n     :background \"darkseagreen2\")\n    (((class color) (min-colors 16) (background dark))\n     :background \"darkolivegreen\")\n    (((class color) (min-colors 8))\n     :background \"green\" :foreground \"black\")\n    (t :inverse-video t))\n  \"Basic face for highlighting.\"\n  :group 'basic-faces)\n",
    "demo-result": ""
  },
  {
    "name": "defgroup",
    "demo-src": "(defgroup magit-status nil\n  \"Inspect and manipulate Git repositories.\"\n  :link '(info-link \"(magit)Status Buffer\")\n  :group 'magit-modes)\n",
    "demo-result": ""
  },
  {
    "name": "defimage",
    "demo-src": "(defimage my-splash-image\n  ((:type svg :file \"splash.svg\")\n   (:type png :file \"splash.png\")))\n",
    "demo-result": "my-splash-image"
  },
  {
    "name": "define-advice",
    "demo-src": "(define-advice shell-command (:after (&rest _) trim-trailing-newline)\n  \"Delete the annoying trailing newline after C-u M-!.\"\n  (when (and (eq this-command 'shell-command)\n             current-prefix-arg)\n    (exchange-point-and-mark t)\n    (when (eq (char-before) ?\\n)\n      (delete-char -1))))\n\n;; (advice-remove 'shell-command #'shell-command@trim-trailing-newline)\n",
    "demo-result": ""
  },
  {
    "name": "define-error",
    "demo-src": "(define-error 'foo-error \"A new error\")\n",
    "demo-result": ""
  },
  {
    "name": "define-key",
    "demo-src": "(define-key (current-global-map) (kbd \"C-c C-c\") #'emacs-version)\n",
    "demo-result": ""
  },
  {
    "name": "define-key-after",
    "demo-src": "(define-key-after\n  (lookup-key shell-mode-map [menu-bar signals])\n  [work] '(\"Work\" . work-command) 'break)\n",
    "demo-result": "nil"
  },
  {
    "name": "define-minor-mode",
    "demo-src": "(define-minor-mode display-point-mode\n  \"Display of point position using the mode line.\"\n  :lighter (:eval (format \" %d\" (point))))\n",
    "demo-result": "nil"
  },
  {
    "name": "defmacro",
    "demo-src": "(defmacro my-incf (var)\n  `(setq ,var (1+ ,var)))\n\n(let ((x 2))\n  (my-incf x)\n  x)\n",
    "demo-result": "3"
  },
  {
    "name": "defsubst",
    "demo-src": "(defsubst buffer-narrowed-p ()\n  \"Return non-nil if the current buffer is narrowed.\"\n  (/= (- (point-max) (point-min)) (buffer-size)))\n",
    "demo-result": ""
  },
  {
    "name": "defun",
    "demo-src": "(defun add-two-numbers (a b)\n  \"Add A to B.\"\n  (+ a b))\n\n(add-two-numbers 1 2)\n",
    "demo-result": "3"
  },
  {
    "name": "defvar",
    "demo-src": "(defvar foo-bar 23\n  \"The normal weight of a bar.\")\n",
    "demo-result": ""
  },
  {
    "name": "defvaralias",
    "demo-src": "(defvaralias 'messages-buffer-max-lines 'message-log-max)\n",
    "demo-result": ""
  },
  {
    "name": "delete",
    "demo-src": "(let ((l (list (list 1)\n               (list 2)\n               (list 3)\n               (list 2))))\n  (setq l (delete '(2) l))\n  l)\n",
    "demo-result": "((1)\n (3))"
  },
  {
    "name": "delete-char",
    "demo-src": "(with-temp-buffer\n  (insert \"hello\\n\")\n  (delete-char -1)\n  (buffer-string))\n",
    "demo-result": "\"hello\""
  },
  {
    "name": "delete-consecutive-dups",
    "demo-src": "(let ((l (list 1 2 2 3 2)))\n  (delete-consecutive-dups l))\n",
    "demo-result": "(1 2 3 2)"
  },
  {
    "name": "delete-dups",
    "demo-src": "(let ((l (list \"one\" \"two\" \"one\" \"three\")))\n  (setq l (delete-dups l)))\n",
    "demo-result": "(\"one\" \"two\" \"three\")"
  },
  {
    "name": "delete-file",
    "demo-src": "(delete-file (make-temp-file \"elisp-demos-\"))\n",
    "demo-result": "nil"
  },
  {
    "name": "delete-overlay",
    "demo-src": "(with-temp-buffer\n  (let ((ov (make-overlay 1 1)))\n    (list (format \"%S\" ov)\n          (delete-overlay ov)\n          (format \"%S\" ov))))\n",
    "demo-result": "(\"#<overlay from 1 to 1 in  *temp*>\" nil \"#<overlay in no buffer>\")"
  },
  {
    "name": "delete-process",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(delete-process \"*shell*\")\n",
    "demo-result": "nil"
  },
  {
    "name": "delq",
    "demo-src": "(let ((l (list 1 2 3)))\n  (setq l (delq 2 l))\n  l)\n",
    "demo-result": "(1 3)"
  },
  {
    "name": "derived-mode-p",
    "demo-src": "(with-temp-buffer\n  (emacs-lisp-mode)\n  (derived-mode-p 'prog-mode))\n",
    "demo-result": "prog-mode"
  },
  {
    "name": "detect-coding-region",
    "demo-src": "(with-temp-buffer\n  (insert ?\\0)\n  (detect-coding-region (point-min) (point-max)))\n",
    "demo-result": "(no-conversion)"
  },
  {
    "name": "detect-coding-string",
    "demo-src": "(detect-coding-string (string ?\\0))\n",
    "demo-result": "(no-conversion)"
  },
  {
    "name": "directory-file-name",
    "demo-src": "(directory-file-name \"~/.emacs.d/\")\n",
    "demo-result": "\"~/.emacs.d\""
  },
  {
    "name": "directory-files",
    "demo-src": "(directory-files \"/bin/\")\n",
    "demo-result": ";; MATCH is to filter the basename (not the full path)\n(directory-files user-emacs-directory 'full (rx \".el\" eos))\n"
  },
  {
    "name": "directory-files-and-attributes",
    "demo-src": "(directory-files-and-attributes \"/bin/\")\n",
    "demo-result": ""
  },
  {
    "name": "directory-files-recursively",
    "demo-src": "(directory-files-recursively package-user-dir (rx \".txt\" eos))\n",
    "demo-result": ""
  },
  {
    "name": "directory-name-p",
    "demo-src": "(list (directory-name-p \".\")\n      (directory-name-p \"./\"))\n",
    "demo-result": "(nil t)"
  },
  {
    "name": "discard-input",
    "demo-src": "(progn (sleep-for 2)\n       (discard-input))\n",
    "demo-result": "nil"
  },
  {
    "name": "display-backing-store",
    "demo-src": "(display-backing-store)\n",
    "demo-result": "not-useful"
  },
  {
    "name": "display-color-cells",
    "demo-src": "(display-color-cells)\n",
    "demo-result": "16777216"
  },
  {
    "name": "display-color-p",
    "demo-src": "(display-color-p)\n",
    "demo-result": "t"
  },
  {
    "name": "display-graphic-p",
    "demo-src": "(display-graphic-p)\n",
    "demo-result": "t"
  },
  {
    "name": "display-grayscale-p",
    "demo-src": "(display-grayscale-p)\n",
    "demo-result": "t"
  },
  {
    "name": "display-images-p",
    "demo-src": "(display-images-p)\n",
    "demo-result": "t"
  },
  {
    "name": "display-mm-height",
    "demo-src": "(display-mm-height)\n",
    "demo-result": "180"
  },
  {
    "name": "display-mm-width",
    "demo-src": "(display-mm-width)\n",
    "demo-result": "290"
  },
  {
    "name": "display-mouse-p",
    "demo-src": "(display-mouse-p)\n",
    "demo-result": "t"
  },
  {
    "name": "display-pixel-height",
    "demo-src": "(display-pixel-height)\n",
    "demo-result": "900"
  },
  {
    "name": "display-pixel-width",
    "demo-src": "(display-pixel-width)\n",
    "demo-result": "1440"
  },
  {
    "name": "display-planes",
    "demo-src": "(display-planes)\n",
    "demo-result": "24"
  },
  {
    "name": "display-popup-menus-p",
    "demo-src": "(display-popup-menus-p)\n",
    "demo-result": "t"
  },
  {
    "name": "display-save-under",
    "demo-src": "(display-save-under)\n",
    "demo-result": "nil"
  },
  {
    "name": "display-screens",
    "demo-src": "(display-screens)\n",
    "demo-result": "1"
  },
  {
    "name": "display-selections-p",
    "demo-src": "(display-selections-p)\n",
    "demo-result": "t"
  },
  {
    "name": "display-visual-class",
    "demo-src": "(display-visual-class)\n",
    "demo-result": "true-color"
  },
  {
    "name": "documentation",
    "demo-src": "(documentation '+)\n",
    "demo-result": "\"Return sum of any number of arguments, which are numbers or markers.\\n\\n(fn &rest NUMBERS-OR-MARKERS)\""
  },
  {
    "name": "dolist",
    "demo-src": "(let (result)\n  (dolist (elt '(1 2 3) result)\n    (push elt result)))\n",
    "demo-result": "(3 2 1)"
  },
  {
    "name": "dolist-with-progress-reporter",
    "demo-src": "(dolist-with-progress-reporter\n    (k (number-sequence 0 500))\n    \"Collecting some mana for Emacs...\"\n  (sit-for 0.01))\n",
    "demo-result": ""
  },
  {
    "name": "dom-add-child-before",
    "demo-src": "(let* ((dom '(ol nil\n                 (li nil \"Perl\")\n                 (li nil \"Python\")\n                 (li nil \"PHP\")))\n       (python (elt (dom-by-tag dom 'li) 1)))\n  (dom-add-child-before dom '(li nil \"Ruby\") python)\n  dom)\n",
    "demo-result": "(ol nil\n    (li nil \"Perl\")\n    (li nil \"Ruby\")\n    (li nil \"Python\")\n    (li nil \"PHP\"))"
  },
  {
    "name": "dom-append-child",
    "demo-src": "(dom-append-child '(ol nil\n                       (li nil \"Perl\")\n                       (li nil \"Python\")\n                       (li nil \"PHP\"))\n                  '(li nil \"Ruby\"))\n",
    "demo-result": "(ol nil\n    (li nil \"Perl\")\n    (li nil \"Python\")\n    (li nil \"PHP\")\n    (li nil \"Ruby\"))"
  },
  {
    "name": "dom-attr",
    "demo-src": "(dom-attr '(a ((href . \"https://www.gnu.org/s/emacs/\")) \"GNU Emacs\")\n          'href)\n",
    "demo-result": "\"https://www.gnu.org/s/emacs/\""
  },
  {
    "name": "dom-attributes",
    "demo-src": "(dom-attributes '(a ((href . \"https://www.gnu.org/s/emacs/\")) \"GNU Emacs\"))\n",
    "demo-result": "((href . \"https://www.gnu.org/s/emacs/\"))"
  },
  {
    "name": "dom-by-class",
    "demo-src": "(dom-by-class '(ol nil\n                   (li ((class . \"compiled\")) \"C\")\n                   (li ((class . \"interpreted\")) \"Perl\")\n                   (li ((class . \"interpreted\")) \"Python\")\n                   (li ((class . \"interpreted\")) \"PHP\")\n                   (li ((class . \"compiled\")) \"Java\"))\n              \"compiled\")\n",
    "demo-result": "((li\n  ((class . \"compiled\"))\n  \"C\")\n (li\n  ((class . \"compiled\"))\n  \"Java\"))"
  },
  {
    "name": "dom-by-id",
    "demo-src": "(dom-by-id '(body nil\n                  (h1 nil \"heading\")\n                  (p ((id . \"output\")) \"Here is some output.\"))\n           \"output\")\n",
    "demo-result": "((p\n  ((id . \"output\"))\n  \"Here is some output.\"))"
  },
  {
    "name": "dom-by-style",
    "demo-src": "(dom-by-style '(body nil\n                     (h1 ((style . \"color: blue\")) \"h1 heading\")\n                     (p ((style . \"color: red\")) \"first paragraph\")\n                     (p ((style . \"color: green\")) \"second paragraph\"))\n              (rx (or \"red\" \"green\")))\n",
    "demo-result": "((p\n  ((style . \"color: red\"))\n  \"first paragraph\")\n (p\n  ((style . \"color: green\"))\n  \"second paragraph\"))"
  },
  {
    "name": "dom-by-tag",
    "demo-src": "(dom-by-tag '(body nil\n                   (nav nil\n                        (ol nil\n                            (li nil \"Perl\")\n                            (li nil \"Python\")\n                            (li nil \"PHP\")))\n                   (h1 nil \"h1 heading\")\n                   (p nil \"paragraph\"))\n            'li)\n",
    "demo-result": "((li nil \"Perl\")\n (li nil \"Python\")\n (li nil \"PHP\"))"
  },
  {
    "name": "dom-child-by-tag",
    "demo-src": "(dom-child-by-tag\n '(ol nil\n      (li nil \"Perl\")\n      (li nil \"Python\")\n      (li nil \"PHP\"))\n 'li)\n",
    "demo-result": "(li nil \"Perl\")"
  },
  {
    "name": "dom-children",
    "demo-src": "(dom-children\n '(ol nil\n      (li nil \"Perl\")\n      (li nil \"Python\")\n      (li nil \"PHP\")))\n",
    "demo-result": "((li nil \"Perl\")\n (li nil \"Python\")\n (li nil \"PHP\"))"
  },
  {
    "name": "dom-node",
    "demo-src": ";; <a href=\"https://www.gnu.org/s/emacs/\">GNU Emacs</a>\n(dom-node 'a '((href . \"https://www.gnu.org/s/emacs/\")) \"GNU Emacs\")\n",
    "demo-result": "(a\n ((href . \"https://www.gnu.org/s/emacs/\"))\n \"GNU Emacs\")"
  },
  {
    "name": "dom-non-text-children",
    "demo-src": "(dom-non-text-children '(div nil\n                             (h1 nil \"h1 heading\")\n                             (p nil \"paragraph\")\n                             \"some text\"))\n",
    "demo-result": "((h1 nil \"h1 heading\")\n (p nil \"paragraph\"))"
  },
  {
    "name": "dom-parent",
    "demo-src": "(let* ((dom '(nav nil\n                  (ol nil\n                      (li nil \"Perl\")\n                      (li nil \"Python\")\n                      (li nil \"PHP\"))))\n       (perl (car (dom-by-tag dom 'li))))\n  (dom-parent dom perl))\n",
    "demo-result": "(ol nil\n    (li nil \"Perl\")\n    (li nil \"Python\")\n    (li nil \"PHP\"))"
  },
  {
    "name": "dom-remove-node",
    "demo-src": "(let* ((dom '(div nil\n                  (h1 nil \"title\")\n                  (p nil \"para\")))\n       (p (car (dom-by-tag dom 'p))))\n  (dom-remove-node dom p)\n  dom)\n",
    "demo-result": "(div nil\n     (h1 nil \"title\"))"
  },
  {
    "name": "dom-search",
    "demo-src": "(dom-search '(body nil\n                   (nav nil\n                        (ol nil\n                            (li nil \"Perl\")\n                            (li nil \"Python\")\n                            (li nil \"PHP\")))\n                   (h1 nil \"h1 heading\")\n                   (p nil \"paragraph\"))\n            (lambda (node) (eq 'li (car node))))\n",
    "demo-result": "((li nil \"Perl\")\n (li nil \"Python\")\n (li nil \"PHP\"))"
  },
  {
    "name": "dom-set-attribute",
    "demo-src": "(let ((dom '(a ((href . \"https://www.gnu.org/s/emacs/\")) \"GNU Emacs\")))\n  (dom-set-attribute dom 'href \"#\")\n  dom)\n",
    "demo-result": "(a\n ((href . \"#\"))\n \"GNU Emacs\")"
  },
  {
    "name": "dom-set-attributes",
    "demo-src": "(let ((dom '(a nil \"Example Domain\")))\n  (dom-set-attributes dom '((href . \"https://example.com/\")\n                            (title . \"Example Domain\")))\n  dom)\n",
    "demo-result": "(a\n ((href . \"https://example.com/\")\n  (title . \"Example Domain\"))\n \"Example Domain\")"
  },
  {
    "name": "dom-strings",
    "demo-src": "(dom-strings '(body nil\n                    (h1 nil \"Basic Emacs commands\")\n                    (p nil \"Type \" (kbd nil \"C-x C-f\") \" to open a file\")\n                    (p nil \"Type \" (kbd nil \"C-x C-c\") \" to quit Emacs\")))\n",
    "demo-result": "(\"Basic Emacs commands\" \"Type \" \"C-x C-f\" \" to open a file\" \"Type \" \"C-x C-c\" \" to quit Emacs\")"
  },
  {
    "name": "dom-tag",
    "demo-src": "(dom-tag '(p nil \"This is a paragraph\"))\n",
    "demo-result": "p"
  },
  {
    "name": "dom-text",
    "demo-src": "(dom-text '(a ((href . \"https://www.gnu.org/s/emacs/\")) \"GNU Emacs\"))\n",
    "demo-result": "\"GNU Emacs\""
  },
  {
    "name": "dom-texts",
    "demo-src": "(dom-texts '(ol nil\n                (li nil \"Perl\")\n                (li nil \"Python\")\n                (li nil \"PHP\"))\n           \", \")\n",
    "demo-result": "\"Perl, Python, PHP\""
  },
  {
    "name": "dotimes",
    "demo-src": "(dotimes (i 5)\n  (princ i))\n",
    "demo-result": "\"01234\""
  },
  {
    "name": "dotimes-with-progress-reporter",
    "demo-src": "(dotimes-with-progress-reporter (k 500) \"Collecting some mana for Emacs...\"\n  (sit-for 0.01))\n",
    "demo-result": "nil"
  },
  {
    "name": "downcase",
    "demo-src": "(downcase \"Hello World\")\n",
    "demo-result": "\"hello world\""
  },
  {
    "name": "edit-and-eval-command",
    "demo-src": "(edit-and-eval-command \"Please edit: \" '(forward-word 1))\n",
    "demo-result": "t"
  },
  {
    "name": "eieio-class-children",
    "demo-src": "(defclass circle ()\n  ((radius :initarg :radius))\n  \"A circle class.\")\n\n(defclass color-circle (circle)\n  ((color :initarg :color))\n  \"A colorful circle class.\")\n\n(eieio-class-children 'circle)\n",
    "demo-result": "(color-circle)"
  },
  {
    "name": "eieio-class-name",
    "demo-src": "(defclass rabbit ()\n  ((fur-color :initarg :fur-color)\n   (age :initarg :age))\n  \"A rabbit class.\")\n\n;; FIXME: The value is incorrect, I've submitted a bug report. (2019-11-24)\n(eieio-class-name 'rabbit)\n",
    "demo-result": "rabbit"
  },
  {
    "name": "eieio-class-parents",
    "demo-src": "(defclass circle ()\n  ((radius :initarg :radius))\n  \"A circle class.\")\n\n(defclass color-circle (circle)\n  ((color :initarg :color))\n  \"A colorful circle class.\")\n\n(eieio-class-parents 'color-circle)\n",
    "demo-result": "(#s(eieio--class circle \"A circle class.\" nil\n                 [#s(cl-slot-descriptor radius unbound t nil)]\n                 #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data\n                               (radius 0))\n                 (color-circle)\n                 ((:radius . radius))\n                 []\n                 []\n                 #s(#1 unbound)\n                 (:custom-groups nil :documentation \"A circle class.\")))\n"
  },
  {
    "name": "eieio-object-class",
    "demo-src": "(defclass my-class () ())\n(eieio-object-class (my-class))\n",
    "demo-result": "my-class"
  },
  {
    "name": "eieio-object-name",
    "demo-src": "(defclass my-class () ())\n(eieio-object-name (my-class))\n",
    "demo-result": "\"#<my-class my-class>\""
  },
  {
    "name": "elt",
    "demo-src": ";; Work on list\n;; (nth 2 '(1 2 3 4))\n(elt '(1 2 3 4) 2)\n",
    "demo-result": "3"
  },
  {
    "name": "emacs-init-time",
    "demo-src": "(emacs-init-time)\n",
    "demo-result": "\"3.9 seconds\""
  },
  {
    "name": "emacs-pid",
    "demo-src": "(emacs-pid)\n",
    "demo-result": "76707"
  },
  {
    "name": "emacs-uptime",
    "demo-src": "(emacs-uptime)\n",
    "demo-result": "\"3 hours, 3 minutes, 34 seconds\""
  },
  {
    "name": "emacs-version",
    "demo-src": "(emacs-version)\n",
    "demo-result": "\"GNU Emacs 26.1 (build 1, x86_64-apple-darwin18.2.0, Carbon Version 158 AppKit 1671.1)\\n of 2018-11-11\""
  },
  {
    "name": "encode-char",
    "demo-src": "(encode-char ?a 'unicode)\n",
    "demo-result": "97"
  },
  {
    "name": "encode-coding-region",
    "demo-src": ";; 文\n;; Unicode Codepoint #x6587, xE6 #x96 #x87\n;; GBK Codepoint #xCEC4, #xCE #xC4\n(with-temp-buffer\n  (insert ?文)\n  (mapcar #'identity (encode-coding-region (point-min) (point-max) 'chinese-gbk t)))\n",
    "demo-result": "(206 196)"
  },
  {
    "name": "encode-coding-string",
    "demo-src": ";; UTF 8 -> GBK\n(string-to-list (encode-coding-string \"文\" 'chinese-gbk))\n",
    "demo-result": "(206 196)"
  },
  {
    "name": "encode-hex-string",
    "demo-src": "(encode-hex-string \"abc\")\n",
    "demo-result": "\"616263\""
  },
  {
    "name": "encode-time",
    "demo-src": "(apply #'encode-time (decode-time))\n",
    "demo-result": "(23532 37316)"
  },
  {
    "name": "end-of-line",
    "demo-src": "(end-of-line)\n",
    "demo-result": "nil"
  },
  {
    "name": "eobp",
    "demo-src": "(with-temp-buffer (eobp))\n",
    "demo-result": "t"
  },
  {
    "name": "eolp",
    "demo-src": "(with-temp-buffer (eolp))\n",
    "demo-result": "t"
  },
  {
    "name": "eq",
    "demo-src": "(list (eq 'a 'a)\n      (eq 1 1)\n      (eq 1.0 1.0))\n",
    "demo-result": "(t t nil)"
  },
  {
    "name": "eql",
    "demo-src": "(eql 'foo 'foo)\n",
    "demo-result": "t"
  },
  {
    "name": "equal-including-properties",
    "demo-src": "(equal-including-properties \"asdf\"\n                            (propertize \"asdf\" 'asdf t))\n",
    "demo-result": "nil"
  },
  {
    "name": "erase-buffer",
    "demo-src": "(with-temp-buffer\n  (insert \"hello world\\n\")\n  (erase-buffer)\n  (buffer-string))\n",
    "demo-result": "\"\""
  },
  {
    "name": "error",
    "demo-src": "(error \"Invalid name `%s'\" \"A%%B\")\n",
    "demo-result": ""
  },
  {
    "name": "error-message-string",
    "demo-src": "(condition-case err\n    (/ 1 0)\n  (arith-error (error-message-string err)))\n",
    "demo-result": "\"Arithmetic error\""
  },
  {
    "name": "ert-deftest",
    "demo-src": "(ert-deftest foo ()\n  (should (> float-pi 3))\n  (should-not (< float-pi 3))\n  (should-error (/ 1 0) :type 'arith-error)\n  (skip-unless (featurep 'dbusbind)))\n",
    "demo-result": "foo"
  },
  {
    "name": "eshell-parse-command",
    "demo-src": "(eshell-parse-command \"ls | nl\")\n",
    "demo-result": "(eshell-trap-errors\n (eshell-execute-pipeline\n  '((eshell-named-command \"ls\")\n    (eshell-named-command \"nl\"))))"
  },
  {
    "name": "esxml-query",
    "demo-src": "(esxml-query\n \"body > div > p > a\"\n (with-current-buffer (url-retrieve-synchronously \"http://example.com\")\n   (libxml-parse-html-region url-http-end-of-headers (point-max))))\n",
    "demo-result": "(a\n ((href . \"http://www.iana.org/domains/example\"))\n \"More information...\")"
  },
  {
    "name": "esxml-query-all",
    "demo-src": "(esxml-query-all\n \"li\"\n '(body nil\n        (nav nil\n             (ol nil\n                 (li nil \"Perl\")\n                 (li nil \"Python\")\n                 (li nil \"PHP\")))\n        (h1 nil \"h1 heading\")\n        (p nil \"paragraph\")))\n",
    "demo-result": "((li nil \"Perl\")\n (li nil \"Python\")\n (li nil \"PHP\"))"
  },
  {
    "name": "esxml-to-xml",
    "demo-src": "((lambda (string)\n   \"Prettify HTML in STRING.\"\n   (with-temp-buffer\n     (insert string)\n     (html-mode)\n     (sgml-pretty-print (point-min) (point-max))\n     (buffer-string)))\n (esxml-to-xml\n  '(html nil\n         (head nil\n               (title nil \"Example Domain\")\n               (meta ((charset . \"utf-8\"))))\n         (body nil\n               (h1 nil \"Example Domain\")\n               (p nil \"This domain...\")\n               (p nil (a ((href . \"http://www.iana.org/domains/example\"))\n                         \"More information...\"))))))\n",
    "demo-result": "<html>\n  <head>\n    <title>Example Domain\n    </title>\n    <meta charset=\"utf-8\"/>\n  </head>\n  <body>\n    <h1>Example Domain\n    </h1>\n    <p>This domain...\n    </p>\n    <p>\n      <a href=\"http://www.iana.org/domains/example\">More information...\n      </a>\n    </p>\n  </body>\n</html>\n"
  },
  {
    "name": "eval",
    "demo-src": "(eval '(+ 1 2))\n",
    "demo-result": "3"
  },
  {
    "name": "eval-after-load",
    "demo-src": ";; It is easier to use `with-eval-after-load' instead\n(eval-after-load 'elisp-mode\n  (lambda ()\n    (setq answer 42)\n    (setq beast 666)))\n",
    "demo-result": ""
  },
  {
    "name": "eval-buffer",
    "demo-src": "(with-temp-buffer\n  (insert \"(+ 1 2)\")\n  (eval-buffer nil (current-buffer))\n  (buffer-string))\n",
    "demo-result": "\"(+ 1 2)\\n3\\n\""
  },
  {
    "name": "eval-minibuffer",
    "demo-src": "(eval-minibuffer \"Enter an expression: \" (format \"%s\" '(+ 1 2)))\n",
    "demo-result": "3"
  },
  {
    "name": "eval-region",
    "demo-src": "(with-temp-buffer\n  (insert \"(+ 1 2)\")\n  (eval-region (point-min) (point-max) (current-buffer))\n  (buffer-string))\n",
    "demo-result": "\"(+ 1 2)\\n3\\n\""
  },
  {
    "name": "eval-when-compile",
    "demo-src": ";;; foo.el\n\n(eval-when-compile\n  (require 'cl-lib))\n\n(defun foo ()\n  (cl-incf (point)))\n\n;;; foo.el ends here\n",
    "demo-result": "(message \"1 Day has %d seconds.\"\n         (eval-when-compile\n           (* 24 60 60)))\n"
  },
  {
    "name": "exec-path",
    "demo-src": "(exec-path)\n",
    "demo-result": ""
  },
  {
    "name": "executable-find",
    "demo-src": "(executable-find \"git\")\n",
    "demo-result": "\"/usr/local/bin/git\""
  },
  {
    "name": "exp",
    "demo-src": "(exp 1)\n",
    "demo-result": "2.718281828459045"
  },
  {
    "name": "expand-file-name",
    "demo-src": "(expand-file-name \"custom.el\" user-emacs-directory)\n",
    "demo-result": "\"/Users/xcy/.emacs.d/custom.el\""
  },
  {
    "name": "expt",
    "demo-src": "(expt 2 10)\n",
    "demo-result": "1024"
  },
  {
    "name": "extract-rectangle",
    "demo-src": "(with-temp-buffer\n  (set-mark (point))\n  (insert \"AAA\" ?\\n\n          \"BBB\" ?\\n\n          \"CCC\")\n  (rectangle-mark-mode)\n  (extract-rectangle (region-beginning) (region-end)))\n",
    "demo-result": "(\"AAA\" \"BBB\" \"CCC\")"
  },
  {
    "name": "extract-rectangle-bounds",
    "demo-src": "(with-temp-buffer\n  (set-mark (point))\n  (insert \"AAA\" ?\\n\n          \"BBB\" ?\\n\n          \"CCC\")\n  (rectangle-mark-mode)\n  (extract-rectangle-bounds (region-beginning) (region-end)))\n",
    "demo-result": "((1 . 4)\n (5 . 8)\n (9 . 12))"
  },
  {
    "name": "f-absolute?",
    "demo-src": "(f-absolute? \".\")\n",
    "demo-result": "nil"
  },
  {
    "name": "f-ancestor-of?",
    "demo-src": "(f-ancestor-of? (getenv \"HOME\") user-init-file)\n",
    "demo-result": "t"
  },
  {
    "name": "f-append-bytes",
    "demo-src": "(let ((tmpfile (make-temp-file \"elisp-demos-\")))\n  (unwind-protect\n      (progn\n        (f-append-bytes (unibyte-string 1 2 3) tmpfile)\n        (f-append-bytes (unibyte-string 4 5 6) tmpfile)\n        (string-to-list (f-read-bytes tmpfile)))\n    (delete-file tmpfile)))\n",
    "demo-result": "(1 2 3 4 5 6)"
  },
  {
    "name": "f-append-text",
    "demo-src": "(let ((tmpfile (make-temp-file \"elisp-demos-\")))\n  (unwind-protect\n      (progn\n        (f-append-text \"Hello\" 'utf-8 tmpfile)\n        (f-append-text \" World\" 'utf-8 tmpfile)\n        (f-read-text tmpfile 'utf-8))\n    (delete-file tmpfile)))\n",
    "demo-result": "\"Hello World\""
  },
  {
    "name": "f-base",
    "demo-src": "(f-base \"/path/to/file.txt\")\n",
    "demo-result": "\"file\""
  },
  {
    "name": "f-child-of?",
    "demo-src": "(f-child-of? user-init-file user-emacs-directory)\n",
    "demo-result": ""
  },
  {
    "name": "f-common-parent",
    "demo-src": "(f-common-parent '(\"foo/bar/baz\" \"foo/bar/qux\" \"foo/bar/mux\"))\n",
    "demo-result": "\"foo/bar/\""
  },
  {
    "name": "f-delete",
    "demo-src": "(let ((tmpfile (make-temp-file \"elisp-demos-\")))\n  (message \"%s is created\" tmpfile)\n  (f-delete tmpfile)\n  (unless (file-exists-p tmpfile)\n    (message \"%s is deleted\" tmpfile))\n  nil)\n",
    "demo-result": "nil"
  },
  {
    "name": "f-depth",
    "demo-src": "(f-depth \"/path/to/file\")\n",
    "demo-result": "3"
  },
  {
    "name": "f-descendant-of?",
    "demo-src": "(f-descendant-of? user-init-file (getenv \"HOME\"))\n",
    "demo-result": "t"
  },
  {
    "name": "f-directory?",
    "demo-src": "(f-directory? user-emacs-directory)\n",
    "demo-result": "t"
  },
  {
    "name": "f-dirname",
    "demo-src": "(f-dirname \"/path/to/file\")\n",
    "demo-result": "\"/path/to\""
  },
  {
    "name": "f-empty?",
    "demo-src": "(let ((tmpfile (make-temp-file \"elisp-demos-\")))\n  (unwind-protect (f-empty? tmpfile)\n    (f-delete tmpfile)))\n",
    "demo-result": "t"
  },
  {
    "name": "f-executable?",
    "demo-src": "(f-executable? \"/bin/sh\")\n",
    "demo-result": "t"
  },
  {
    "name": "f-exists?",
    "demo-src": "(f-exists? user-emacs-directory)\n",
    "demo-result": "t"
  },
  {
    "name": "f-expand",
    "demo-src": "(f-expand \"tmp/\" \"/\")\n",
    "demo-result": "\"/tmp/\""
  },
  {
    "name": "f-ext",
    "demo-src": "(f-ext \"/path/to/file.txt\")\n",
    "demo-result": "\"txt\""
  },
  {
    "name": "f-ext?",
    "demo-src": "(f-ext? \"init.el\" \"el\")\n",
    "demo-result": "t"
  },
  {
    "name": "f-file?",
    "demo-src": "(f-file? user-init-file)\n",
    "demo-result": "t"
  },
  {
    "name": "f-filename",
    "demo-src": "(f-filename \"/path/to/file\")\n",
    "demo-result": "\"file\""
  },
  {
    "name": "f-join",
    "demo-src": "(f-join \"/\" \"path\" \"to\" \"file\")\n",
    "demo-result": "\"/path/to/file\""
  },
  {
    "name": "f-mkdir",
    "demo-src": "(let ((tmpdir (make-temp-name \"/tmp/elisp-demos-\")))\n  (f-mkdir tmpdir)\n  (message \"%s is a directory and exists? %s\" tmpdir (f-dir? tmpdir))\n  (f-delete tmpdir))\n",
    "demo-result": "nil"
  },
  {
    "name": "f-no-ext",
    "demo-src": "(f-no-ext \"/path/to/file.txt\")\n",
    "demo-result": "\"/path/to/file\""
  },
  {
    "name": "f-parent-of?",
    "demo-src": "(f-parent-of? user-emacs-directory user-init-file)\n",
    "demo-result": "t"
  },
  {
    "name": "f-read-bytes",
    "demo-src": "(let ((tmpfile (make-temp-file \"elisp-demos-\")))\n  (unwind-protect\n      (progn\n        (f-write-bytes (unibyte-string 0 1 2 3) tmpfile)\n        (string-to-list (f-read-bytes tmpfile)))\n    (delete-file tmpfile)))\n",
    "demo-result": "(0 1 2 3)"
  },
  {
    "name": "f-read-text",
    "demo-src": "(let ((tmpfile (make-temp-file \"elisp-demos-\")))\n  (unwind-protect\n      (progn\n        (f-write-text \"Hello world\" 'utf-8 tmpfile)\n        (f-read-text tmpfile 'utf-8))\n    (delete-file tmpfile)))\n",
    "demo-result": "\"Hello world\""
  },
  {
    "name": "f-readable?",
    "demo-src": "(f-readable? user-init-file)\n",
    "demo-result": "t"
  },
  {
    "name": "f-relative",
    "demo-src": "(f-relative \"/path/to/file.txt\" \"/path/to/\")\n",
    "demo-result": "\"file.txt\""
  },
  {
    "name": "f-relative?",
    "demo-src": "(f-relative? \".\")\n",
    "demo-result": "t"
  },
  {
    "name": "f-root?",
    "demo-src": "(f-root? \"/\")\n",
    "demo-result": "t"
  },
  {
    "name": "f-same?",
    "demo-src": "(f-same? user-init-file \"~/.emacs.d/init.el\")\n",
    "demo-result": "t"
  },
  {
    "name": "f-short",
    "demo-src": "(f-short user-init-file)\n",
    "demo-result": "\"~/.emacs.d/init.el\""
  },
  {
    "name": "f-size",
    "demo-src": "(let ((tmpfile (make-temp-file \"elisp-demos-\")))\n  (unwind-protect\n      (progn\n        (f-write-bytes (unibyte-string 0 #xff) tmpfile)\n        (f-size tmpfile))\n    (f-delete tmpfile)))\n",
    "demo-result": "2"
  },
  {
    "name": "f-slash",
    "demo-src": "(f-slash \".\")\n",
    "demo-result": "\"./\""
  },
  {
    "name": "f-split",
    "demo-src": "(f-split \"/path/to/file\")\n",
    "demo-result": "(\"/\" \"path\" \"to\" \"file\")"
  },
  {
    "name": "f-swap-ext",
    "demo-src": "(f-swap-ext \"/path/to/file.txt\" \"org\")\n",
    "demo-result": "\"/path/to/file.org\""
  },
  {
    "name": "f-uniquify",
    "demo-src": "(f-uniquify '(\"/foo/bar\" \"/foo/baz\" \"/foo/quux\"))\n",
    "demo-result": "(\"bar\" \"baz\" \"quux\")"
  },
  {
    "name": "f-uniquify-alist",
    "demo-src": "(f-uniquify-alist '(\"/foo/bar\" \"/foo/baz\" \"/foo/quux\"))\n",
    "demo-result": "((\"/foo/bar\" . \"bar\")\n (\"/foo/baz\" . \"baz\")\n (\"/foo/quux\" . \"quux\"))"
  },
  {
    "name": "f-writable?",
    "demo-src": "(f-writable? user-init-file)\n",
    "demo-result": "t"
  },
  {
    "name": "f-write-bytes",
    "demo-src": "(let ((tmpfile (make-temp-file \"elisp-demos-\")))\n  (unwind-protect\n      (progn\n        (f-write-bytes (unibyte-string 0 1 2 3) tmpfile)\n        (string-to-list (f-read-bytes tmpfile)))\n    (delete-file tmpfile)))\n",
    "demo-result": "(0 1 2 3)"
  },
  {
    "name": "f-write-text",
    "demo-src": "(let ((tmpfile (make-temp-file \"elisp-demos-\")))\n  (unwind-protect\n      (progn\n        (f-write-text \"Hello world\" 'utf-8 tmpfile)\n        (f-read-text tmpfile 'utf-8))\n    (delete-file tmpfile)))\n",
    "demo-result": "\"Hello world\""
  },
  {
    "name": "face-all-attributes",
    "demo-src": "(face-all-attributes 'bold (selected-frame))\n",
    "demo-result": "((:family . unspecified)\n (:foundry . unspecified)\n (:width . unspecified)\n (:height . unspecified)\n (:weight . bold)\n (:slant . unspecified)\n (:underline . unspecified)\n (:overline . unspecified)\n (:strike-through . unspecified)\n (:box . unspecified)\n (:inverse-video . unspecified)\n (:foreground . unspecified)\n (:background . unspecified)\n (:stipple . unspecified)\n (:inherit . unspecified))\n"
  },
  {
    "name": "face-attribute",
    "demo-src": "(face-attribute 'bold :weight)\n",
    "demo-result": "bold"
  },
  {
    "name": "face-attribute-relative-p",
    "demo-src": "(face-attribute-relative-p :height 2.0)\n",
    "demo-result": "t"
  },
  {
    "name": "face-differs-from-default-p",
    "demo-src": "(face-differs-from-default-p 'region)\n",
    "demo-result": ":background"
  },
  {
    "name": "face-documentation",
    "demo-src": "(face-documentation 'region)\n",
    "demo-result": "\"Basic face for highlighting the region.\""
  },
  {
    "name": "face-equal",
    "demo-src": "(face-equal 'error 'warning)\n",
    "demo-result": "nil"
  },
  {
    "name": "face-id",
    "demo-src": "(face-id 'region)\n",
    "demo-result": "12"
  },
  {
    "name": "face-list",
    "demo-src": "(face-list)\n",
    "demo-result": ""
  },
  {
    "name": "facep",
    "demo-src": "(facep 'error)\n",
    "demo-result": ""
  },
  {
    "name": "fboundp",
    "demo-src": "(fboundp 'font-lock-ensure)\n",
    "demo-result": "t"
  },
  {
    "name": "fceiling",
    "demo-src": "(fceiling 1.2)\n",
    "demo-result": "2.0"
  },
  {
    "name": "feature-file",
    "demo-src": "(feature-file 'pcase)\n",
    "demo-result": "\"/Users/xcy/src/emacs-mac/lisp/emacs-lisp/pcase.elc\""
  },
  {
    "name": "featurep",
    "demo-src": "(featurep 'xemacs)\n",
    "demo-result": "nil"
  },
  {
    "name": "ffloor",
    "demo-src": "(ffloor 1.2)\n",
    "demo-result": "1.0"
  },
  {
    "name": "file-accessible-directory-p",
    "demo-src": "(file-accessible-directory-p user-emacs-directory)\n",
    "demo-result": "t"
  },
  {
    "name": "file-attribute-modes",
    "demo-src": "(file-attribute-modes (file-attributes user-init-file))\n",
    "demo-result": "\"-rw-r--r--\""
  },
  {
    "name": "file-attribute-modification-time",
    "demo-src": "(format-time-string\n \"%F %T\"\n (file-attribute-modification-time (file-attributes user-init-file)))\n",
    "demo-result": "\"2020-03-01 02:20:27\""
  },
  {
    "name": "file-attribute-size",
    "demo-src": "(file-attribute-size (file-attributes user-init-file))\n",
    "demo-result": "201878"
  },
  {
    "name": "file-attributes",
    "demo-src": "(file-attributes user-init-file)\n",
    "demo-result": "(nil 1 501 20\n     (23533 25246 3637 220000)\n     (23533 25245 994959 733000)\n     (23533 25245 994959 733000)\n     150332 \"-rw-r--r--\" t 8617049288 16777220)"
  },
  {
    "name": "file-dependents",
    "demo-src": "(file-dependents (feature-file 'cl))\n",
    "demo-result": "(\"/Users/xcy/.emacs.d/package-quickstart.el\")"
  },
  {
    "name": "file-directory-p",
    "demo-src": "(file-directory-p user-emacs-directory)\n",
    "demo-result": "t"
  },
  {
    "name": "file-equal-p",
    "demo-src": "(file-equal-p \"~/.emacs.d/init.el\" user-init-file)\n",
    "demo-result": "t"
  },
  {
    "name": "file-executable-p",
    "demo-src": "(file-executable-p \"/bin/sh\")\n",
    "demo-result": "t"
  },
  {
    "name": "file-exists-p",
    "demo-src": "(file-exists-p user-init-file)\n",
    "demo-result": "t"
  },
  {
    "name": "file-expand-wildcards",
    "demo-src": "(file-expand-wildcards \"*.el\")\n",
    "demo-result": "(\"elisp-demos-tests.el\" \"elisp-demos.el\")"
  },
  {
    "name": "file-in-directory-p",
    "demo-src": "(file-in-directory-p user-init-file user-emacs-directory)\n",
    "demo-result": "t"
  },
  {
    "name": "file-local-name",
    "demo-src": "(file-local-name \"/ssh:USER@HOST:/foo/bar\")\n",
    "demo-result": "\"/foo/bar\""
  },
  {
    "name": "file-modes",
    "demo-src": "(format \"%o\" (file-modes user-init-file))\n",
    "demo-result": "\"644\""
  },
  {
    "name": "file-name-absolute-p",
    "demo-src": "(list (file-name-absolute-p \"README.md\")\n      (file-name-absolute-p \"/path/to/README.md\"))\n",
    "demo-result": "(nil t)"
  },
  {
    "name": "file-name-all-completions",
    "demo-src": "(file-name-all-completions \"vim\" \"/usr/bin/\")\n",
    "demo-result": "(\"vimtutor\" \"vimdiff\" \"vim\")"
  },
  {
    "name": "file-name-as-directory",
    "demo-src": "(file-name-as-directory \"~\")\n",
    "demo-result": "\"~/\""
  },
  {
    "name": "file-name-base",
    "demo-src": "(file-name-base \"/Users/xcy/.emacs.d/init.el\")\n",
    "demo-result": "\"init\""
  },
  {
    "name": "file-name-case-insensitive-p",
    "demo-src": ";; Some macOS systems's file system is case-insensitive\n(file-name-case-insensitive-p user-init-file)\n",
    "demo-result": "t"
  },
  {
    "name": "file-name-completion",
    "demo-src": "(file-name-completion \"em\" \"/usr/bin/\")\n",
    "demo-result": "\"emacs\""
  },
  {
    "name": "file-name-directory",
    "demo-src": "(file-name-directory \"/Users/xcy/.emacs.d/init.el\")\n",
    "demo-result": "\"/Users/xcy/.emacs.d/\""
  },
  {
    "name": "file-name-extension",
    "demo-src": "(file-name-extension \"init.el\")\n",
    "demo-result": "\"el\""
  },
  {
    "name": "file-name-nondirectory",
    "demo-src": "(file-name-nondirectory \"/Users/xcy/.emacs.d/init.el\")\n",
    "demo-result": "\"init.el\""
  },
  {
    "name": "file-name-sans-extension",
    "demo-src": "(file-name-sans-extension \"simple.el.gz\")\n",
    "demo-result": "\"simple.el\""
  },
  {
    "name": "file-name-sans-versions",
    "demo-src": "(file-name-sans-versions \"README.md~\")\n",
    "demo-result": "\"README.md\""
  },
  {
    "name": "file-newer-than-file-p",
    "demo-src": "(let ((file1 (make-temp-file \"elisp-demo-\"))\n      (file2 (make-temp-file \"elisp-demo-\")))\n  (unwind-protect\n      (file-newer-than-file-p file2 file1)\n    (delete-file file1)\n    (delete-file file2)))\n",
    "demo-result": "t"
  },
  {
    "name": "file-nlinks",
    "demo-src": "(file-nlinks \"/usr/bin/vim\")\n",
    "demo-result": "1"
  },
  {
    "name": "file-notify-add-watch",
    "demo-src": "(file-notify-add-watch\n user-init-file\n '(change attribute-change)\n (lambda (event) (message \"Event %S\" event)))\n",
    "demo-result": "45"
  },
  {
    "name": "file-ownership-preserved-p",
    "demo-src": "(file-ownership-preserved-p user-init-file)\n",
    "demo-result": "t"
  },
  {
    "name": "file-readable-p",
    "demo-src": "(file-readable-p user-init-file)\n",
    "demo-result": "t"
  },
  {
    "name": "file-regular-p",
    "demo-src": "(file-regular-p user-init-file)\n",
    "demo-result": "t"
  },
  {
    "name": "file-relative-name",
    "demo-src": "(file-relative-name user-init-file user-emacs-directory)\n",
    "demo-result": "\"init.el\""
  },
  {
    "name": "file-remote-p",
    "demo-src": "(file-remote-p \"/ssh:USER@HOST:/foo/bar\")\n",
    "demo-result": "\"/ssh:USER@HOST:\""
  },
  {
    "name": "file-size-human-readable",
    "demo-src": "(file-size-human-readable 1024)\n",
    "demo-result": "\"1k\""
  },
  {
    "name": "file-symlink-p",
    "demo-src": "(file-symlink-p \"/usr/bin/ex\")\n",
    "demo-result": "\"vim\""
  },
  {
    "name": "file-system-info",
    "demo-src": "(file-system-info user-init-file)\n",
    "demo-result": "(121123069952 19899543552 15998967808)"
  },
  {
    "name": "file-truename",
    "demo-src": "(file-truename \"~/../../\")\n",
    "demo-result": "\"/\""
  },
  {
    "name": "file-writable-p",
    "demo-src": "(file-writable-p user-init-file)\n",
    "demo-result": "t"
  },
  {
    "name": "filepos-to-bufferpos",
    "demo-src": "(with-temp-buffer\n  (insert \"(λ)\")\n  (filepos-to-bufferpos 1))\n",
    "demo-result": "2"
  },
  {
    "name": "fill-common-string-prefix",
    "demo-src": "(fill-common-string-prefix \"bar\" \"baz\")\n",
    "demo-result": "\"ba\""
  },
  {
    "name": "fillarray",
    "demo-src": "(let ((array (vector 1 2 3)))\n  (fillarray array 0)\n  array)\n",
    "demo-result": "[0 0 0]"
  },
  {
    "name": "find-class",
    "demo-src": "(defclass my-class () () \"My Class.\")\n(find-class 'my-class)\n",
    "demo-result": "#s(eieio--class my-class \"My Class.\" nil\n                []\n                #s(hash-table size 65 test eq rehash-size 1.5 rehash-threshold 0.8125 data\n                              ())\n                nil nil\n                []\n                []\n                #s(#0)\n                (:custom-groups nil :documentation \"My Class.\"))"
  },
  {
    "name": "find-coding-systems-region",
    "demo-src": "(with-temp-buffer\n  (insert \"世界，你好\")\n  (length (find-coding-systems-region (point-min) (point-max))))\n",
    "demo-result": "39"
  },
  {
    "name": "find-coding-systems-string",
    "demo-src": "(length (find-coding-systems-string \"世界，你好\"))\n",
    "demo-result": "39"
  },
  {
    "name": "find-definition-noselect",
    "demo-src": "(find-definition-noselect 'pcase nil)\n",
    "demo-result": "(#<buffer pcase.el.gz> . 4220)"
  },
  {
    "name": "find-file",
    "demo-src": "(find-file user-init-file)\n",
    "demo-result": "#<buffer init.el>"
  },
  {
    "name": "find-file-literally",
    "demo-src": "(find-file-literally user-init-file)\n",
    "demo-result": ""
  },
  {
    "name": "find-file-noselect",
    "demo-src": "(find-file-noselect user-init-file)\n",
    "demo-result": "#<buffer init.el>"
  },
  {
    "name": "find-file-other-window",
    "demo-src": "(find-file-other-window user-init-file)\n",
    "demo-result": "#<buffer init.el>"
  },
  {
    "name": "find-file-read-only",
    "demo-src": "(find-file-read-only user-init-file)\n",
    "demo-result": "#<buffer init.el>"
  },
  {
    "name": "find-function-C-source",
    "demo-src": "(find-function-C-source 'car \"data.c\" nil)\n",
    "demo-result": "(#<buffer data.c> . 13992)"
  },
  {
    "name": "find-function-noselect",
    "demo-src": "(find-function-noselect 'pcase)\n",
    "demo-result": "(#<buffer pcase.el.gz> . 4220)"
  },
  {
    "name": "find-function-search-for-symbol",
    "demo-src": "(find-function-search-for-symbol\n 'car nil\n (help-C-file-name (symbol-function 'car) 'subr))\n",
    "demo-result": "(#<buffer data.c> . 13992)"
  },
  {
    "name": "find-image",
    "demo-src": "(find-image '((:type svg :file \"splash.svg\")\n              (:type png :file \"splash.png\")))\n",
    "demo-result": "(image :type svg :file \"/usr/local/share/emacs/26.2/etc/images/splash.svg\")"
  },
  {
    "name": "find-library-name",
    "demo-src": "(find-library-name \"seq\")\n",
    "demo-result": "\"/Users/xcy/src/emacs-mac/lisp/emacs-lisp/seq.el\""
  },
  {
    "name": "find-lisp-object-file-name",
    "demo-src": "(find-lisp-object-file-name 'if (symbol-function 'if))\n",
    "demo-result": "\"src/eval.c\""
  },
  {
    "name": "find-variable-noselect",
    "demo-src": "(find-variable-noselect 'emacs-version)\n",
    "demo-result": "(#<buffer emacs.c> . 91318)"
  },
  {
    "name": "flatten-tree",
    "demo-src": "(flatten-tree '(1 (2 . 3) nil (4 5 (6)) 7))\n",
    "demo-result": "(1 2 3 4 5 6 7)"
  },
  {
    "name": "float",
    "demo-src": ";; -> 0\n(float 1)\n",
    "demo-result": "1.0"
  },
  {
    "name": "float-time",
    "demo-src": "(float-time)\n",
    "demo-result": "1542230331.775671"
  },
  {
    "name": "floatp",
    "demo-src": "(floatp float-pi)\n",
    "demo-result": "t"
  },
  {
    "name": "floor",
    "demo-src": ";; -> -∞\n(floor 1.2)\n",
    "demo-result": "1"
  },
  {
    "name": "fmakunbound",
    "demo-src": "(defun foo ()\n  42)\n\n(fmakunbound 'foo)\n\n(fboundp 'foo)\n",
    "demo-result": "nil"
  },
  {
    "name": "following-char",
    "demo-src": "(with-temp-buffer\n  (insert \"ABC\")\n  (following-char))\n",
    "demo-result": "0"
  },
  {
    "name": "font-at",
    "demo-src": "(font-at 1)\n",
    "demo-result": "#<font-object \"-*-Source Code Pro-normal-italic-normal-*-13-*-*-*-m-0-iso10646-1\">"
  },
  {
    "name": "font-face-attributes",
    "demo-src": "(font-face-attributes (face-attribute 'default :font))\n",
    "demo-result": "(:family \"Source Code Pro\" :height 130 :weight normal :slant normal :width normal)"
  },
  {
    "name": "font-family-list",
    "demo-src": "(font-family-list)\n",
    "demo-result": ""
  },
  {
    "name": "font-get",
    "demo-src": "(font-get (face-attribute 'default :font) :size)\n",
    "demo-result": "13"
  },
  {
    "name": "font-info",
    "demo-src": "(font-info \"Courier\")\n",
    "demo-result": "[\"-*-Courier-normal-normal-normal-*-12-*-*-*-m-0-iso10646-1\" \"Courier:pixelsize=12:weight=normal:slant=normal:width=normal:spacing=100:scalable=true\" 12 14 0 0 0 7 11 3 7 7 nil nil]"
  },
  {
    "name": "font-lock-ensure",
    "demo-src": "(with-temp-buffer\n  (insert \":foo\")\n  (delay-mode-hooks (emacs-lisp-mode))\n  (font-lock-ensure)\n  (buffer-string))\n",
    "demo-result": "#(\":foo\" 0 4\n  (face font-lock-builtin-face))"
  },
  {
    "name": "fontp",
    "demo-src": "(fontp (face-attribute 'default :font))\n",
    "demo-result": "t"
  },
  {
    "name": "format",
    "demo-src": "(format \"Hello, %s!\" \"World\")\n",
    "demo-result": "\"Hello, World!\""
  },
  {
    "name": "format-message",
    "demo-src": "(let ((text-quoting-style 'curve))\n  (format-message \"The version is stored in `emacs-version'\"))\n",
    "demo-result": "\"The version is stored in ‘emacs-version’\""
  },
  {
    "name": "format-mode-line",
    "demo-src": "(format-mode-line '(buffer-file-name \"%f\" \"%b\"))\n",
    "demo-result": "\"/Users/xcy/src/elisp-demos/elisp-demos.org\""
  },
  {
    "name": "format-network-address",
    "demo-src": "(format-network-address [192 160 0 102 0])\n",
    "demo-result": "\"192.160.0.102:0\""
  },
  {
    "name": "format-seconds",
    "demo-src": "(format-seconds \"Emacs is %y years, %d days, %h hours, %m minutes, %s seconds old\"\n                ;; Initial release, 20 March 1985\n                (time-to-seconds (time-subtract nil (date-to-time \"1985-03-20T00:00:00Z\"))))\n",
    "demo-result": "\"Emacs is 33 years, 247 days, 21 hours, 32 minutes, 51 seconds old\""
  },
  {
    "name": "format-spec",
    "demo-src": "(format-spec \"%a + %b = %b + %a\" '((?a . 1) (?b . 2)))\n",
    "demo-result": "\"1 + 2 = 2 + 1\""
  },
  {
    "name": "format-spec-make",
    "demo-src": "(format-spec-make ?a 1 ?b 2)\n",
    "demo-result": "((97 . 1)\n (98 . 2))"
  },
  {
    "name": "format-time-string",
    "demo-src": "(format-time-string \"%Y-%m-%d %H:%M:%S %z\")\n",
    "demo-result": "\"2018-11-15 05:23:25 +0800\""
  },
  {
    "name": "forward-line",
    "demo-src": "(forward-line)\n",
    "demo-result": "0"
  },
  {
    "name": "frame-list",
    "demo-src": "(frame-list)\n",
    "demo-result": "(#<frame /Users/xcy/src/elisp-demos/elisp-demos.org 0x1049a21e8>)"
  },
  {
    "name": "frame-list-z-order",
    "demo-src": "(frame-list-z-order)\n",
    "demo-result": "(#<frame /Users/xcy/src/elisp-demos/elisp-demos.org 0x1049a21e8>)"
  },
  {
    "name": "frame-root-window",
    "demo-src": "(frame-root-window)\n",
    "demo-result": "#<window 43>"
  },
  {
    "name": "frame-terminal",
    "demo-src": "(frame-terminal)\n",
    "demo-result": "#<terminal 1 on Mac>"
  },
  {
    "name": "frexp",
    "demo-src": "(frexp 8)\n",
    "demo-result": "(0.5 . 4)"
  },
  {
    "name": "fround",
    "demo-src": "(fround 1.5)\n",
    "demo-result": "2.0"
  },
  {
    "name": "fset",
    "demo-src": "(fset 'foo (lambda () 42))\n\n(foo)\n",
    "demo-result": "42"
  },
  {
    "name": "ftruncate",
    "demo-src": "(ftruncate 1.2)\n",
    "demo-result": "1.0"
  },
  {
    "name": "func-arity",
    "demo-src": "(func-arity #'+)\n",
    "demo-result": "(0 . many)"
  },
  {
    "name": "funcall",
    "demo-src": "(funcall (intern \"+\") 1 2 3)\n",
    "demo-result": "6"
  },
  {
    "name": "function-get",
    "demo-src": "(list (get 'count-matches 'modifier-cache)\n      (function-get 'count-matches 'modifier-cache))\n",
    "demo-result": "(nil\n ((0 . how-many)))"
  },
  {
    "name": "function-put",
    "demo-src": "(function-put 'count-matches 'foo \"test\")\n",
    "demo-result": "\"test\""
  },
  {
    "name": "gap-position",
    "demo-src": "(gap-position)\n",
    "demo-result": "18468"
  },
  {
    "name": "gap-size",
    "demo-src": "(gap-size)\n",
    "demo-result": "2520"
  },
  {
    "name": "generate-new-buffer",
    "demo-src": "(generate-new-buffer \"*foo*\")\n",
    "demo-result": "#<buffer *foo*<3>>"
  },
  {
    "name": "generate-new-buffer-name",
    "demo-src": "(generate-new-buffer-name \"*Messages*\")\n",
    "demo-result": "\"*Messages*<2>\""
  },
  {
    "name": "generic-p",
    "demo-src": "(defclass circle ()\n  ((radius :initarg :radius))\n  \"A circle class.\")\n\n(cl-defmethod area ((c circle))\n  \"Return area of the circle C.\"\n  (* float-pi (expt (oref c :radius) 2)))\n\n;; C-h f area\n(generic-p 'area)\n",
    "demo-result": "t"
  },
  {
    "name": "gensym",
    "demo-src": "(list gensym-counter\n      (gensym)\n      gensym-counter)\n",
    "demo-result": "(11 g11 12)"
  },
  {
    "name": "get",
    "demo-src": "(get 'beginning-of-buffer 'interactive-only)\n",
    "demo-result": "\"use `(goto-char (point-min))' instead.\""
  },
  {
    "name": "get-buffer",
    "demo-src": "(get-buffer \"*Messages*\")\n",
    "demo-result": "#<buffer *Messages*>"
  },
  {
    "name": "get-buffer-create",
    "demo-src": "(get-buffer-create \" *foo*\")\n",
    "demo-result": "#<buffer  *foo*>"
  },
  {
    "name": "get-buffer-process",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(get-buffer-process \"*shell*\")\n",
    "demo-result": "#<process shell>"
  },
  {
    "name": "get-byte",
    "demo-src": ";; λ, #x3bb, #xCE #xBB\n(format \"#x%X\" (get-byte 0 (string-as-unibyte \"λ\")))\n",
    "demo-result": "\"#xCE\""
  },
  {
    "name": "get-char-code-property",
    "demo-src": "(get-char-code-property ?A 'name)\n",
    "demo-result": "\"LATIN CAPITAL LETTER A\""
  },
  {
    "name": "get-device-terminal",
    "demo-src": "(get-device-terminal nil)\n",
    "demo-result": "#<terminal 1 on Mac>"
  },
  {
    "name": "get-file-buffer",
    "demo-src": "(get-file-buffer user-init-file)\n",
    "demo-result": "#<buffer init.el>"
  },
  {
    "name": "get-free-disk-space",
    "demo-src": "(get-free-disk-space \".\")\n",
    "demo-result": "\"14.9 GiB\""
  },
  {
    "name": "get-internal-run-time",
    "demo-src": "(time-to-seconds (get-internal-run-time))\n",
    "demo-result": "103.553696"
  },
  {
    "name": "get-process",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(get-process \"shell\")\n",
    "demo-result": "#<process shell>"
  },
  {
    "name": "getenv",
    "demo-src": "(getenv \"TERM\")\n",
    "demo-result": "\"dumb\""
  },
  {
    "name": "gethash",
    "demo-src": "(gethash 'x #s(hash-table data (x 1 y 2)))\n",
    "demo-result": "1"
  },
  {
    "name": "gnutls-available-p",
    "demo-src": "(length (gnutls-available-p))\n",
    "demo-result": "30"
  },
  {
    "name": "gnutls-hash-mac",
    "demo-src": ";; ~ $ echo -n \"value\" | openssl dgst -sha1 -hmac \"key\"\n;; 57443a4c052350a44638835d64fd66822f813319\n(mapconcat\n (lambda (char) (format \"%02x\" char))\n (gnutls-hash-mac 'SHA1 \"key\" \"value\")\n \"\")\n",
    "demo-result": "\"57443a4c052350a44638835d64fd66822f813319\""
  },
  {
    "name": "gnutls-negotiate",
    "demo-src": "(let* ((host \"example.com\") (port 443)\n       (buffer (generate-new-buffer \"*https*\"))\n       (proc (make-network-process\n              :name \"https\"\n              :buffer buffer\n              :host host\n              :service port)))\n  (display-buffer buffer)\n  (gnutls-negotiate :process proc\n                    :hostname host)\n  (process-send-string\n   proc\n   \"GET / HTTP/1.1\\r\\nHost: example.com\\r\\nConnection: Close\\r\\n\\r\\n\"))\n",
    "demo-result": ""
  },
  {
    "name": "gnutls-symmetric-decrypt",
    "demo-src": "(gnutls-symmetric-decrypt\n 'RC2-40 \"key12\" \"iv123456\"\n (unibyte-string\n  96 70 247 93 105 98 150 70))\n",
    "demo-result": "(\"VALUE121\" \"iv123456\")"
  },
  {
    "name": "gnutls-symmetric-encrypt",
    "demo-src": "(gnutls-symmetric-encrypt 'RC2-40 \"key12\" \"iv123456\" \"VALUE121\")\n",
    "demo-result": "(\"`F\\367]ib\\226F\" \"iv123456\")"
  },
  {
    "name": "goto-char",
    "demo-src": "(goto-char (point-min))\n",
    "demo-result": ""
  },
  {
    "name": "group-gid",
    "demo-src": "(group-gid)\n",
    "demo-result": "20"
  },
  {
    "name": "group-name",
    "demo-src": "(group-name (group-gid))\n",
    "demo-result": "\"staff\""
  },
  {
    "name": "group-real-gid",
    "demo-src": "(group-real-gid)\n",
    "demo-result": "20"
  },
  {
    "name": "gv-define-setter",
    "demo-src": "(gv-define-setter caar (val x) `(setcar (car ,x) ,val))\n",
    "demo-result": ""
  },
  {
    "name": "gv-define-simple-setter",
    "demo-src": "(gv-define-simple-setter car setcar)\n",
    "demo-result": ""
  },
  {
    "name": "hash-table-count",
    "demo-src": "(hash-table-count #s(hash-table data (x 1 y 2 z 3)))\n",
    "demo-result": "3"
  },
  {
    "name": "hash-table-empty-p",
    "demo-src": "(hash-table-empty-p #s(hash-table))\n",
    "demo-result": "t"
  },
  {
    "name": "hash-table-keys",
    "demo-src": "(hash-table-keys #s(hash-table data (x 1 y 2 z 3)))\n",
    "demo-result": "(x y z)"
  },
  {
    "name": "hash-table-p",
    "demo-src": "(hash-table-p #s(hash-table))\n",
    "demo-result": "t"
  },
  {
    "name": "hash-table-rehash-size",
    "demo-src": "(hash-table-rehash-size #s(hash-table))\n",
    "demo-result": "1.5"
  },
  {
    "name": "hash-table-rehash-threshold",
    "demo-src": "(hash-table-rehash-threshold #s(hash-table))\n",
    "demo-result": "0.8125"
  },
  {
    "name": "hash-table-size",
    "demo-src": "(hash-table-size #s(hash-table))\n",
    "demo-result": "65"
  },
  {
    "name": "hash-table-test",
    "demo-src": "(hash-table-test #s(hash-table test eq))\n",
    "demo-result": "eq"
  },
  {
    "name": "hash-table-values",
    "demo-src": "(hash-table-values #s(hash-table data (x 1 y 2 z 3)))\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "hash-table-weakness",
    "demo-src": "(hash-table-weakness #s(hash-table))\n",
    "demo-result": "nil"
  },
  {
    "name": "helm-build-async-source",
    "demo-src": "(helm\n :prompt (format \"%s $ find . -type f -iname \" (helm-default-directory))\n :sources\n (helm-build-async-source \"find\"\n   :candidates-process\n   (lambda ()\n     (let ((proc (let (process-connection-type)\n                   (apply #'start-process \"helm-find\" helm-buffer\n                          \"find\" \".\" \"-type\" \"f\"\n                          (unless (string-empty-p helm-pattern)\n                            (list \"-iname\" helm-pattern))))))\n       (set-process-sentinel proc #'ignore)\n       proc))\n   :action #'find-file\n   :nohighlight t))\n",
    "demo-result": ""
  },
  {
    "name": "helm-build-dummy-source",
    "demo-src": "(helm :sources\n      (helm-build-dummy-source \"test\"\n        :filtered-candidate-transformer\n        (lambda (_candidates _source)\n          (mapcar\n           (lambda (c) (format \"%c: %d\" c c))\n           helm-pattern))\n        :nohighlight t))\n",
    "demo-result": ""
  },
  {
    "name": "helm-build-in-buffer-source",
    "demo-src": "(helm :sources (helm-build-in-buffer-source \"test\"\n                 :data '(\"foo\" \"bar\" \"baz\"))\n      :buffer \"*helm test*\")\n",
    "demo-result": "\"foo\""
  },
  {
    "name": "helm-build-in-file-source",
    "demo-src": "(helm :sources (helm-build-in-file-source \"search init.el\" user-init-file))\n",
    "demo-result": "\";;; init.el --- Xu Chunyang's Emacs Configuration  -*- lexical-binding: t; -*-\""
  },
  {
    "name": "helm-build-sync-source",
    "demo-src": "(helm\n :sources\n (helm-build-sync-source \"test\"\n   :candidates '(\"foo\" \"bar\" \"baz\")\n   :action '((\"Message\" . (lambda (candidate) (message \"%s selected\" candidate)))\n             (\"Insert\" . insert))))\n",
    "demo-result": "\"bar selected\""
  },
  {
    "name": "help-C-file-name",
    "demo-src": "(help-C-file-name (symbol-function 'if) 'subr)\n",
    "demo-result": "\"src/eval.c\""
  },
  {
    "name": "hmac-md5",
    "demo-src": "(encode-hex-string (hmac-md5 \"Hi There\" (make-string 16 ?\\x0b)))\n",
    "demo-result": "\"9294727a3638bb1c13f48ef8158bfc9d\""
  },
  {
    "name": "hmac-md5-96",
    "demo-src": "(encode-hex-string\n (hmac-md5-96 \"Test With Truncation\" (make-string 16 ?\\x0c)))\n",
    "demo-result": "\"56461ef2342edc00f9bab995\""
  },
  {
    "name": "identity",
    "demo-src": "(identity 42)\n",
    "demo-result": "42"
  },
  {
    "name": "if",
    "demo-src": "(if nil 1 2)\n",
    "demo-result": "2"
  },
  {
    "name": "if-let",
    "demo-src": "(if-let ((match-index (string-match \"d\" \"abcd\")))\n    (+ match-index 2)\n  \"It does not match\")\n",
    "demo-result": "5"
  },
  {
    "name": "if-let*",
    "demo-src": "(if-let* ((match-index (string-match \"d\" \"abcd\")))\n    (+ match-index 2)\n  \"It does not match\")\n",
    "demo-result": "5"
  },
  {
    "name": "ignore",
    "demo-src": "(ignore 42)\n",
    "demo-result": "nil"
  },
  {
    "name": "ignore-error",
    "demo-src": "(ignore-error end-of-file\n  (read \"\"))\n",
    "demo-result": "nil"
  },
  {
    "name": "ignore-errors",
    "demo-src": "(ignore-errors (/ 1 0))\n",
    "demo-result": "nil"
  },
  {
    "name": "image-transforms-p",
    "demo-src": "(image-transforms-p)\n",
    "demo-result": "(scale rotate90)"
  },
  {
    "name": "image-type-available-p",
    "demo-src": "(image-type-available-p 'imagemagick)\n",
    "demo-result": "t"
  },
  {
    "name": "imap-open",
    "demo-src": "(let* ((server \"imap.fastmail.com\")\n       (user \"mail@xuchunyang.me\")\n       (pass (when-let ((auth (car (auth-source-search\n                                    :host server\n                                    :user user\n                                    :max 1)))\n                        (pass (plist-get auth :secret)))\n               (funcall pass))))\n  (with-current-buffer (imap-open server nil 'tls)\n    (imap-authenticate user pass)\n    (imap-mailbox-select \"INBOX\" 'read-only)\n    (prog1 (message \"You have %d unread emails in Inbox\"\n                    (length (imap-search \"UNSEEN\")))\n      (imap-close))))\n",
    "demo-result": "\"You have 3 unread emails in Inbox\""
  },
  {
    "name": "indirect-function",
    "demo-src": "(indirect-function #'+)\n",
    "demo-result": "#<subr +>"
  },
  {
    "name": "indirect-variable",
    "demo-src": "(indirect-variable 'indicate-unused-lines)\n",
    "demo-result": "indicate-empty-lines"
  },
  {
    "name": "insert",
    "demo-src": "(with-temp-buffer\n  (insert \"hello\" ?\\s \"world\" ?\\n)\n  (buffer-string))\n",
    "demo-result": "\"hello world\\n\""
  },
  {
    "name": "insert-buffer-substring",
    "demo-src": "(let ((src (generate-new-buffer \"*source*\"))\n      (dst (generate-new-buffer \"*destination*\")))\n  (princ \"hello world\" src)\n  (prog1 (with-current-buffer dst\n           (insert-buffer-substring src 1 6)\n           (buffer-string))\n    (kill-buffer src)\n    (kill-buffer dst)))\n",
    "demo-result": "\"hello\""
  },
  {
    "name": "insert-button",
    "demo-src": "(insert-button\n \"Example\"\n 'face 'link\n 'action (lambda (_button)\n           (browse-url \"http://example.com\"))\n 'help-echo \"mouse-2, RET: Follow this link\"\n 'follow-link t)\n",
    "demo-result": ""
  },
  {
    "name": "insert-file-contents",
    "demo-src": "(let ((temp-file (make-temp-file \"elisp-demos-\")))\n  (unwind-protect\n      (progn\n        (write-region \"Hello World\\n\" nil temp-file)\n        (with-temp-buffer\n          (insert-file-contents temp-file)\n          (buffer-string)))\n    (delete-file temp-file)))\n",
    "demo-result": "\"Hello World\\n\""
  },
  {
    "name": "insert-file-contents-literally",
    "demo-src": ";; Unicode Check Mark, ✓, #x2713, #xE2 #x9C #x93\n(write-region (string #x2713) nil \"/tmp/tmp.txt\")\n\n(list (with-temp-buffer\n        (insert-file-contents-literally \"/tmp/tmp.txt\")\n        (buffer-string))\n      (with-temp-buffer\n        (insert-file-contents \"/tmp/tmp.txt\")\n        (buffer-string)))\n",
    "demo-result": "(\"\\342\\234\\223\" \"✓\")"
  },
  {
    "name": "insert-image",
    "demo-src": "(insert-image (create-image \"splash.png\"))\n",
    "demo-result": ""
  },
  {
    "name": "insert-image-file",
    "demo-src": "(insert-image-file\n (expand-file-name \"splash.png\" (car image-load-path)))\n",
    "demo-result": ""
  },
  {
    "name": "insert-text-button",
    "demo-src": "(insert-text-button\n   \"Example\"\n   'face 'link\n   'action (lambda (_button)\n             (browse-url \"http://example.com\"))\n   'help-echo \"mouse-2, RET: Follow this link\"\n   'follow-link t)\n",
    "demo-result": "(list (with-temp-buffer (insert-button      \"Example\") (buffer-string))\n      (with-temp-buffer (insert-text-button \"Example\") (buffer-string)))\n"
  },
  {
    "name": "integerp",
    "demo-src": "(integerp 42)\n",
    "demo-result": "t"
  },
  {
    "name": "interactive",
    "demo-src": "(interactive \"sName: \\nbBuffer: \\nP\")\n;; (list (read-string \"Name: \")\n;;       (read-buffer \"Buffer: \")\n;;       current-prefix-arg)\n",
    "demo-result": ""
  },
  {
    "name": "intern",
    "demo-src": "(intern \"foo\")\n",
    "demo-result": "foo"
  },
  {
    "name": "intern-soft",
    "demo-src": "(list (intern-soft \"abcde\")\n      (intern-soft \"intern-soft\"))\n",
    "demo-result": "(nil intern-soft)"
  },
  {
    "name": "interrupt-process",
    "demo-src": "(interrupt-process (start-process \"sleep\" nil \"sleep\" \"100\"))\n",
    "demo-result": "#<process sleep>"
  },
  {
    "name": "isnan",
    "demo-src": "(isnan 0.0e+NaN)\n",
    "demo-result": "t"
  },
  {
    "name": "iso8601-parse",
    "demo-src": "(iso8601-parse \"2020-01-01T18:32:12+08:00\")\n",
    "demo-result": "(12 32 18 1 1 2020 nil nil 28800)"
  },
  {
    "name": "iso8601-parse-date",
    "demo-src": "(iso8601-parse-date \"2020-01-22\")\n",
    "demo-result": "(nil nil nil 22 1 2020 nil nil nil)"
  },
  {
    "name": "iso8601-parse-duration",
    "demo-src": "(iso8601-parse-duration \"P3Y6M4DT12H30M5S\")\n",
    "demo-result": "(5 30 12 4 6 3 nil nil nil)"
  },
  {
    "name": "iso8601-parse-time",
    "demo-src": "(iso8601-parse-time \"18:32:12\")\n",
    "demo-result": "(12 32 18 nil nil nil nil nil nil)"
  },
  {
    "name": "iter-defun",
    "demo-src": "(iter-defun foo-number-sequence (start)\n  (while t\n    (iter-yield start)\n    (setq start (1+ start))))\n\n(cl-loop repeat 10\n         for n iter-by (foo-number-sequence 1)\n         collect n)\n",
    "demo-result": "(1 2 3 4 5 6 7 8 9 10)"
  },
  {
    "name": "iter-do",
    "demo-src": "(iter-defun foo-number-sequence (start)\n  (while t\n    (iter-yield start)\n    (setq start (1+ start))))\n\n(catch 'break\n  (let ((count 0) result)\n    (iter-do (n (foo-number-sequence 1))\n      (if (< count 10)\n          (push n result)\n        (throw 'break (nreverse result)))\n      (setq count (1+ count)))))\n",
    "demo-result": "(1 2 3 4 5 6 7 8 9 10)"
  },
  {
    "name": "iter-lambda",
    "demo-src": "(cl-loop for n iter-by (funcall (iter-lambda ()\n                                  (dotimes (i 10)\n                                    (iter-yield i))))\n         collect n)\n",
    "demo-result": "(0 1 2 3 4 5 6 7 8 9)"
  },
  {
    "name": "iter-next",
    "demo-src": "(let ((i (funcall (iter-lambda ()\n                    (iter-yield 1)\n                    (iter-yield 2)\n                    (iter-yield 3)))))\n  (list (iter-next i)\n        (iter-next i)\n        (iter-next i)))\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "iter-yield",
    "demo-src": "(let ((it (funcall (iter-lambda ()\n                     (iter-yield 1)\n                     2))))\n  (iter-next it))\n",
    "demo-result": "1"
  },
  {
    "name": "iter-yield-from",
    "demo-src": "(let* ((it (funcall (iter-lambda ()\n                      (iter-yield 1)\n                      (iter-yield 2)\n                      (iter-yield 3))))\n       (it2 (funcall (iter-lambda ()\n                       (iter-yield-from it)))))\n  (list (iter-next it2)\n        (iter-next it2)\n        (iter-next it2)))\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "json-encode",
    "demo-src": "(json-encode '((id . 42)\n               (comment ((author . \"Spike\")\n                         (date . \"2018-11-08\")))))\n",
    "demo-result": "\"{\\\"id\\\":42,\\\"comment\\\":[{\\\"author\\\":\\\"Spike\\\",\\\"date\\\":\\\"2018-11-08\\\"}]}\""
  },
  {
    "name": "json-insert",
    "demo-src": "(with-temp-buffer\n  (json-insert '(:id 42 :message \"hello world\"))\n  (buffer-string))\n",
    "demo-result": "\"{\\\"id\\\":42,\\\"message\\\":\\\"hello world\\\"}\""
  },
  {
    "name": "json-parse-buffer",
    "demo-src": "(with-current-buffer (url-retrieve-synchronously \"https://api.github.com/status\")\n  (goto-char url-http-end-of-headers)\n  (json-parse-buffer :object-type 'alist))\n",
    "demo-result": "((message . \"GitHub lives! (2018-11-08 07:59:55 -0800) (1)\"))"
  },
  {
    "name": "json-parse-string",
    "demo-src": "(json-parse-string \"{\\\"name\\\": \\\"Jessica\\\"}\"\n                   :object-type 'plist)\n",
    "demo-result": "(:name \"Jessica\")"
  },
  {
    "name": "json-pretty-print",
    "demo-src": "(with-temp-buffer\n  (insert \" {  \\\"foo\\\" : 12, \\n\\n\\n \\\"bar\\\":    34}\")\n  (json-pretty-print (point-min) (point-max))\n  (buffer-string))\n",
    "demo-result": "{\n  \"foo\": 12,\n  \"bar\": 34\n}\n"
  },
  {
    "name": "json-pretty-print-ordered",
    "demo-src": "(with-temp-buffer\n  (insert (json-encode '((c . 3)\n                         (a . 1)\n                         (b . 2))))\n  (json-pretty-print-ordered (point-min) (point-max))\n  (goto-char (point-min))\n  (json-read))\n",
    "demo-result": "((a . 1)\n (b . 2)\n (c . 3))"
  },
  {
    "name": "json-read",
    "demo-src": "(with-current-buffer (url-retrieve-synchronously \"https://api.github.com/status\")\n  (goto-char url-http-end-of-headers)\n  (json-read))\n",
    "demo-result": "((message . \"GitHub lives! (2018-11-08 07:42:52 -0800) (1)\"))"
  },
  {
    "name": "json-read-file",
    "demo-src": "(write-region \"{\\\"name\\\": \\\"Jessica\\\"}\" nil \"/tmp/tmp.json\")\n(json-read-file \"/tmp/tmp.json\")\n",
    "demo-result": "((name . \"Jessica\"))"
  },
  {
    "name": "json-read-from-string",
    "demo-src": "(json-read-from-string \"{\\\"name\\\": \\\"Tom\\\", \\\"age\\\": 13}\")\n",
    "demo-result": "((name . \"Tom\")\n (age . 13))"
  },
  {
    "name": "json-serialize",
    "demo-src": "(json-serialize '(:id 42 :message \"hello world\"))\n",
    "demo-result": "\"{\\\"id\\\":42,\\\"message\\\":\\\"hello world\\\"}\""
  },
  {
    "name": "jsonrpc-process-connection",
    "demo-src": "(make-network-process\n :name \"JSONRPC server\"\n :server t\n :host \"localhost\"\n :service 44444\n :log\n (lambda (_server client _message)\n   (jsonrpc-process-connection\n    :name (process-name client)\n    :process client\n    :request-dispatcher\n    (lambda (_endpoint method params)\n      (unless (memq method '(+ - * /))\n        (signal 'jsonrpc-error\n                '((jsonrpc-error-message . \"Sorry, this isn't allowed\")\n                  (jsonrpc-error-code . -32601))))\n      (apply method (append params nil))))))\n\n(jsonrpc-process-connection\n :name \"JSONRPC client\"\n :process (make-network-process\n           :name \"JSONRPC client process\"\n           :host \"localhost\"\n           :service 44444))\n\n(jsonrpc-request\n (process-get\n  (get-process \"JSONRPC client process\")\n  'jsonrpc-connection)\n '* [3 4])\n",
    "demo-result": "12"
  },
  {
    "name": "kbd",
    "demo-src": "(kbd \"C-x C-f\")\n",
    "demo-result": "\"\u0018\u0006\""
  },
  {
    "name": "key-binding",
    "demo-src": "(key-binding (kbd \"C-x C-s\"))\n",
    "demo-result": "save-buffer"
  },
  {
    "name": "keymap-parent",
    "demo-src": "(let ((map (make-sparse-keymap)))\n  (set-keymap-parent map text-mode-map)\n  (eq text-mode-map (keymap-parent map)))\n",
    "demo-result": "t"
  },
  {
    "name": "keymapp",
    "demo-src": "(keymapp (current-global-map))\n",
    "demo-result": "t"
  },
  {
    "name": "keywordp",
    "demo-src": "(keywordp :foo)\n",
    "demo-result": "t"
  },
  {
    "name": "kill-buffer",
    "demo-src": "(kill-buffer (generate-new-buffer \"*test*\"))\n",
    "demo-result": "t"
  },
  {
    "name": "kill-emacs",
    "demo-src": "(kill-emacs 0)\n",
    "demo-result": ""
  },
  {
    "name": "kill-new",
    "demo-src": "(kill-new \"This message will be copied\")\n",
    "demo-result": "\"This message will be copied\""
  },
  {
    "name": "lambda",
    "demo-src": "(lambda (x) (+ x 100))\n",
    "demo-result": "(lambda\n  (x)\n  (+ x 100))"
  },
  {
    "name": "last",
    "demo-src": "(last '(1 2 3))\n",
    "demo-result": "(3)"
  },
  {
    "name": "last-buffer",
    "demo-src": "(last-buffer)\n",
    "demo-result": "#<buffer magit: elisp-demos>"
  },
  {
    "name": "lax-plist-get",
    "demo-src": "(lax-plist-get '(\"foo\" 1 \"bar\" 2) \"bar\")\n",
    "demo-result": "2"
  },
  {
    "name": "lax-plist-put",
    "demo-src": "(let ((plist (list \"a\" 1 \"b\" 2)))\n  (setq plist (lax-plist-put plist \"b\" 200)))\n",
    "demo-result": "(\"a\" 1 \"b\" 200)"
  },
  {
    "name": "ldexp",
    "demo-src": "(ldexp 0.5 4)\n",
    "demo-result": "8.0"
  },
  {
    "name": "length",
    "demo-src": "(length '(1 2 3))\n",
    "demo-result": "3"
  },
  {
    "name": "let",
    "demo-src": "(let ((x 42))\n  x)\n",
    "demo-result": "42"
  },
  {
    "name": "let*",
    "demo-src": "(let* ((x 1)\n       (y (+ x 100)))\n  y)\n",
    "demo-result": "101"
  },
  {
    "name": "let-alist",
    "demo-src": "(let-alist '((id . 1234)\n             (payload\n              (url . \"https://example.com\")\n              (title . \"Example Domain\")\n              (content . \"This domain is...\")))\n  (list :id .id\n        :url .payload.url))\n",
    "demo-result": "(:id 1234 :url \"https://example.com\")"
  },
  {
    "name": "letrec",
    "demo-src": "(letrec ((len (lambda (list)\n                (if list\n                    (1+ (funcall len (cdr list)))\n                  0))))\n  (funcall len '(a b c)))\n",
    "demo-result": "3"
  },
  {
    "name": "libxml-available-p",
    "demo-src": "(libxml-available-p)\n",
    "demo-result": "t"
  },
  {
    "name": "libxml-parse-html-region",
    "demo-src": "(with-temp-buffer\n  (insert \"<html><body><h1>Heading 1</h1><p>...</p></body></html>\")\n  (libxml-parse-html-region (point-min) (point-max)))\n",
    "demo-result": "(html nil\n      (body nil\n            (h1 nil \"Heading 1\")\n            (p nil \"...\")))"
  },
  {
    "name": "libxml-parse-xml-region",
    "demo-src": "(with-temp-buffer\n  (insert \"<note>\n  <to>Tove</to>\n  <from>Jani</from>\n  <heading>Reminder</heading>\n  <body>Don't forget me this weekend!</body></note>\")\n  (libxml-parse-xml-region (point-min) (point-max)))\n",
    "demo-result": "(note nil\n      (to nil \"Tove\")\n      (from nil \"Jani\")\n      (heading nil \"Reminder\")\n      (body nil \"Don't forget me this weekend!\"))"
  },
  {
    "name": "line-beginning-position",
    "demo-src": "(line-beginning-position)\n",
    "demo-result": "25771"
  },
  {
    "name": "line-end-position",
    "demo-src": "(line-end-position)\n",
    "demo-result": "25980"
  },
  {
    "name": "line-number-at-pos",
    "demo-src": "(with-temp-buffer\n  (insert \"foo\\n\"\n          \"bar\\n\"\n          \"baz\\n\")\n  (line-number-at-pos))\n",
    "demo-result": "4"
  },
  {
    "name": "list",
    "demo-src": "(list 1 2 3)\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "list-system-processes",
    "demo-src": "(list-system-processes)\n",
    "demo-result": ""
  },
  {
    "name": "listp",
    "demo-src": ";; normal list\n(listp '(1 2 3))\n",
    "demo-result": "t"
  },
  {
    "name": "lm-authors",
    "demo-src": "(lm-authors (find-library-name \"magit\"))\n",
    "demo-result": "((\"Marius Vollmer\" . \"marius.vollmer@gmail.com\"))"
  },
  {
    "name": "lm-header",
    "demo-src": "(lm-with-file (find-library-name \"elisp-demos\")\n  (lm-header \"package-requires\"))\n",
    "demo-result": "\"((emacs \\\"24.4\\\"))\""
  },
  {
    "name": "lm-homepage",
    "demo-src": "(lm-homepage (find-library-name \"magit\"))\n",
    "demo-result": "\"https://github.com/magit/magit\""
  },
  {
    "name": "lm-maintainer",
    "demo-src": "(lm-maintainer (find-library-name \"magit\"))\n",
    "demo-result": "(\"Jonas Bernoulli\" . \"jonas@bernoul.li\")"
  },
  {
    "name": "lm-summary",
    "demo-src": "(lm-summary (find-library-name \"cl-lib\"))\n",
    "demo-result": "\"Common Lisp extensions for Emacs\""
  },
  {
    "name": "load-average",
    "demo-src": "(load-average)\n",
    "demo-result": "(108 117 122)"
  },
  {
    "name": "locale-info",
    "demo-src": "(locale-info 'days)\n",
    "demo-result": "[\"Sunday\" \"Monday\" \"Tuesday\" \"Wednesday\" \"Thursday\" \"Friday\" \"Saturday\"]"
  },
  {
    "name": "locale-translate",
    "demo-src": "(locale-translate \"slovene\")\n",
    "demo-result": "\"sl_SI.ISO-8859-2\""
  },
  {
    "name": "locate-dominating-file",
    "demo-src": "(locate-dominating-file \".\" \".git\")\n",
    "demo-result": "\"~/src/elisp-demos/\""
  },
  {
    "name": "locate-file",
    "demo-src": "(locate-file \"init.el\" '(\"~/.emacs.d/\"))\n",
    "demo-result": "\"/Users/xcy/.emacs.d/init.el\""
  },
  {
    "name": "locate-library",
    "demo-src": "(locate-library \"pcase\")\n",
    "demo-result": "\"/Users/xcy/src/emacs-mac/lisp/emacs-lisp/pcase.elc\""
  },
  {
    "name": "locate-user-emacs-file",
    "demo-src": "(locate-user-emacs-file \"custom.el\")\n",
    "demo-result": "\"~/.emacs.d/custom.el\""
  },
  {
    "name": "log",
    "demo-src": "(log 8 2)\n",
    "demo-result": "3.0"
  },
  {
    "name": "logand",
    "demo-src": "(logand #B1110\n        #B1101)\n",
    "demo-result": "12"
  },
  {
    "name": "logb",
    "demo-src": "(logb 8)\n",
    "demo-result": "3"
  },
  {
    "name": "logcount",
    "demo-src": "(logcount #B101011)\n",
    "demo-result": "4"
  },
  {
    "name": "logior",
    "demo-src": "(logior #B1100\n        #B0101)\n",
    "demo-result": "13"
  },
  {
    "name": "lognot",
    "demo-src": "(lognot #B101)\n",
    "demo-result": "-6"
  },
  {
    "name": "logxor",
    "demo-src": "(logxor #B1100\n        #B0101)\n",
    "demo-result": "9"
  },
  {
    "name": "looking-at",
    "demo-src": "(with-temp-buffer\n  (insert \"hello\\n\")\n  (goto-char (point-min))\n  (looking-at \"^hello$\"))\n",
    "demo-result": "t"
  },
  {
    "name": "looking-at-p",
    "demo-src": "(with-temp-buffer\n  (insert \"hello\\n\")\n  (goto-char (point-min))\n  (looking-at-p \"^hello$\"))\n",
    "demo-result": "t"
  },
  {
    "name": "looking-back",
    "demo-src": "(with-temp-buffer\n  (insert \"hello\")\n  (looking-back \"^hello$\" (line-beginning-position)))\n",
    "demo-result": "t"
  },
  {
    "name": "lookup-key",
    "demo-src": "(lookup-key (current-global-map) (kbd \"C-x C-c\"))\n",
    "demo-result": "save-buffers-kill-terminal"
  },
  {
    "name": "lsh",
    "demo-src": "(lsh #B111 1)\n",
    "demo-result": "14"
  },
  {
    "name": "macroexpand",
    "demo-src": "(macroexpand '(when t 0 42))\n",
    "demo-result": "(if t\n    (progn 0 42))"
  },
  {
    "name": "macroexpand-all",
    "demo-src": "(macroexpand-all\n '(when-let ((buffer (get-buffer \"*Help*\")))\n    (setf (point) 1)))\n",
    "demo-result": "(let*\n    ((buffer\n      (and t\n           (get-buffer \"*Help*\"))))\n  (if buffer\n      (goto-char 1)\n    nil))"
  },
  {
    "name": "macrop",
    "demo-src": "(macrop 'when)\n",
    "demo-result": "t"
  },
  {
    "name": "make-bool-vector",
    "demo-src": "(vconcat (make-bool-vector 5 t))\n",
    "demo-result": "[t t t t t]"
  },
  {
    "name": "make-char-table",
    "demo-src": ";; Make a new empty syntax table\n(syntax-table-p\n (make-char-table 'syntax-table nil))\n",
    "demo-result": "t"
  },
  {
    "name": "make-comint",
    "demo-src": "(make-comint \"Janet\" \"janet\" nil \"-s\")\n",
    "demo-result": "#<buffer *Janet*>"
  },
  {
    "name": "make-comint-in-buffer",
    "demo-src": "(make-comint-in-buffer \"Janet\" \"*Janet*\" \"janet\" nil \"-s\")\n",
    "demo-result": "#<buffer *Janet*>"
  },
  {
    "name": "make-directory",
    "demo-src": ";; mkdir -p\n(make-directory \"/tmp/elisp-demos/create/a/new/dir\" 'parents)\n",
    "demo-result": "nil"
  },
  {
    "name": "make-hash-table",
    "demo-src": "(make-hash-table)\n",
    "demo-result": "#s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data\n())"
  },
  {
    "name": "make-instance",
    "demo-src": "(defclass my-book ()\n  ((title :initarg :title :type string)\n   (pages :initarg :pages :type integer))\n  \"A book class.\")\n\n;; These two are the same, and the `my-book' function uses `make-instance' under\n;; the ground\n(list (make-instance 'my-book :title \"Practical Vim\" :pages 487)\n      (my-book                :title \"Practical Vim\" :pages 487))\n",
    "demo-result": "(#s(my-book \"Practical Vim\" 487)\n #s(my-book \"Practical Vim\" 487))"
  },
  {
    "name": "make-keymap",
    "demo-src": "(make-keymap)\n",
    "demo-result": ""
  },
  {
    "name": "make-list",
    "demo-src": "(make-list 3 'pigs)\n",
    "demo-result": "(pigs pigs pigs)"
  },
  {
    "name": "make-nearby-temp-file",
    "demo-src": "(let ((default-directory \"/ssh:root@192.168.8.1:\"))\n  (make-nearby-temp-file \"foo-\"))\n",
    "demo-result": "\"/ssh:root@192.168.8.1:/tmp/foo-Mf9ZSa\""
  },
  {
    "name": "make-network-process",
    "demo-src": ";; HTTP client\n(let ((proc (make-network-process :name \"example\"\n                                  :buffer \"*example.com*\"\n                                  :host \"example.com\"\n                                  :service 80)))\n  (process-send-string proc (concat \"HEAD / HTTP/1.1\\n\"\n                                    \"Host: example.com\\n\"\n                                    \"\\n\"))\n  (accept-process-output proc)\n  (with-current-buffer (process-buffer proc)\n    (buffer-string)))\n",
    "demo-result": "HTTP/1.1 200 OK\r\nAccept-Ranges: bytes\r\nCache-Control: max-age=604800\r\nContent-Type: text/html; charset=UTF-8\r\nDate: Sat, 23 Nov 2019 07:46:49 GMT\r\nEtag: \"3147526947\"\r\nExpires: Sat, 30 Nov 2019 07:46:49 GMT\r\nLast-Modified: Thu, 17 Oct 2019 07:18:26 GMT\r\nServer: ECS (oxr/8313)\r\nX-Cache: HIT\r\nContent-Length: 1256\r\n\r\n"
  },
  {
    "name": "make-obsolete-variable",
    "demo-src": "(make-obsolete-variable 'display-buffer-function\n                        'display-buffer-alist \"24.3\")\n",
    "demo-result": ""
  },
  {
    "name": "make-overlay",
    "demo-src": "(with-temp-buffer (make-overlay 1 1))\n",
    "demo-result": "#<overlay in no buffer>"
  },
  {
    "name": "make-progress-reporter",
    "demo-src": "(let ((progress-reporter\n       (make-progress-reporter \"Collecting mana for Emacs...\"\n                               0  500)))\n  (dotimes (k 500)\n    (sit-for 0.01)\n    (progress-reporter-update progress-reporter k))\n  (progress-reporter-done progress-reporter))\n",
    "demo-result": "\"Collecting mana for Emacs...done\""
  },
  {
    "name": "make-record",
    "demo-src": "(make-record 'foo 9 'Z)\n",
    "demo-result": "#s(foo Z Z Z Z Z Z Z Z Z)"
  },
  {
    "name": "make-ring",
    "demo-src": "(make-ring 3)\n",
    "demo-result": "(0 0 .\n   [nil nil nil])"
  },
  {
    "name": "make-sparse-keymap",
    "demo-src": "(let ((map (make-sparse-keymap)))\n  (define-key map \"n\" #'next-line)\n  (define-key map \"p\" #'previous-line)\n  map)\n",
    "demo-result": "(keymap\n (112 . previous-line)\n (110 . next-line))"
  },
  {
    "name": "make-string",
    "demo-src": "(make-string 5 ?x)\n",
    "demo-result": "\"xxxxx\""
  },
  {
    "name": "make-symbol",
    "demo-src": "(make-symbol \"foo\")\n",
    "demo-result": "foo"
  },
  {
    "name": "make-syntax-table",
    "demo-src": ";; Create a new syntax table base on Emacs Lisp's\n(syntax-table-p\n (make-syntax-table emacs-lisp-mode-syntax-table))\n",
    "demo-result": "t"
  },
  {
    "name": "make-temp-file",
    "demo-src": "(make-temp-file \"elisp-demos-\")\n",
    "demo-result": "\"/var/folders/7f/s191h4q97p90374yw15ssrs00000gn/T/elisp-demos-iOSgE2\""
  },
  {
    "name": "make-temp-name",
    "demo-src": "(make-temp-name \"elisp-demos-\")\n",
    "demo-result": "\"elisp-demos-hF3633\""
  },
  {
    "name": "make-thread",
    "demo-src": "(make-thread\n (lambda ()\n   (while t\n     (forward-char 1)\n     (sit-for 0.1))))\n",
    "demo-result": "#<thread 0x178fd5a30>"
  },
  {
    "name": "make-vector",
    "demo-src": "(make-vector 3 'Z)\n",
    "demo-result": "[Z Z Z]"
  },
  {
    "name": "map-apply",
    "demo-src": "(map-apply (lambda (idx elt)\n             (list idx elt))\n           [a b c])\n",
    "demo-result": "((0 a)\n (1 b)\n (2 c))"
  },
  {
    "name": "map-char-table",
    "demo-src": "(let (result)\n  (map-char-table\n   (lambda (range value)\n     ;; copy `range', see https://github.com/Wilfred/helpful/issues/210\n     (push (list (format \"%S\" range) value) result))\n   printable-chars)\n  result)\n",
    "demo-result": "((\"(160 . 4194175)\" t)\n (\"(32 . 126)\" t))"
  },
  {
    "name": "map-charset-chars",
    "demo-src": "(let ((count 0))\n  (map-charset-chars\n   (lambda (range _arg)\n     (pcase-let ((`(,from . ,to) range))\n       (setq count (+ count (- to from)))))\n   'chinese-gbk)\n  count)\n",
    "demo-result": "45718"
  },
  {
    "name": "map-contains-key",
    "demo-src": "(map-contains-key '((x . 1) (y . 2)) 'y)\n",
    "demo-result": "t"
  },
  {
    "name": "map-copy",
    "demo-src": "(map-copy [a b c])\n",
    "demo-result": "[a b c]"
  },
  {
    "name": "map-delete",
    "demo-src": "(let ((alist (list (cons 'x 1)\n                   (cons 'y 2)\n                   (cons 'z 3))))\n  ;; `setq' is necessary otherwise `alist' is unchanged in this case\n  (setq alist (map-delete alist 'x))\n  alist)\n",
    "demo-result": "((y . 2)\n (z . 3))"
  },
  {
    "name": "map-do",
    "demo-src": "(let (result)\n  (map-do (lambda (k v) (push (* k v) result))\n          '((1 . 2)\n            (3 . 4)\n            (5 . 6)))\n  (nreverse result))\n",
    "demo-result": "(2 12 30)"
  },
  {
    "name": "map-elt",
    "demo-src": "(map-elt '((x . 1) (y . 2)) 'y)\n",
    "demo-result": "2"
  },
  {
    "name": "map-empty-p",
    "demo-src": "(map-empty-p '())\n",
    "demo-result": "t"
  },
  {
    "name": "map-every-p",
    "demo-src": "(map-every-p (lambda (key val)\n               (= (* key key) val))\n             '((1 . 1)\n               (2 . 4)\n               (3 . 9)\n               (4 . 16)))\n",
    "demo-result": "t"
  },
  {
    "name": "map-filter",
    "demo-src": "(map-filter (lambda (index _item) (cl-evenp index))\n            [a b c d])\n",
    "demo-result": "((0 . a)\n (2 . c))"
  },
  {
    "name": "map-insert",
    "demo-src": "(map-insert '((x . 1) (y . 2)) 'z 3)\n",
    "demo-result": "((z . 3)\n (x . 1)\n (y . 2))"
  },
  {
    "name": "map-into",
    "demo-src": "(map-into #s(hash-table data (x 1 y 2)) 'list)\n",
    "demo-result": "((x . 1)\n (y . 2))"
  },
  {
    "name": "map-keymap",
    "demo-src": "(let (result)\n  (map-keymap\n   (lambda (event function)\n     (push (cons event function) result))\n   (let ((keymap (make-sparse-keymap)))\n     (define-key keymap \"n\" #'next-line)\n     (define-key keymap \"p\" #'previous-line)\n     keymap))\n  result)\n",
    "demo-result": "((110 . next-line)\n (112 . previous-line))"
  },
  {
    "name": "map-keys",
    "demo-src": "(map-keys '((a . 1) (b . ((c . 2)))))\n",
    "demo-result": "(a b)"
  },
  {
    "name": "map-keys-apply",
    "demo-src": "(map-keys-apply #'identity '((a) (b) (c)))\n",
    "demo-result": "(a b c)"
  },
  {
    "name": "map-length",
    "demo-src": "(map-length [a b c])\n",
    "demo-result": "3"
  },
  {
    "name": "map-let",
    "demo-src": "(map-let (one three) '((one . 1)\n                       (two . 2)\n                       (three . 3))\n  (list :one one\n        :three three))\n",
    "demo-result": "(:one 1 :three 3)"
  },
  {
    "name": "map-merge",
    "demo-src": "(map-merge 'list #s(hash-table data (x 1 y 2)) '((z . 3)))\n",
    "demo-result": "((z . 3)\n (x . 1)\n (y . 2))"
  },
  {
    "name": "map-merge-with",
    "demo-src": "(map-merge-with 'list\n                (lambda (v1 v2) (list v1 v2))\n                #s(hash-table data (x 1 y 2))\n                '((x . 3)\n                  (y . 4)\n                  (z . 5)))\n",
    "demo-result": "((z . 5)\n (x 1 3)\n (y 2 4))"
  },
  {
    "name": "map-nested-elt",
    "demo-src": "(map-nested-elt '((post . ((title . \"some title\"))))\n                '(post title))\n",
    "demo-result": "\"some title\""
  },
  {
    "name": "map-pairs",
    "demo-src": "(map-pairs [1 2 3])\n",
    "demo-result": "((0 . 1)\n (1 . 2)\n (2 . 3))"
  },
  {
    "name": "map-put",
    "demo-src": "(let ((alist (list (cons 0 3)\n                   (cons 1 4)\n                   (cons 2 5))))\n  (map-put alist 0 300)\n  alist)\n",
    "demo-result": "((0 . 300)\n (1 . 4)\n (2 . 5))"
  },
  {
    "name": "map-remove",
    "demo-src": "(map-remove (lambda (index item) (cl-evenp index))\n            [a b c d])\n",
    "demo-result": "((1 . b)\n (3 . d))"
  },
  {
    "name": "map-some",
    "demo-src": "(map-some (lambda (k v)\n            (= k v))\n          '((1 . 2)\n            (3 . 4)\n            (5 . 5)))\n",
    "demo-result": "t"
  },
  {
    "name": "map-values",
    "demo-src": "(map-values '((a . 1) (b . 2)))\n",
    "demo-result": "(1 2)"
  },
  {
    "name": "map-values-apply",
    "demo-src": "(map-values-apply #'identity [a b c])\n",
    "demo-result": "(a b c)"
  },
  {
    "name": "mapatoms",
    "demo-src": "(let (commands)\n  (mapatoms\n   (lambda (symbol)\n     (when (commandp symbol)\n       (push symbol commands))))\n  (message \"There are %d Emacs commands\" (length commands)))\n",
    "demo-result": "\"There are 7101 Emacs commands\""
  },
  {
    "name": "mapc",
    "demo-src": "(mapc #'princ '(1 2 3))\n",
    "demo-result": "\"123\""
  },
  {
    "name": "mapcan",
    "demo-src": "(mapcan\n (lambda (pair)\n   (list (car pair) (cdr pair)))\n '((x . 1) (y . 2) (z . 3)))\n",
    "demo-result": "(x 1 y 2 z 3)"
  },
  {
    "name": "mapcar",
    "demo-src": "(mapcar #'1+ '(1 2 3))\n",
    "demo-result": "(2 3 4)"
  },
  {
    "name": "mapconcat",
    "demo-src": "(mapconcat #'identity '(\"abc\" \"def\" \"ghi\") \", \")\n",
    "demo-result": "\"abc, def, ghi\""
  },
  {
    "name": "maphash",
    "demo-src": "(let (alist)\n  (maphash (lambda (key val)\n             (push (cons key val) alist))\n           #s(hash-table data (x 1 y 2)))\n  (nreverse alist))\n",
    "demo-result": "((x . 1)\n (y . 2))"
  },
  {
    "name": "mapp",
    "demo-src": "(mapp '((a 1) (b 2)))\n",
    "demo-result": "t"
  },
  {
    "name": "match-data",
    "demo-src": "(when (string-match \"[0-9]+\" \"<2018-11-30>\")\n  (match-data))\n",
    "demo-result": "(1 5)"
  },
  {
    "name": "match-string",
    "demo-src": "(let ((string \"Today is <2018-11-09>\")\n      (regexp (rx (group (= 4 num)) \"-\"\n                  (group (= 2 num)) \"-\"\n                  (group (= 2 num)))))\n  (when (string-match regexp string)\n    (list :year (match-string 1 string)\n          :month (match-string 2 string)\n          :day (match-string 3 string))))\n",
    "demo-result": "(:year \"2018\" :month \"11\" :day \"09\")"
  },
  {
    "name": "match-string-no-properties",
    "demo-src": "(let ((string (propertize \"hello\" 'face 'bold)))\n  (string-match \".*\" string)\n  (list (match-string 0 string)\n        (match-string-no-properties 0 string)))\n",
    "demo-result": "(#(\"hello\" 0 5\n   (face bold))\n \"hello\")"
  },
  {
    "name": "max",
    "demo-src": "(max 1 3 2.5)\n",
    "demo-result": "3"
  },
  {
    "name": "max-char",
    "demo-src": "(max-char)\n",
    "demo-result": "4194303"
  },
  {
    "name": "md5",
    "demo-src": "(md5 \"hello\")\n",
    "demo-result": "\"5d41402abc4b2a76b9719d911017c592\""
  },
  {
    "name": "member",
    "demo-src": "(member '(2) '((1) (2)))\n",
    "demo-result": "((2))"
  },
  {
    "name": "member-ignore-case",
    "demo-src": "(member-ignore-case \"foo\" '(\"bar\" \"Foo\"))\n",
    "demo-result": "(\"Foo\")"
  },
  {
    "name": "memq",
    "demo-src": "(memq 'b '(a b c b a))\n",
    "demo-result": "(b c b a)"
  },
  {
    "name": "memql",
    "demo-src": "(memql 1.2 '(1.1 1.2 1.3))\n",
    "demo-result": "(1.2 1.3)"
  },
  {
    "name": "merge-face-attribute",
    "demo-src": "(merge-face-attribute :height 2.0 3.0)\n",
    "demo-result": "6.0"
  },
  {
    "name": "message",
    "demo-src": "(message \"Hi, %s!\" \"Tyke\")\n",
    "demo-result": "\"Hi, Tyke!\""
  },
  {
    "name": "min",
    "demo-src": "(min -4 1)\n",
    "demo-result": "-4"
  },
  {
    "name": "minibuffer-window",
    "demo-src": "(minibuffer-window)\n",
    "demo-result": "#<window 4 on  *Minibuf-0*>"
  },
  {
    "name": "minibuffer-with-setup-hook",
    "demo-src": "(minibuffer-with-setup-hook\n    (lambda () (insert \"hello world\"))\n  (read-string \"Enter something: \"))\n",
    "demo-result": "\"hello world\""
  },
  {
    "name": "minibufferp",
    "demo-src": "(minibufferp)\n",
    "demo-result": "nil"
  },
  {
    "name": "mm-default-file-encoding",
    "demo-src": "(mm-default-file-encoding \"index.html\")\n",
    "demo-result": "\"text/html\""
  },
  {
    "name": "mm-url-encode-multipart-form-data",
    "demo-src": "(mm-url-encode-multipart-form-data\n '((\"username\" . \"john\")\n   (\"password\" . \"secret\")))\n",
    "demo-result": ""
  },
  {
    "name": "mod",
    "demo-src": "(mod 5.5 2.5)\n",
    "demo-result": "0.5"
  },
  {
    "name": "modify-syntax-entry",
    "demo-src": "(with-temp-buffer\n  (insert \"BEG (a) <b> [c] {d} END\")\n  (goto-char (point-min))\n  (set-syntax-table\n   (let ((table (make-char-table 'syntax-table)))\n     ;; <> and {} are parenthesis, others aren't\n     (modify-syntax-entry ?\\< \"(>\" table)\n     (modify-syntax-entry ?\\> \")<\" table)\n     (modify-syntax-entry ?\\{ \"(}\" table)\n     (modify-syntax-entry ?\\} \"){\" table)\n     table))\n  (goto-char (scan-lists (point) 1 0))\n  (insert \"|\")\n  (goto-char (scan-lists (point) 1 0))\n  (insert \"|\")\n  (buffer-string))\n",
    "demo-result": "\"BEG (a) <b>| [c] {d}| END\""
  },
  {
    "name": "move-overlay",
    "demo-src": "(with-temp-buffer\n  (let ((ov (make-overlay 1 1)))\n    (insert \"hello\")\n    (format \"%S\" (move-overlay ov 1 6))))\n",
    "demo-result": "\"#<overlay from 1 to 6 in  *temp*>\""
  },
  {
    "name": "multibyte-char-to-unibyte",
    "demo-src": "(multibyte-char-to-unibyte #x3FFF80)\n",
    "demo-result": "128"
  },
  {
    "name": "multibyte-string-p",
    "demo-src": "(list (multibyte-string-p \"lambda\")\n      (multibyte-string-p \"λ\"))\n",
    "demo-result": "(nil t)"
  },
  {
    "name": "narrow-to-region",
    "demo-src": "(with-temp-buffer\n  (insert \"hello world\")\n  (narrow-to-region 1 6)\n  (buffer-string))\n",
    "demo-result": "\"hello\""
  },
  {
    "name": "natnump",
    "demo-src": "(natnump 0)\n",
    "demo-result": "t"
  },
  {
    "name": "nbutlast",
    "demo-src": "(let ((list (list 1 2 3 4 5)))\n  (nbutlast list 2)\n  list)\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "nconc",
    "demo-src": "(let ((x (list 1 2))\n      (y '(3 4)))\n  (nconc x y)\n  x)\n",
    "demo-result": "(1 2 3 4)"
  },
  {
    "name": "netrc-credentials",
    "demo-src": "(netrc-credentials \"api.github.com\")\n",
    "demo-result": ""
  },
  {
    "name": "netrc-parse",
    "demo-src": "(netrc-parse)\n",
    "demo-result": ""
  },
  {
    "name": "network-interface-info",
    "demo-src": "(network-interface-info \"en0\")\n",
    "demo-result": "([192 168 0 102 0]\n [192 168 0 255 0]\n [255 255 255 0 0]\n (18 .\n     [72 215 5 181 112 87])\n (simplex multicast notrailers running broadcast up))"
  },
  {
    "name": "network-interface-list",
    "demo-src": "(network-interface-list)\n",
    "demo-result": "((\"en0\" .\n  [192 168 0 102 0])\n (\"lo0\" .\n  [127 0 0 1 0]))"
  },
  {
    "name": "network-lookup-address-info",
    "demo-src": "(network-lookup-address-info \"example.com\")\n",
    "demo-result": "([93 184 216 34 0])"
  },
  {
    "name": "next-frame",
    "demo-src": "(next-frame)\n",
    "demo-result": "#<frame /Users/xcy/src/elisp-demos/elisp-demos.org 0x1049a21e8>"
  },
  {
    "name": "next-overlay-change",
    "demo-src": "(with-temp-buffer\n  (insert \"hello\")\n  (make-overlay 4 5)\n  (make-overlay 2 3)\n  (next-overlay-change 1))\n",
    "demo-result": "2"
  },
  {
    "name": "next-property-change",
    "demo-src": "(next-property-change 0 \"hello\")\n",
    "demo-result": "nil"
  },
  {
    "name": "ngettext",
    "demo-src": "(ngettext \"mouse\" \"mice\" 3)\n",
    "demo-result": "\"mice\""
  },
  {
    "name": "nlistp",
    "demo-src": "(nlistp [])\n",
    "demo-result": "t"
  },
  {
    "name": "not",
    "demo-src": "(list (not (> 1 2))\n      (not (< 1 2)))\n",
    "demo-result": "(t nil)"
  },
  {
    "name": "nreverse",
    "demo-src": "(let ((x (list 1 2 3 4)))\n  (setq x (nreverse x))\n  x)\n",
    "demo-result": "(4 3 2 1)"
  },
  {
    "name": "nth",
    "demo-src": "(nth 2 '(1 2 3 4))\n",
    "demo-result": "3"
  },
  {
    "name": "nthcdr",
    "demo-src": "(nthcdr 2 '(1 2 3 4))\n",
    "demo-result": "(3 4)"
  },
  {
    "name": "null",
    "demo-src": "(null '(1 2 3))\n",
    "demo-result": "nil"
  },
  {
    "name": "number-sequence",
    "demo-src": "(number-sequence 1 10)\n",
    "demo-result": "(1 2 3 4 5 6 7 8 9 10)"
  },
  {
    "name": "number-to-string",
    "demo-src": "(prin1-to-string 256)\n",
    "demo-result": "\"256\""
  },
  {
    "name": "numberp",
    "demo-src": "(numberp 42)\n",
    "demo-result": "t"
  },
  {
    "name": "obarray-get",
    "demo-src": "(let ((ob (obarray-make)))\n  (obarray-put ob \"foo\")\n  (obarray-get ob \"foo\"))\n",
    "demo-result": "foo"
  },
  {
    "name": "obarray-make",
    "demo-src": "(obarray-make 5)\n",
    "demo-result": "[0 0 0 0 0]"
  },
  {
    "name": "obarray-map",
    "demo-src": "(let ((ob (obarray-make)))\n  (obarray-put ob \"x\")\n  (obarray-put ob \"y\")\n  (obarray-put ob \"z\")\n  (let (syms)\n    (obarray-map\n     (lambda (sym)\n       (push sym syms))\n     ob)\n    syms))\n",
    "demo-result": "(x y z)"
  },
  {
    "name": "obarray-put",
    "demo-src": "(let ((ob (obarray-make)))\n  (obarray-put ob \"foo\"))\n",
    "demo-result": "foo"
  },
  {
    "name": "obarray-remove",
    "demo-src": "(let ((ob (obarray-make)))\n  (obarray-put    ob \"foo\")\n  (obarray-remove ob \"foo\")\n  (obarray-get    ob \"foo\"))\n",
    "demo-result": "nil"
  },
  {
    "name": "obarray-size",
    "demo-src": "(obarray-size (obarray-make 5))\n",
    "demo-result": "5"
  },
  {
    "name": "obarrayp",
    "demo-src": "(obarrayp (obarray-make 5))\n",
    "demo-result": "t"
  },
  {
    "name": "open-gnutls-stream",
    "demo-src": "(with-current-buffer (generate-new-buffer \"*tls-buffer*\")\n  (open-gnutls-stream \"tls\"\n                      (current-buffer)\n                      \"example.com\"\n                      \"https\")\n  (process-send-string\n   nil\n   \"GET / HTTP/1.1\\r\\nHost: example.com\\r\\nConnection: Close\\r\\n\\r\\n\")\n  (display-buffer (current-buffer)))\n",
    "demo-result": "#<window 59 on *https://example.com*<8>>"
  },
  {
    "name": "or",
    "demo-src": "(or nil nil 1 2)\n",
    "demo-result": "1"
  },
  {
    "name": "oref",
    "demo-src": "(defclass my-rabbit ()\n  ((color :initform \"white\"))\n  \"A rabbit class.\")\n\n(oref (my-rabbit) color)\n",
    "demo-result": "\"white\""
  },
  {
    "name": "oref-default",
    "demo-src": "(defclass my-car ()\n  ((wheels :type integer\n           :initform 4\n           :allocation :class)))\n\n(oref-default my-car wheels)\n",
    "demo-result": "4"
  },
  {
    "name": "org-babel-edit-distance",
    "demo-src": "(org-babel-edit-distance \"kitten\" \"sitting\")\n",
    "demo-result": "3"
  },
  {
    "name": "org-element-map",
    "demo-src": "(with-temp-buffer\n  (insert \"* TODO Hack org-mode   :org: \\n\"\n          \"* TODO Hack emacs      :emacs: \\n\"\n          \"* TODO Cut hair        :life: \\n\")\n  (org-element-map (org-element-parse-buffer) 'headline\n    (lambda (hl)\n      (org-element-property :tags hl))))\n",
    "demo-result": "((\"org\")\n (\"emacs\")\n (\"life\"))"
  },
  {
    "name": "org-element-property",
    "demo-src": "(with-temp-buffer\n  (insert \"* TODO Hack org-mode :org:\")\n  (delay-mode-hooks (org-mode))\n  (org-element-property :title (org-element-at-point)))\n",
    "demo-result": "\"Hack org-mode\""
  },
  {
    "name": "org-entry-get",
    "demo-src": "(with-temp-buffer\n  (insert \"* TODO Hack org-mode\")\n  (delay-mode-hooks (org-mode))\n  (org-entry-get (point-min) \"ITEM\"))\n",
    "demo-result": "\"Hack org-mode\""
  },
  {
    "name": "org-entry-properties",
    "demo-src": "(with-temp-buffer\n  (insert \"* TODO Hack org-mode\")\n  (delay-mode-hooks (org-mode))\n  (org-entry-properties (point-min)))\n",
    "demo-result": "((\"CATEGORY\" . \"???\")\n (\"BLOCKED\" . \"\")\n (\"FILE\")\n (\"PRIORITY\" . \"B\")\n (\"TODO\" . \"TODO\")\n (\"ITEM\" . \"Hack org-mode\"))"
  },
  {
    "name": "org-export-number-to-roman",
    "demo-src": "(org-export-number-to-roman 3456)\n",
    "demo-result": "\"MMMCDLVI\""
  },
  {
    "name": "org-heading-components",
    "demo-src": "(with-temp-buffer\n  (insert \"* TODO Hack org-mode\")\n  (delay-mode-hooks (org-mode))\n  (org-heading-components))\n",
    "demo-result": "(1 1 \"TODO\" nil \"Hack org-mode\" nil)"
  },
  {
    "name": "org-map-entries",
    "demo-src": "(with-temp-buffer\n  (insert \"* DONE Shave\\n\"\n          \"* TODO Shower\\n\"\n          \"* DONE Breakfast\\n\"\n          \"* TODO Sleep\\n\")\n  (delay-mode-hooks (org-mode))\n  (let (todos)\n    (org-map-entries\n     (lambda ()\n       (push (org-entry-get (point) \"ITEM\") todos))\n     \"/+TODO\")\n    (nreverse todos)))\n",
    "demo-result": "(\"Shower\" \"Sleep\")"
  },
  {
    "name": "oset",
    "demo-src": "(defclass my-fish ()\n  ((size))\n  \"A fish class.\")\n\n(let ((obj (my-fish)))\n  (oset obj size 10 )\n  obj)\n",
    "demo-result": "#s(my-fish 10)"
  },
  {
    "name": "oset-default",
    "demo-src": "(defclass my-car ()\n  ((wheels :type integer\n           :initform 4\n           :allocation :class)))\n\n(let ((car1 (my-car))\n      (car2 (my-car)))\n  (oset-default my-car wheels 2)\n  (list (oref car1 wheels)\n        (oref car2 wheels)))\n",
    "demo-result": "(2 2)"
  },
  {
    "name": "other-buffer",
    "demo-src": "(other-buffer)\n",
    "demo-result": "#<buffer init.el>"
  },
  {
    "name": "overlay-buffer",
    "demo-src": "(with-temp-buffer\n  (let ((ov (make-overlay 1 1)))\n    (format \"%s\" (overlay-buffer ov))))\n",
    "demo-result": "\" *temp*\""
  },
  {
    "name": "overlay-end",
    "demo-src": "(with-temp-buffer\n  (insert \"hello\")\n  (let ((ov (make-overlay 1 6)))\n    (overlay-end ov)))\n",
    "demo-result": "6"
  },
  {
    "name": "overlay-get",
    "demo-src": "(with-temp-buffer\n  (let ((ov (make-overlay 1 1)))\n    (overlay-put ov 'happy t)\n    (overlay-get ov 'happy)))\n",
    "demo-result": "t"
  },
  {
    "name": "overlay-properties",
    "demo-src": "(with-temp-buffer\n  (let ((ov (make-overlay 1 1)))\n    (overlay-put ov 'happy t)\n    (overlay-put ov 'hungry t)\n    (overlay-properties ov)))\n",
    "demo-result": "(hungry t happy t)"
  },
  {
    "name": "overlay-put",
    "demo-src": "(with-temp-buffer\n  (insert \"hello\")\n  (let ((ov (make-overlay (point-min) (point-max))))\n    (overlay-put ov 'face 'bold)))\n",
    "demo-result": "bold"
  },
  {
    "name": "overlay-recenter",
    "demo-src": "(overlay-recenter (point-max))\n",
    "demo-result": "nil"
  },
  {
    "name": "overlay-start",
    "demo-src": "(with-temp-buffer\n  (let ((ov (make-overlay 1 1)))\n    (overlay-start ov)))\n",
    "demo-result": "1"
  },
  {
    "name": "overlayp",
    "demo-src": "(with-temp-buffer (overlayp (make-overlay 1 1)))\n",
    "demo-result": "t"
  },
  {
    "name": "overlays-at",
    "demo-src": "(with-temp-buffer\n  (insert \"hello\")\n  (make-overlay 1 2)\n  (make-overlay 1 5)\n  (format \"%S\" (overlays-at 1)))\n",
    "demo-result": "\"(#<overlay from 1 to 5 in  *temp*> #<overlay from 1 to 2 in  *temp*>)\""
  },
  {
    "name": "overlays-in",
    "demo-src": "(with-temp-buffer\n  (insert \"hello\")\n  ;;       12345\n  (make-overlay 1 2)\n  (make-overlay 2 4)\n  (make-overlay 3 5)\n  (format \"%S\" (overlays-in 3 4)))\n",
    "demo-result": "\"(#<overlay from 3 to 5 in  *temp*> #<overlay from 2 to 4 in  *temp*>)\""
  },
  {
    "name": "package-get-version",
    "demo-src": "(with-current-buffer (find-file-noselect (locate-library \"magit.el\"))\n  (package-get-version))\n",
    "demo-result": "\"20200828.1757\""
  },
  {
    "name": "parse-colon-path",
    "demo-src": "(parse-colon-path \"/usr/bin:/bin:/usr/sbin:/sbin\")\n",
    "demo-result": "(\"/usr/bin/\" \"/bin/\" \"/usr/sbin/\" \"/sbin/\")"
  },
  {
    "name": "parse-iso8601-time-string",
    "demo-src": "(parse-iso8601-time-string \"2020-03-25T01:53:53+08:00\")\n",
    "demo-result": "(24186 18737)"
  },
  {
    "name": "parse-time-string",
    "demo-src": ";; RFC 2822\n(parse-time-string \"2018-11-15\")\n",
    "demo-result": "(nil nil nil 15 11 2018 nil nil nil)"
  },
  {
    "name": "pcase",
    "demo-src": "(pcase (read)\n  ;; 42\n  (42\n   (message \"forty-two\"))\n  ;; other numbers\n  ((and (pred numberp) n)\n   (message \"Number: %d\" n))\n  ;; string\n  ((and (pred stringp) s)\n   (message \"String: %S\" s))\n  ;; 'hello (symbol)\n  ('hello\n   (message \"World\"))\n  ;; default\n  (x (message \"=> %S\" x)))\n",
    "demo-result": ";; pred\n(pcase (random 3)\n  ((pred zerop)           \"zero\")\n  ((pred (lambda (n) (= n 1))) \"one\")\n  ((pred (= 2))           \"two\"))\n"
  },
  {
    "name": "pcase-defmacro",
    "demo-src": "(pcase-defmacro my-alist (&rest patterns)\n  (cl-loop for pat in patterns\n           collect `(app (alist-get ',pat) ,pat) into aux\n           finally return `(and ,@aux)))\n\n(pcase '((a . 1) (b . 2) (c . 3) (d . 4))\n  ((my-alist a b c d) (list a b c d)))\n",
    "demo-result": "(1 2 3 4)"
  },
  {
    "name": "pcase-dolist",
    "demo-src": "(let (res)\n  (pcase-dolist (`(,key . ,val) '((one . 1)\n                                  (two . 2)\n                                  (three . 3)\n                                  (four . 4)))\n    (push (cons val key) res))\n  (nreverse res))\n",
    "demo-result": "((1 . one)\n (2 . two)\n (3 . three)\n (4 . four))"
  },
  {
    "name": "pcase-exhaustive",
    "demo-src": "(condition-case nil\n    (pcase-exhaustive 'bar\n      ('foo 123))\n  (error\n   \"Got no match error\"))\n",
    "demo-result": "\"Got no match error\""
  },
  {
    "name": "pcase-lambda",
    "demo-src": "(funcall\n (pcase-lambda (`(,car . ,cdr))\n   (append cdr (list car)))\n '(1 2 3 4))\n",
    "demo-result": "(2 3 4 1)"
  },
  {
    "name": "pcase-let",
    "demo-src": "(pcase-let ((`(,_ ,_ ,uid ,gid)\n             (file-attributes user-init-file)))\n  (list uid gid))\n",
    "demo-result": "(501 20)"
  },
  {
    "name": "pcase-let*",
    "demo-src": "(pcase-let* ((`[,x ,y] [1 2])\n             (`(,a ,b) (list y x)))\n  (list a b))\n",
    "demo-result": "(2 1)"
  },
  {
    "name": "plist-get",
    "demo-src": "(plist-get '(:a 1 :b 2 :c 3) :b)\n",
    "demo-result": "2"
  },
  {
    "name": "plist-member",
    "demo-src": "(plist-member '(:x nil) :x)\n",
    "demo-result": "(:x nil)"
  },
  {
    "name": "plist-put",
    "demo-src": "(let ((plist (list :a 1 :b 2)))\n  (setq plist (plist-put plist :b 200)))\n",
    "demo-result": "(:a 1 :b 200)"
  },
  {
    "name": "point",
    "demo-src": "(point)\n",
    "demo-result": "7899"
  },
  {
    "name": "point-max",
    "demo-src": "(point-max)\n",
    "demo-result": "14180"
  },
  {
    "name": "point-min",
    "demo-src": "(point-min)\n",
    "demo-result": "1"
  },
  {
    "name": "pop",
    "demo-src": "(let ((l '(1 2 3)))\n  (pop l)\n  l)\n",
    "demo-result": "(2 3)"
  },
  {
    "name": "popup-cascade-menu",
    "demo-src": "(popup-cascade-menu '((\"Foo\" \"Baz\") \"Bar\"))\n",
    "demo-result": "\"Baz\""
  },
  {
    "name": "popup-make-item",
    "demo-src": "(popup-menu* (list (popup-make-item \"Yes\" :value t)\n                   (popup-make-item \"No\" :value nil)))\n",
    "demo-result": "t"
  },
  {
    "name": "popup-menu*",
    "demo-src": "(popup-menu* '(\"Foo\" \"Bar\" \"Baz\"))\n",
    "demo-result": "\"Foo\""
  },
  {
    "name": "popup-tip",
    "demo-src": "(popup-tip \"This is a tooltip.\")\n",
    "demo-result": "t"
  },
  {
    "name": "pos-tip-show",
    "demo-src": "(pos-tip-show \"Hello World!\")\n",
    "demo-result": "(8 . 425)"
  },
  {
    "name": "pos-tip-show-no-propertize",
    "demo-src": "(pos-tip-show-no-propertize \"Hello World!\")\n",
    "demo-result": "(8 . 578)"
  },
  {
    "name": "position-bytes",
    "demo-src": "(with-temp-buffer\n  ;; multibyte char is enabled by default, to turn off, use\n  ;; (set-buffer-multibyte nil)\n  (insert \"λ\")\n  (list (point) (position-bytes (point))))\n",
    "demo-result": "(2 3)"
  },
  {
    "name": "pp",
    "demo-src": "(pp (lambda (a y) (+ x y)))\n",
    "demo-result": "\"(lambda\\n  (a y)\\n  (+ x y))\\n\""
  },
  {
    "name": "previous-frame",
    "demo-src": "(previous-frame)\n",
    "demo-result": "#<frame /Users/xcy/src/elisp-demos/elisp-demos.org 0x1049a21e8>"
  },
  {
    "name": "previous-overlay-change",
    "demo-src": "(with-temp-buffer\n  (insert \"hello\")\n  (make-overlay 4 5)\n  (make-overlay 2 3)\n  (previous-overlay-change 6))\n",
    "demo-result": "5"
  },
  {
    "name": "prin1",
    "demo-src": "(prin1 \"hello\")\n",
    "demo-result": "\"\\\"hello\\\"\""
  },
  {
    "name": "prin1-char",
    "demo-src": "(prin1-char 97)\n",
    "demo-result": "\"?a\""
  },
  {
    "name": "prin1-to-string",
    "demo-src": "(list (prin1-to-string 'symbol)\n      (prin1-to-string \"string\")\n      (prin1-to-string 42))\n",
    "demo-result": "(\"symbol\" \"\\\"string\\\"\" \"42\")"
  },
  {
    "name": "princ",
    "demo-src": "(princ \"hello\")\n",
    "demo-result": "\"hello\""
  },
  {
    "name": "print",
    "demo-src": "(print \"hello\")\n",
    "demo-result": "\"\\n\\\"hello\\\"\\n\""
  },
  {
    "name": "process-attributes",
    "demo-src": "(process-attributes 1)\n",
    "demo-result": "((etime 8 3971 635846 0)\n (start 23808 53217 185321 0)\n (nice . 0)\n (tpgid . 0)\n (pgrp . 1)\n (ppid . 0)\n (state . \"R\")\n (comm . \"launchd\")\n (group . \"wheel\")\n (egid . 0)\n (user . \"root\")\n (euid . 0))\n"
  },
  {
    "name": "process-buffer",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(process-buffer (get-process \"shell\"))\n",
    "demo-result": "#<buffer *shell*>"
  },
  {
    "name": "process-coding-system",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(process-coding-system (get-process \"shell\"))\n",
    "demo-result": "(utf-8-unix . utf-8-unix)"
  },
  {
    "name": "process-command",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(process-command (get-process \"shell\"))\n",
    "demo-result": "(\"/bin/zsh\" \"-i\")"
  },
  {
    "name": "process-contact",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(process-contact (get-process \"shell\"))\n",
    "demo-result": "t"
  },
  {
    "name": "process-exit-status",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(process-exit-status (get-process \"shell\"))\n",
    "demo-result": "0"
  },
  {
    "name": "process-get",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(process-put (get-process \"shell\") 'bar 456)\n(process-get (get-process \"shell\") 'bar)\n",
    "demo-result": "456"
  },
  {
    "name": "process-id",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(process-id (get-process \"shell\"))\n",
    "demo-result": "44050"
  },
  {
    "name": "process-lines",
    "demo-src": "(process-lines \"seq\" \"3\")\n",
    "demo-result": "(\"1\" \"2\" \"3\")"
  },
  {
    "name": "process-list",
    "demo-src": "(process-list)\n",
    "demo-result": "(#<process shell> #<process atomic-chrome-httpd> #<process websocket server on port 64292> #<process server>)"
  },
  {
    "name": "process-live-p",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(process-live-p (get-process \"shell\"))\n",
    "demo-result": "(run open listen connect stop)"
  },
  {
    "name": "process-mark",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(process-mark (get-process \"shell\"))\n",
    "demo-result": "#<marker at 21 in *shell*>"
  },
  {
    "name": "process-name",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(process-name (get-buffer-process \"*shell*\"))\n",
    "demo-result": "\"shell\""
  },
  {
    "name": "process-plist",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(process-put (get-process \"shell\") 'foo 123)\n(process-put (get-process \"shell\") 'bar 456)\n\n(process-plist (get-process \"shell\"))\n",
    "demo-result": "(foo 123 bar 456)"
  },
  {
    "name": "process-put",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(process-put (get-process \"shell\") 'foo 123)\n(process-get (get-process \"shell\") 'foo)\n",
    "demo-result": "123"
  },
  {
    "name": "process-query-on-exit-flag",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(process-query-on-exit-flag (get-process \"shell\"))\n",
    "demo-result": "t"
  },
  {
    "name": "process-running-child-p",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(process-running-child-p (get-process \"shell\"))\n",
    "demo-result": "nil"
  },
  {
    "name": "process-send-eof",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(process-send-eof (get-process \"shell\"))\n",
    "demo-result": "#<process shell>"
  },
  {
    "name": "process-send-region",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(with-temp-buffer\n  (insert \"date\\n\")\n  (process-send-region (get-process \"shell\") (point-min) (point-max)))\n",
    "demo-result": "nil"
  },
  {
    "name": "process-send-string",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(process-send-string (get-process \"shell\") \"date\\n\")\n",
    "demo-result": "nil"
  },
  {
    "name": "process-status",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(process-status \"shell\")\n",
    "demo-result": "run"
  },
  {
    "name": "process-tty-name",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(process-tty-name (get-process \"shell\"))\n",
    "demo-result": "\"/dev/ttys001\""
  },
  {
    "name": "process-type",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(process-type (get-process \"shell\"))\n",
    "demo-result": "real"
  },
  {
    "name": "prog1",
    "demo-src": "(prog1 1 2 3)\n",
    "demo-result": "1"
  },
  {
    "name": "prog2",
    "demo-src": "(prog2 1 2 3)\n",
    "demo-result": "2"
  },
  {
    "name": "progn",
    "demo-src": "(progn 1 2 3)\n",
    "demo-result": "3"
  },
  {
    "name": "proper-list-p",
    "demo-src": "(proper-list-p '(1 2 3))\n",
    "demo-result": "3"
  },
  {
    "name": "propertize",
    "demo-src": "(propertize \"Hello\" 'face 'italic)\n",
    "demo-result": "#(\"Hello\" 0 5\n  (face italic))"
  },
  {
    "name": "provided-mode-derived-p",
    "demo-src": "(provided-mode-derived-p 'lisp-interaction-mode 'prog-mode)\n",
    "demo-result": "prog-mode"
  },
  {
    "name": "pulse-momentary-highlight-one-line",
    "demo-src": "(pulse-momentary-highlight-one-line (point))\n",
    "demo-result": ""
  },
  {
    "name": "pulse-momentary-highlight-region",
    "demo-src": "(pulse-momentary-highlight-region (line-beginning-position) (line-end-position))\n",
    "demo-result": ""
  },
  {
    "name": "puny-decode-domain",
    "demo-src": "(puny-decode-domain \"xn--bcher-kva.tld\")\n",
    "demo-result": "\"bücher.tld\""
  },
  {
    "name": "puny-decode-string",
    "demo-src": "(puny-decode-string \"xn--bcher-kva\")\n",
    "demo-result": "\"bücher\""
  },
  {
    "name": "puny-encode-domain",
    "demo-src": "(puny-encode-domain \"bücher.tld\")\n",
    "demo-result": ""
  },
  {
    "name": "puny-encode-string",
    "demo-src": "(puny-encode-string \"bücher\")\n",
    "demo-result": "\"xn--bcher-kva\""
  },
  {
    "name": "push",
    "demo-src": "(let ((l '(1 2)))\n  (push 3 l)\n  l)\n",
    "demo-result": "(3 1 2)"
  },
  {
    "name": "put",
    "demo-src": "(put 'fly 'verb 'transitive)\n",
    "demo-result": "transitive"
  },
  {
    "name": "put-text-property",
    "demo-src": "(with-temp-buffer\n  (insert \"x1\")\n  (put-text-property 2 3 'display '(raise 0.5))\n  (message \"%s\" (buffer-string))\n  (sit-for 3))\n",
    "demo-result": "t"
  },
  {
    "name": "puthash",
    "demo-src": "(let ((table (make-hash-table)))\n  (puthash 'x 1 table)\n  (puthash 'y 2 table)\n  table)\n",
    "demo-result": "#s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data\n(x 1 y 2))"
  },
  {
    "name": "queue-all",
    "demo-src": "(let ((q (queue-create)))\n  (queue-enqueue q 1)\n  (queue-enqueue q 2)\n  (queue-enqueue q 3)\n  (queue-prepend q 0)\n  (queue-all q))\n",
    "demo-result": "(0 1 2 3)"
  },
  {
    "name": "queue-clear",
    "demo-src": "(let ((q (queue-create)))\n  (queue-enqueue q 1)\n  (queue-enqueue q 2)\n  (queue-enqueue q 3)\n  (queue-clear q)\n  q)\n",
    "demo-result": "#s(queue nil nil)"
  },
  {
    "name": "queue-create",
    "demo-src": ";; FIFO (first in, first out)\n(let ((q (queue-create)))\n  (queue-enqueue q 1)\n  (queue-enqueue q 2)\n  (queue-enqueue q 3)\n  (list (queue-dequeue q)\n        (queue-dequeue q)\n        (queue-dequeue q)))\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "queue-first",
    "demo-src": "(let ((q (queue-create)))\n  (queue-enqueue q 1)\n  (queue-enqueue q 2)\n  (queue-enqueue q 3)\n  (queue-first q))\n",
    "demo-result": "1"
  },
  {
    "name": "queue-last",
    "demo-src": "(let ((q (queue-create)))\n  (queue-enqueue q 1)\n  (queue-enqueue q 2)\n  (queue-enqueue q 3)\n  (queue-last q))\n",
    "demo-result": "3"
  },
  {
    "name": "queue-length",
    "demo-src": "(let ((q (queue-create)))\n  (queue-enqueue q 1)\n  (queue-enqueue q 2)\n  (queue-enqueue q 3)\n  (queue-prepend q 0)\n  (queue-length q))\n",
    "demo-result": "4"
  },
  {
    "name": "quote",
    "demo-src": "(quote (+ 1 2))\n",
    "demo-result": "(+ 1 2)"
  },
  {
    "name": "radix-tree-count",
    "demo-src": "(let ((tree ()))\n  (setq tree (radix-tree-insert tree \"application\" t))\n  (setq tree (radix-tree-insert tree \"appetizer\" t))\n  (setq tree (radix-tree-insert tree \"applicative\" t))\n  (setq tree (radix-tree-insert tree \"apple\" t))\n  (radix-tree-count tree))\n",
    "demo-result": "4"
  },
  {
    "name": "radix-tree-from-map",
    "demo-src": "(radix-tree-from-map '((\"application\" . t)\n                       (\"appetizer\" . t)\n                       (\"applicative\" . t)\n                       (\"apple\" . t)))\n",
    "demo-result": "((\"app\"\n  (\"l\"\n   (\"icati\"\n    (\"on\" . t)\n    (\"ve\" . t))\n   (\"e\" . t))\n  (\"etizer\" . t)))"
  },
  {
    "name": "radix-tree-insert",
    "demo-src": "(let ((tree ()))\n  (setq tree (radix-tree-insert tree \"application\" t))\n  (setq tree (radix-tree-insert tree \"appetizer\" t))\n  (setq tree (radix-tree-insert tree \"applicative\" t))\n  (setq tree (radix-tree-insert tree \"apple\" t))\n  tree)\n",
    "demo-result": "((\"app\"\n  (\"l\"\n   (\"icati\"\n    (\"on\" . t)\n    (\"ve\" . t))\n   (\"e\" . t))\n  (\"etizer\" . t)))"
  },
  {
    "name": "radix-tree-iter-mappings",
    "demo-src": "(let (tree words)\n  (setq tree (radix-tree-insert tree \"application\" t))\n  (setq tree (radix-tree-insert tree \"appetizer\" t))\n  (setq tree (radix-tree-insert tree \"applicative\" t))\n  (setq tree (radix-tree-insert tree \"apple\" t))\n  (radix-tree-iter-mappings\n   (radix-tree-subtree tree \"app\")\n   (lambda (k v) (push (concat \"app\" k) words)))\n  words)\n",
    "demo-result": "(\"appetizer\" \"apple\" \"applicative\" \"application\")"
  },
  {
    "name": "radix-tree-iter-subtrees",
    "demo-src": "(let (tree words)\n  (setq tree (radix-tree-insert tree \"application\" t))\n  (setq tree (radix-tree-insert tree \"appetizer\" t))\n  (setq tree (radix-tree-insert tree \"applicative\" t))\n  (setq tree (radix-tree-insert tree \"apple\" t))\n  (cl-labels ((mapping\n               (tree prefix)\n               (radix-tree-iter-subtrees\n                tree\n                (lambda (p s)\n                  (let ((nprefix (concat prefix p)))\n                    (pcase s\n                      ((radix-tree-leaf _v) (push nprefix words))\n                      (_ (mapping s nprefix))))))))\n    (mapping tree \"\"))\n  words)\n",
    "demo-result": "(\"appetizer\" \"apple\" \"applicative\" \"application\")"
  },
  {
    "name": "radix-tree-lookup",
    "demo-src": "(let ((tree ()))\n  (setq tree (radix-tree-insert tree \"application\" 1))\n  (setq tree (radix-tree-insert tree \"appetizer\"   2))\n  (setq tree (radix-tree-insert tree \"applicative\" 3))\n  (setq tree (radix-tree-insert tree \"apple\"       4))\n  (radix-tree-lookup tree \"apple\"))\n",
    "demo-result": "4"
  },
  {
    "name": "radix-tree-prefixes",
    "demo-src": "(let ((tree ()))\n  (setq tree (radix-tree-insert tree \"apply\" t))\n  (setq tree (radix-tree-insert tree \"applies\" t))\n  (setq tree (radix-tree-insert tree \"applied\" t))\n  (setq tree (radix-tree-insert tree \"applying\" t))\n  (radix-tree-prefixes tree \"applying\"))\n",
    "demo-result": "((\"applying\" . t)\n (\"apply\" . t))"
  },
  {
    "name": "radix-tree-subtree",
    "demo-src": "(let ((tree ()))\n  (setq tree (radix-tree-insert tree \"application\" 1))\n  (setq tree (radix-tree-insert tree \"appetizer\"   2))\n  (setq tree (radix-tree-insert tree \"applicative\" 3))\n  (setq tree (radix-tree-insert tree \"apple\"       4))\n  (radix-tree-subtree tree \"appl\"))\n",
    "demo-result": "((\"icati\"\n  (\"on\" . 1)\n  (\"ve\" . 3))\n (\"e\" . 4))"
  },
  {
    "name": "random",
    "demo-src": ";; [0, 3)\n(random 3)\n",
    "demo-result": "1"
  },
  {
    "name": "rassoc",
    "demo-src": "(rassoc '(2) '((\"one\" 1)\n               (\"two\" 2)\n               (\"three\" 3)))\n",
    "demo-result": "(\"two\" 2)"
  },
  {
    "name": "rassq",
    "demo-src": "(rassq 'tyke '((tom . jerry) (spike . tyke)))\n",
    "demo-result": "(spike . tyke)"
  },
  {
    "name": "rassq-delete-all",
    "demo-src": "(let ((alist (list (cons 1 2)\n                   (cons 3 4)\n                   (cons 5 6)\n                   (cons 7 2))))\n  (setq alist (rassq-delete-all 2 alist)))\n",
    "demo-result": "((3 . 4)\n (5 . 6))"
  },
  {
    "name": "re-search-forward",
    "demo-src": "(with-temp-buffer\n  (insert \"# Intro\\n\"\n          \"# Usage\\n\"\n          \"# License\\n\")\n  (goto-char (point-min))\n  (let ((matches '()))\n    (while (re-search-forward \"^# \\\\(.+\\\\)$\" nil t)\n      (push (match-string 1) matches))\n    (nreverse matches)))\n",
    "demo-result": "(\"Intro\" \"Usage\" \"License\")"
  },
  {
    "name": "read",
    "demo-src": "(read \"42\")\n",
    "demo-result": "42"
  },
  {
    "name": "read-char-choice",
    "demo-src": "(read-char-choice \"Delete foo.txt? [Type y/n/q] \" '(?y ?n ?q))\n",
    "demo-result": "121"
  },
  {
    "name": "read-color",
    "demo-src": "(read-color)\n",
    "demo-result": "\"green\""
  },
  {
    "name": "read-from-minibuffer",
    "demo-src": "(read-from-minibuffer \"Enter your name: \")\n",
    "demo-result": "\"xuchunyang\""
  },
  {
    "name": "read-from-string",
    "demo-src": "(read-from-string \"(setq x \\\"hello\\\") (setq y 5)\")\n",
    "demo-result": "((setq x \"hello\")\n . 16)"
  },
  {
    "name": "read-kbd-macro",
    "demo-src": "(read-kbd-macro \"C-x C-f\")\n",
    "demo-result": "\"\u0018\u0006\""
  },
  {
    "name": "read-minibuffer",
    "demo-src": "(read-minibuffer \"Enter an expression: \" (format \"%s\" '(+ 1 2)))\n",
    "demo-result": "(+ 1 2)"
  },
  {
    "name": "read-multiple-choice",
    "demo-src": "(read-multiple-choice \"Continue connecting?\"\n                      '((?a \"always\")\n                        (?s \"session only\")\n                        (?n \"no\")))\n",
    "demo-result": "(97 \"always\")"
  },
  {
    "name": "read-no-blanks-input",
    "demo-src": "(read-no-blanks-input \"Username (space and tab are not allowed): \")\n",
    "demo-result": "\"xuchunyang\""
  },
  {
    "name": "read-passwd",
    "demo-src": "(read-passwd \"Your password: \")\n",
    "demo-result": "\"123456\""
  },
  {
    "name": "read-quoted-char",
    "demo-src": "(read-quoted-char \"What character (octal)\")\n",
    "demo-result": "120"
  },
  {
    "name": "read-regexp",
    "demo-src": "(read-regexp \"Search for regexp: \")\n",
    "demo-result": "\"^\\\\* \""
  },
  {
    "name": "read-string",
    "demo-src": "(read-string \"Enter your name: \")\n",
    "demo-result": ""
  },
  {
    "name": "recent-keys",
    "demo-src": "(length (recent-keys))\n",
    "demo-result": "158"
  },
  {
    "name": "record",
    "demo-src": "(record 'foo 23 [bar baz] \"rats\")\n",
    "demo-result": "#s(foo 23\n       [bar baz]\n       \"rats\")"
  },
  {
    "name": "recordp",
    "demo-src": "(recordp #s(a))\n",
    "demo-result": "t"
  },
  {
    "name": "recursive-edit",
    "demo-src": "(defun stop-watch ()\n  \"Start a stop watch, type \\\\[exit-recursive-edit] to stop it.\"\n  (interactive)\n  (let ((t1 (current-time)))\n    (message\n     \"%s\"\n     (substitute-command-keys\n      \"Type \\\\[exit-recursive-edit] to exit the stop watch\"))\n    (recursive-edit)\n    (message\n     \"%f seconds passed\"\n     (float-time (time-subtract (current-time) t1)))))\n",
    "demo-result": "stop-watch"
  },
  {
    "name": "regexp-opt",
    "demo-src": "(regexp-opt '(\"foo\" \"bar\" \"baz\"))\n",
    "demo-result": "\"\\\\(?:ba[rz]\\\\|foo\\\\)\""
  },
  {
    "name": "regexp-opt-charset",
    "demo-src": "(regexp-opt-charset '(?a ?b ?c ?d ?e))\n",
    "demo-result": "\"[a-e]\""
  },
  {
    "name": "regexp-opt-depth",
    "demo-src": "(regexp-opt-depth \"\\\\(foo\\\\)\\\\(bar\\\\)\\\\(?:baz\\\\)\")\n",
    "demo-result": "2"
  },
  {
    "name": "regexp-quote",
    "demo-src": "(regexp-quote \"^The cat$\")\n",
    "demo-result": "\"\\\\^The cat\\\\$\""
  },
  {
    "name": "region-bounds",
    "demo-src": "(with-temp-buffer\n  (set-mark (point))\n  (insert \"hello\")\n  (region-bounds))\n",
    "demo-result": "((1 . 6))"
  },
  {
    "name": "region-noncontiguous-p",
    "demo-src": "(with-temp-buffer\n  (set-mark (point))\n  (insert \"AAA\" ?\\n\n          \"BBB\" ?\\n\n          \"CCC\")\n  (rectangle-mark-mode)\n  (region-noncontiguous-p))\n",
    "demo-result": "t"
  },
  {
    "name": "remhash",
    "demo-src": "(let ((table (make-hash-table)))\n  (puthash 'x 1 table)\n  (puthash 'y 2 table)\n  (remhash 'x table)\n  table)\n",
    "demo-result": "#s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data\n( y 2))"
  },
  {
    "name": "remove",
    "demo-src": "(remove \"a\" '(\"a\" \"b\" \"c\" \"a\"))\n",
    "demo-result": "(\"b\" \"c\")"
  },
  {
    "name": "remove-hook",
    "demo-src": "(remove-hook 'lisp-interaction-mode-hook #'prettify-symbols-mode)\n",
    "demo-result": ""
  },
  {
    "name": "remove-overlays",
    "demo-src": "(with-temp-buffer\n  (let ((ov (make-overlay 1 1)))\n    (overlay-put ov 'happy t)\n    (remove-overlays 1 1 'happy t)\n    (format \"%S\" ov)))\n",
    "demo-result": "\"#<overlay in no buffer>\""
  },
  {
    "name": "remq",
    "demo-src": "(let ((l (list 1 2 3 2)))\n  (remq 2 l))\n",
    "demo-result": "(1 3)"
  },
  {
    "name": "replace-match",
    "demo-src": "(with-temp-buffer\n  (insert \"65 83 68 70\")\n  (goto-char (point-min))\n  (while (re-search-forward \"[0-9]+\" nil t)\n    (replace-match\n     ;; \"65\" => ?A => \"A\"\n     (string (read (match-string 0)))\n     'fixedcase\n     'literal))\n  (buffer-string))\n",
    "demo-result": "\"A S D F\""
  },
  {
    "name": "replace-regexp-in-string",
    "demo-src": "(replace-regexp-in-string \"-\" \", \" \"foo-bar-baz\")\n",
    "demo-result": "\"foo, bar, baz\""
  },
  {
    "name": "replace-region-contents",
    "demo-src": "(with-temp-buffer\n  (insert \"hello\")\n  (replace-region-contents (point-min) (point-max) (lambda () '\"world\"))\n  (buffer-string))\n",
    "demo-result": "\"world\""
  },
  {
    "name": "request",
    "demo-src": "(let (json)\n  (request\n   \"https://api.github.com/status\"\n   :parser #'json-read\n   :success (cl-function\n             (lambda (&key data &allow-other-keys)\n               (setq json data)))\n   :sync t)\n  json)\n",
    "demo-result": "((message . \"GitHub lives! (2018-12-01 23:36:08 -0800) (1)\"))"
  },
  {
    "name": "require",
    "demo-src": "(require 'pcase)\n",
    "demo-result": "pcase"
  },
  {
    "name": "reverse",
    "demo-src": "(let* ((old '(1 2 3))\n       (new (reverse x)))\n  (list old new))\n",
    "demo-result": "((1 2 3)\n (3 2 1))"
  },
  {
    "name": "rfc1843-decode-string",
    "demo-src": "(with-temp-buffer\n  (decode-coding-string\n   (apply #'unibyte-string\n          ;; FIXME: is `string-to-list' the best?\n          (string-to-list\n           (rfc1843-decode-string \"~{<:Ky2;S{#,NpJ)l6HK!#~}\")))\n   'chinese-gbk))\n",
    "demo-result": "#(\"己所不欲，勿施於人。\" 0 10\n  (charset chinese-gbk))"
  },
  {
    "name": "rfc2104-hash",
    "demo-src": "(rfc2104-hash 'md5 64 16 \"passwd\" \"Hi There\")\n",
    "demo-result": "\"63c4c79cd364581232da80ca38adf486\""
  },
  {
    "name": "ring-convert-sequence-to-ring",
    "demo-src": "(ring-convert-sequence-to-ring '(a b c))\n",
    "demo-result": "(0 3 .\n   [c b a])"
  },
  {
    "name": "ring-copy",
    "demo-src": "(ring-copy (make-ring 3))\n",
    "demo-result": "(0 0 .\n   [nil nil nil])"
  },
  {
    "name": "ring-elements",
    "demo-src": "(let ((ring (make-ring 10)))\n  (ring-insert ring 1)\n  (ring-insert ring 2)\n  (ring-insert ring 3)\n  (ring-elements ring))\n",
    "demo-result": "(3 2 1)"
  },
  {
    "name": "ring-empty-p",
    "demo-src": "(ring-empty-p (make-ring 3))\n",
    "demo-result": "t"
  },
  {
    "name": "ring-insert",
    "demo-src": "(let ((ring (make-ring 3)))\n  (ring-insert ring 1)\n  (ring-insert ring 2)\n  (ring-insert ring 3)\n  ring)\n",
    "demo-result": "(0 3 .\n   [1 2 3])"
  },
  {
    "name": "ring-insert-at-beginning",
    "demo-src": "(let ((ring (make-ring 3)))\n  (ring-insert ring 1)\n  (ring-insert ring 2)\n  (ring-insert-at-beginning ring 0)\n  ring)\n",
    "demo-result": "(2 3 .\n   [1 2 0])"
  },
  {
    "name": "ring-length",
    "demo-src": "(let ((ring (make-ring 3)))\n  (ring-insert ring \"hello\")\n  (ring-length ring))\n",
    "demo-result": "1"
  },
  {
    "name": "ring-p",
    "demo-src": "(ring-p (make-ring 3))\n",
    "demo-result": "t"
  },
  {
    "name": "ring-ref",
    "demo-src": "(let ((ring (make-ring 3)))\n  (ring-insert ring 1)\n  (ring-insert ring 2)\n  (ring-insert ring 3)\n  (ring-ref ring 0))\n",
    "demo-result": "3"
  },
  {
    "name": "ring-remove",
    "demo-src": "(let ((ring (make-ring 3)))\n  (ring-insert ring 1)\n  (ring-insert ring 2)\n  (ring-insert ring 3)\n  (ring-remove ring)\n  ring)\n",
    "demo-result": "(0 2 .\n   [2 3 nil])"
  },
  {
    "name": "ring-resize",
    "demo-src": "(let ((r (make-ring 2)))\n  (ring-insert r \"a\")\n  (ring-insert r \"b\")\n  (ring-resize r 5)\n  (ring-insert r \"c\")\n  r)\n",
    "demo-result": "(0 3 .\n   [\"a\" \"b\" \"c\" nil nil])"
  },
  {
    "name": "ring-size",
    "demo-src": "(ring-size (make-ring 3))\n",
    "demo-result": "3"
  },
  {
    "name": "rot13",
    "demo-src": "(rot13 \"HELLO\")\n",
    "demo-result": "\"URYYB\""
  },
  {
    "name": "rot13-region",
    "demo-src": "(with-temp-buffer\n  (insert \"HELLO\")\n  (rot13-region (point-min) (point-max))\n  (buffer-string))\n",
    "demo-result": "\"URYYB\""
  },
  {
    "name": "rot13-string",
    "demo-src": "(rot13-string \"HELLO\")\n",
    "demo-result": "\"URYYB\""
  },
  {
    "name": "round",
    "demo-src": "(list (round 1.2)\n      (round 1.5))\n",
    "demo-result": "(1 2)"
  },
  {
    "name": "run-at-time",
    "demo-src": "(run-at-time 3 nil #'about-emacs)\n",
    "demo-result": "[nil 23532 38462 672975 nil about-emacs nil nil 0]"
  },
  {
    "name": "run-with-idle-timer",
    "demo-src": "(run-with-idle-timer 3 nil (lambda () (message \"Your Emacs is idle for 3 seconds\")))\n",
    "demo-result": "[nil 0 3 0 nil\n     (lambda nil\n       (message \"Your Emacs is idle for 3 seconds\"))\n     nil idle 0]"
  },
  {
    "name": "rx",
    "demo-src": ";; To match <2018-11-07>\n(rx \"<\" (group (in ?- \"0-9\")) \">\")\n",
    "demo-result": "\"<\\\\([-0-9]\\\\)>\""
  },
  {
    "name": "rx-to-string",
    "demo-src": ";; `rx' is a macro and can't compute regexp at run-time, that is, once the macro\n;; is expanded, the result is static, not only byte-compiler but also\n;; load/require/eval-buffer/etc expands macro eagerly.  By the way, We don't\n;; consider `eval' even if it works, it is simply bad\n;; (eval '(rx (eval (buffer-name))))\n(rx-to-string `(and bos ,(buffer-name) eos))\n",
    "demo-result": "\"\\\\(?:\\\\`elisp-demos\\\\.org\\\\'\\\\)\""
  },
  {
    "name": "s-append",
    "demo-src": "(s-append \"abc\" \"def\")\n",
    "demo-result": "\"defabc\""
  },
  {
    "name": "s-blank?",
    "demo-src": "(s-blank? \" \")\n",
    "demo-result": "nil"
  },
  {
    "name": "s-capitalize",
    "demo-src": "(s-capitalize \"HELLO WORLD\")\n",
    "demo-result": "\"Hello world\""
  },
  {
    "name": "s-capitalized-words",
    "demo-src": "(s-capitalized-words \"hello_world\")\n",
    "demo-result": "\"Hello world\""
  },
  {
    "name": "s-capitalized?",
    "demo-src": "(s-capitalized? \"Capitalized\")\n",
    "demo-result": "t"
  },
  {
    "name": "s-center",
    "demo-src": "(s-center 5 \"a\")\n",
    "demo-result": "\"  a  \""
  },
  {
    "name": "s-chomp",
    "demo-src": "(list (s-chomp \"no newlines\\n\")\n      (s-chomp \"no newlines\\r\\n\")\n      (s-chomp \"some newlines\\n\\n\"))\n",
    "demo-result": "(\"no newlines\" \"no newlines\" \"some newlines\\n\")"
  },
  {
    "name": "s-chop-prefix",
    "demo-src": "(s-chop-prefix \"/tmp/\" \"/tmp/file.js\")\n",
    "demo-result": "\"file.js\""
  },
  {
    "name": "s-chop-prefixes",
    "demo-src": "(s-chop-prefixes '(\"/tmp\" \"/my/\") \"/tmp/my/file.js\")\n",
    "demo-result": "\"file.js\""
  },
  {
    "name": "s-chop-suffix",
    "demo-src": "(s-chop-suffix \"-test.js\" \"penguin-test.js\")\n",
    "demo-result": "\"penguin\""
  },
  {
    "name": "s-chop-suffixes",
    "demo-src": "(s-chop-suffixes '(\".gz\" \".el\") \"simple.el.gz\")\n",
    "demo-result": "\"simple\""
  },
  {
    "name": "s-collapse-whitespace",
    "demo-src": "(s-collapse-whitespace \"only   one space   please\")\n",
    "demo-result": "\"only one space please\""
  },
  {
    "name": "s-concat",
    "demo-src": "(s-concat \"hello\" \" \" \"world\")\n",
    "demo-result": "\"hello world\""
  },
  {
    "name": "s-contains?",
    "demo-src": "(s-contains? \"file\" \"lib/file.js\")\n",
    "demo-result": "t"
  },
  {
    "name": "s-count-matches",
    "demo-src": "(s-count-matches \"a\" \"aba\")\n",
    "demo-result": "2"
  },
  {
    "name": "s-dashed-words",
    "demo-src": "(s-dashed-words \"foo bar baz\")\n",
    "demo-result": "\"foo-bar-baz\""
  },
  {
    "name": "s-downcase",
    "demo-src": "(s-downcase \"EMACS\")\n",
    "demo-result": "\"emacs\""
  },
  {
    "name": "s-ends-with?",
    "demo-src": "(s-ends-with? \".md\" \"readme.md\")\n",
    "demo-result": "t"
  },
  {
    "name": "s-equals?",
    "demo-src": "(s-equals? \"abc\" \"abc\")\n",
    "demo-result": "t"
  },
  {
    "name": "s-format",
    "demo-src": "(s-format\n \"help ${name}! I'm ${malady}\"\n 'aget\n '((\"name\" . \"nic\")\n   (\"malady\" . \"on fire\")))\n",
    "demo-result": "\"help nic! I'm on fire\""
  },
  {
    "name": "s-index-of",
    "demo-src": "(s-index-of \"def\" \"abcdef\")\n",
    "demo-result": "3"
  },
  {
    "name": "s-join",
    "demo-src": "(s-join \"-\" '(\"a\" \"b\" \"c\"))\n",
    "demo-result": "\"a-b-c\""
  },
  {
    "name": "s-left",
    "demo-src": "(s-left 3 \"lib/file.js\")\n",
    "demo-result": "\"lib\""
  },
  {
    "name": "s-less?",
    "demo-src": "(s-less? \"abc\" \"abd\")\n",
    "demo-result": "t"
  },
  {
    "name": "s-lex-format",
    "demo-src": "(let ((x 1))\n  (s-lex-format \"x is ${x}\"))\n",
    "demo-result": "\"x is 1\""
  },
  {
    "name": "s-lines",
    "demo-src": "(s-lines \"abc\\ndef\\nghi\")\n",
    "demo-result": "(\"abc\" \"def\" \"ghi\")"
  },
  {
    "name": "s-lower-camel-case",
    "demo-src": "(s-lower-camel-case \"foo bar baz\")\n",
    "demo-result": "\"fooBarBaz\""
  },
  {
    "name": "s-lowercase?",
    "demo-src": "(s-lowercase? \"file\")\n",
    "demo-result": "t"
  },
  {
    "name": "s-match",
    "demo-src": "(s-match\n (rx (group (= 4 num)) \"-\"\n     (group (= 2 num)) \"-\"\n     (group (= 2 num)))\n \"Today is <2018-11-26>\")\n",
    "demo-result": "(\"2018-11-26\" \"2018\" \"11\" \"26\")"
  },
  {
    "name": "s-match-strings-all",
    "demo-src": "(s-match-strings-all \"ab.\" \"abXabY\")\n",
    "demo-result": "((\"abX\")\n (\"abY\"))"
  },
  {
    "name": "s-matched-positions-all",
    "demo-src": "(s-matched-positions-all \"[0-9]\" \"a0b1\")\n",
    "demo-result": "((1 . 2)\n (3 . 4))"
  },
  {
    "name": "s-matches?",
    "demo-src": "(s-matches? \"^[0-9]+$\" \"123\")\n",
    "demo-result": "t"
  },
  {
    "name": "s-mixedcase?",
    "demo-src": "(s-mixedcase? \"Emacs\")\n",
    "demo-result": "t"
  },
  {
    "name": "s-numeric?",
    "demo-src": "(s-numeric? \"123\")\n",
    "demo-result": "t"
  },
  {
    "name": "s-pad-left",
    "demo-src": "(s-pad-left 3 \"0\" \"3\")\n",
    "demo-result": "\"003\""
  },
  {
    "name": "s-pad-right",
    "demo-src": "(s-pad-right 10 \".\" \"hello\")\n",
    "demo-result": "\"hello.....\""
  },
  {
    "name": "s-prepend",
    "demo-src": "(s-prepend \"abc\" \"def\")\n",
    "demo-result": "\"abcdef\""
  },
  {
    "name": "s-presence",
    "demo-src": "(s-presence \" \")\n",
    "demo-result": "\" \""
  },
  {
    "name": "s-present?",
    "demo-src": "(s-present? \" \")\n",
    "demo-result": "t"
  },
  {
    "name": "s-repeat",
    "demo-src": "(s-repeat 3 \"No\")\n",
    "demo-result": "\"NoNoNo\""
  },
  {
    "name": "s-replace",
    "demo-src": "(s-replace \"file\" \"nope\" \"lib/file.js\")\n",
    "demo-result": "\"lib/nope.js\""
  },
  {
    "name": "s-replace-all",
    "demo-src": "(s-replace-all '((\"Vim\" . \"Emacs\")\n                 (\"Emacs\" . \"Vim\"))\n               \"Vim and Emacs\")\n",
    "demo-result": "\"Emacs and Vim\""
  },
  {
    "name": "s-reverse",
    "demo-src": "(s-reverse \"abc\")\n",
    "demo-result": "\"cba\""
  },
  {
    "name": "s-right",
    "demo-src": "(s-right 3 \"lib/file.js\")\n",
    "demo-result": "\".js\""
  },
  {
    "name": "s-shared-end",
    "demo-src": "(s-shared-end \"bar\" \"var\")\n",
    "demo-result": "\"ar\""
  },
  {
    "name": "s-shared-start",
    "demo-src": "(s-shared-start \"bar\" \"baz\")\n",
    "demo-result": "\"ba\""
  },
  {
    "name": "s-slice-at",
    "demo-src": "(s-slice-at \"/\" \"/path/to/file\")\n",
    "demo-result": "(\"/path\" \"/to\" \"/file\")"
  },
  {
    "name": "s-snake-case",
    "demo-src": "(s-snake-case \"foo-bar-baz\")\n",
    "demo-result": "\"foo_bar_baz\""
  },
  {
    "name": "s-split",
    "demo-src": "(s-split \"/\" \"/path/to/file\" 'omit-nulls)\n",
    "demo-result": "(\"path\" \"to\" \"file\")"
  },
  {
    "name": "s-split-up-to",
    "demo-src": "(s-split-up-to \"/\" \"/path/to/file\" 2 'omit-nulls)\n",
    "demo-result": "(\"path\" \"to/file\")"
  },
  {
    "name": "s-split-words",
    "demo-src": "(s-split-words \"hello_world\")\n",
    "demo-result": "(\"hello\" \"world\")"
  },
  {
    "name": "s-starts-with?",
    "demo-src": "(s-starts-with? \"lib/\" \"lib/file.js\")\n",
    "demo-result": "t"
  },
  {
    "name": "s-titleize",
    "demo-src": "(s-titleize \"hello world\")\n",
    "demo-result": "\"Hello World\""
  },
  {
    "name": "s-titleized-words",
    "demo-src": "(s-titleized-words \"foo_bar_baz\")\n",
    "demo-result": "\"Foo Bar Baz\""
  },
  {
    "name": "s-trim",
    "demo-src": "(s-trim \" hello \")\n",
    "demo-result": "\"hello\""
  },
  {
    "name": "s-trim-left",
    "demo-src": "(s-trim-left \" hello \")\n",
    "demo-result": "\"hello \""
  },
  {
    "name": "s-trim-right",
    "demo-src": "(s-trim-right \" hello \")\n",
    "demo-result": "\" hello\""
  },
  {
    "name": "s-truncate",
    "demo-src": "(s-truncate 14 \"This is too long\")\n",
    "demo-result": "\"This is too...\""
  },
  {
    "name": "s-upcase",
    "demo-src": "(s-upcase \"emacs\")\n",
    "demo-result": "\"EMACS\""
  },
  {
    "name": "s-upper-camel-case",
    "demo-src": "(s-upper-camel-case \"foo bar baz\")\n",
    "demo-result": "\"FooBarBaz\""
  },
  {
    "name": "s-uppercase?",
    "demo-src": "(s-uppercase? \"EMACS\")\n",
    "demo-result": "t"
  },
  {
    "name": "s-with",
    "demo-src": "(s-with \"  hello  \" s-trim s-upcase)\n",
    "demo-result": "\"HELLO\""
  },
  {
    "name": "s-word-initials",
    "demo-src": "(s-word-initials \"foo bar baz\")\n",
    "demo-result": "\"fbb\""
  },
  {
    "name": "s-word-wrap",
    "demo-src": "(s-word-wrap 10 \"This is too long\")\n",
    "demo-result": "\"This is\\ntoo long\""
  },
  {
    "name": "s-wrap",
    "demo-src": "(s-wrap \"foo\" \"<\" \">\")\n",
    "demo-result": "\"<foo>\""
  },
  {
    "name": "safe-length",
    "demo-src": "(safe-length '(1 2 3))\n",
    "demo-result": "3"
  },
  {
    "name": "same-class-p",
    "demo-src": "(defclass my-class () ())\n(same-class-p (my-class) 'my-class)\n",
    "demo-result": "t"
  },
  {
    "name": "save-current-buffer",
    "demo-src": "(list (current-buffer)\n      (save-current-buffer\n        (set-buffer \"*Messages*\")\n        (current-buffer))\n      (current-buffer))\n",
    "demo-result": "(#<buffer elisp-demos.org> #<buffer *Messages*> #<buffer elisp-demos.org>)"
  },
  {
    "name": "save-excursion",
    "demo-src": "(save-excursion\n  (goto-char (point-min)))\n",
    "demo-result": "1"
  },
  {
    "name": "save-match-data",
    "demo-src": "(list\n (string-match \"hello\" \"hello world\")\n (match-data)\n (save-match-data\n   (string-match \"world\" \"hello world\")\n   (match-data))\n (match-data))\n",
    "demo-result": "(0\n (0 5)\n (6 11)\n (0 5))"
  },
  {
    "name": "save-restriction",
    "demo-src": "(with-temp-buffer\n  (insert \"hello world\")\n  (narrow-to-region 1 6)\n  (list (buffer-narrowed-p)\n        (save-restriction\n          (widen)\n          (buffer-narrowed-p))\n        (buffer-narrowed-p)))\n\n",
    "demo-result": "(t nil t)"
  },
  {
    "name": "scan-lists",
    "demo-src": "(with-temp-buffer\n  (with-syntax-table emacs-lisp-mode-syntax-table\n    (insert \"(list (a) (b) (c) (d))\")\n    (goto-char (scan-lists (point-min) 4 -1))\n    (insert \"|\")\n    (buffer-string)))\n",
    "demo-result": "\"(list (a) (b) (c)| (d))\""
  },
  {
    "name": "scan-sexps",
    "demo-src": "(with-temp-buffer\n  (with-syntax-table emacs-lisp-mode-syntax-table\n    (insert \"a b c d\")\n    (goto-char (scan-sexps (point-min) 3))\n    (insert \"|\")\n    (buffer-string)))\n",
    "demo-result": "\"a b c| d\""
  },
  {
    "name": "seconds-to-string",
    "demo-src": "(seconds-to-string 150)\n",
    "demo-result": "\"2.50m\""
  },
  {
    "name": "seconds-to-time",
    "demo-src": "(current-time-string\n (seconds-to-time (* (+ (* 50 365) 12) (* 24 60 60)))\n t)\n",
    "demo-result": "\"Wed Jan  1 00:00:00 2020\""
  },
  {
    "name": "secure-hash",
    "demo-src": "(secure-hash 'md5 \"hello\")\n",
    "demo-result": "\"5d41402abc4b2a76b9719d911017c592\""
  },
  {
    "name": "secure-hash-algorithms",
    "demo-src": "(secure-hash-algorithms)\n",
    "demo-result": "(md5 sha1 sha224 sha256 sha384 sha512)"
  },
  {
    "name": "select-frame-set-input-focus",
    "demo-src": "(select-frame-set-input-focus (next-frame))\n",
    "demo-result": "nil"
  },
  {
    "name": "selected-frame",
    "demo-src": "(selected-frame)\n",
    "demo-result": "#<frame /Users/xcy/src/elisp-demos/elisp-demos.org 0x1049a21e8>"
  },
  {
    "name": "selected-window",
    "demo-src": "(selected-window)\n",
    "demo-result": "#<window 25 on elisp-demos.org>"
  },
  {
    "name": "selected-window-group",
    "demo-src": "(selected-window-group)\n",
    "demo-result": "(#<window 42 on elisp-demos.org> #<window 44 on elisp-demos.org>)"
  },
  {
    "name": "seq-concatenate",
    "demo-src": "(seq-concatenate 'list '(1 2) '(3 4) [5 6])\n",
    "demo-result": "(1 2 3 4 5 6)"
  },
  {
    "name": "seq-contains",
    "demo-src": "(seq-contains '(symbol1 symbol2) 'symbol1)\n",
    "demo-result": "symbol1"
  },
  {
    "name": "seq-contains-p",
    "demo-src": "(seq-contains-p '(1 2 3) 3)\n",
    "demo-result": "t"
  },
  {
    "name": "seq-count",
    "demo-src": "(seq-count (lambda (elt) (> elt 0)) [-1 2 0 3 -2])\n",
    "demo-result": "2"
  },
  {
    "name": "seq-difference",
    "demo-src": "(seq-difference '(2 3 4 5) [1 3 5 6 7])\n",
    "demo-result": "(2 4)"
  },
  {
    "name": "seq-do",
    "demo-src": "(seq-do #'princ '(1 2 3))\n",
    "demo-result": "\"123\""
  },
  {
    "name": "seq-doseq",
    "demo-src": "(seq-doseq (i [1 2 3])\n  (princ i))\n",
    "demo-result": "\"123\""
  },
  {
    "name": "seq-drop",
    "demo-src": "(seq-drop [1 2 3 4 5 6] 3)\n",
    "demo-result": "[4 5 6]"
  },
  {
    "name": "seq-drop-while",
    "demo-src": "(seq-drop-while\n (lambda (elt) (> elt 0))\n '(1 2 3 -1 -2))\n",
    "demo-result": "(-1 -2)"
  },
  {
    "name": "seq-elt",
    "demo-src": "(seq-elt [1 2 3 4] 2)\n",
    "demo-result": "3"
  },
  {
    "name": "seq-empty-p",
    "demo-src": "(seq-map #'seq-empty-p '([] () \"\"))\n",
    "demo-result": "(t t t)"
  },
  {
    "name": "seq-every-p",
    "demo-src": "(seq-every-p #'numberp [2 4 6])\n",
    "demo-result": "t"
  },
  {
    "name": "seq-filter",
    "demo-src": "(seq-filter (lambda (elt) (> elt 0)) [1 -1 3 -3 5])\n",
    "demo-result": "(1 3 5)"
  },
  {
    "name": "seq-find",
    "demo-src": "(seq-find #'numberp [\"abc\" 1 nil])\n",
    "demo-result": "1"
  },
  {
    "name": "seq-first",
    "demo-src": "(string (seq-first \"hello\"))\n",
    "demo-result": "\"h\""
  },
  {
    "name": "seq-group-by",
    "demo-src": "(seq-group-by #'integerp '(1 2.1 3 2 3.2))\n",
    "demo-result": "((t 1 3 2)\n (nil 2.1 3.2))"
  },
  {
    "name": "seq-intersection",
    "demo-src": "(seq-intersection [2 3 4 5] [1 3 5 6 7])\n",
    "demo-result": "(3 5)"
  },
  {
    "name": "seq-into",
    "demo-src": "(seq-into [1 2 3] 'list)\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "seq-length",
    "demo-src": "(seq-length [0 1 2 3])\n",
    "demo-result": "4"
  },
  {
    "name": "seq-let",
    "demo-src": "(seq-let (a _ c) '(1 2 3 4)\n  (list a c))\n",
    "demo-result": "(1 3)"
  },
  {
    "name": "seq-map",
    "demo-src": "(seq-map #'1+ '(1 2 3))\n",
    "demo-result": "(2 3 4)"
  },
  {
    "name": "seq-map-indexed",
    "demo-src": "(seq-map-indexed\n (lambda (elt idx)\n   (list idx elt))\n '(a b c))\n",
    "demo-result": "((0 a)\n (1 b)\n (2 c))"
  },
  {
    "name": "seq-mapcat",
    "demo-src": "(seq-mapcat #'seq-reverse '((3 2 1) (6 5 4)))\n",
    "demo-result": "(1 2 3 4 5 6)"
  },
  {
    "name": "seq-mapn",
    "demo-src": "(seq-mapn #'+ '(2 4 6) '(20 40 60))\n",
    "demo-result": "(22 44 66)"
  },
  {
    "name": "seq-max",
    "demo-src": "(seq-max [1 3 2])\n",
    "demo-result": "3"
  },
  {
    "name": "seq-min",
    "demo-src": "(seq-min [3 1 2])\n",
    "demo-result": "1"
  },
  {
    "name": "seq-partition",
    "demo-src": "(seq-partition '(0 1 2 3 4 5 6 7) 3)\n",
    "demo-result": "((0 1 2)\n (3 4 5)\n (6 7))"
  },
  {
    "name": "seq-position",
    "demo-src": "(seq-position '(a b c) 'b)\n",
    "demo-result": "1"
  },
  {
    "name": "seq-random-elt",
    "demo-src": "(seq-random-elt [1 2 3 4])\n",
    "demo-result": "3"
  },
  {
    "name": "seq-reduce",
    "demo-src": "(seq-reduce #'+ (number-sequence 1 100) 0)\n",
    "demo-result": "5050"
  },
  {
    "name": "seq-remove",
    "demo-src": "(seq-remove (lambda (elt) (> elt 0)) [1 -1 3 -3 5])\n",
    "demo-result": "(-1 -3)"
  },
  {
    "name": "seq-rest",
    "demo-src": "(seq-rest \"hello\")\n",
    "demo-result": "\"ello\""
  },
  {
    "name": "seq-reverse",
    "demo-src": "(seq-reverse (list 1 2 3))\n",
    "demo-result": "(3 2 1)"
  },
  {
    "name": "seq-set-equal-p",
    "demo-src": "(seq-set-equal-p \"good\" \"dog\")\n",
    "demo-result": "t"
  },
  {
    "name": "seq-some",
    "demo-src": "(seq-some #'numberp [\"abc\" 1 nil])\n",
    "demo-result": "t"
  },
  {
    "name": "seq-sort",
    "demo-src": "(seq-sort #'< '(1 3 2))\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "seq-sort-by",
    "demo-src": "(seq-sort-by #'seq-length #'> [\"a\" \"ab\" \"abc\"])\n",
    "demo-result": "[\"abc\" \"ab\" \"a\"]"
  },
  {
    "name": "seq-subseq",
    "demo-src": "(seq-subseq '(1 2 3 4 5) 1)\n",
    "demo-result": "(2 3 4 5)"
  },
  {
    "name": "seq-take",
    "demo-src": "(seq-take '(1 2 3 4) 3)\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "seq-take-while",
    "demo-src": "(seq-take-while\n (lambda (elt)\n   (> elt 0))\n '(1 2 3 -1 -2))\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "seq-uniq",
    "demo-src": "(seq-uniq '(1 2 2 1 3))\n",
    "demo-result": "(1 2 3)"
  },
  {
    "name": "seqp",
    "demo-src": "(seqp [1 2])\n",
    "demo-result": "t"
  },
  {
    "name": "sequencep",
    "demo-src": "(and (sequencep '(1 2 3))\n     (sequencep [1 2 3])\n     (sequencep \"123\"))\n",
    "demo-result": "t"
  },
  {
    "name": "server-eval-at",
    "demo-src": "(shell-command \"emacs-24.4 -Q --daemon=foo\")\n(prog1 (server-eval-at \"foo\" 'emacs-version)\n  (server-eval-at \"foo\" '(kill-emacs)))\n",
    "demo-result": "\"24.4.1\""
  },
  {
    "name": "server-quote-arg",
    "demo-src": "(server-quote-arg \"'(+ 1 2)\")\n",
    "demo-result": "\"'(+&_1&_2)\""
  },
  {
    "name": "server-unquote-arg",
    "demo-src": "(server-unquote-arg \"'(+&_1&_2)\")\n",
    "demo-result": "\"'(+ 1 2)\""
  },
  {
    "name": "set",
    "demo-src": "(let ((x 1))\n  (set 'x 42)\n  x)\n",
    "demo-result": "42"
  },
  {
    "name": "set-binary-mode",
    "demo-src": ";; Flush standard output\n(set-binary-mode 'stdout nil)\n",
    "demo-result": ""
  },
  {
    "name": "set-buffer",
    "demo-src": "(progn (set-buffer \"*Messages*\")\n       (current-buffer))\n",
    "demo-result": "#<buffer *Messages*>"
  },
  {
    "name": "set-buffer-modified-p",
    "demo-src": "(set-buffer-modified-p (buffer-modified-p))\n",
    "demo-result": "nil"
  },
  {
    "name": "set-buffer-multibyte",
    "demo-src": "(with-temp-buffer\n  (set-buffer-multibyte nil)\n  (insert \"λ\")\n  (multibyte-string-p (buffer-string)))\n",
    "demo-result": "nil"
  },
  {
    "name": "set-face-attribute",
    "demo-src": "(set-face-attribute 'default nil :font \"Source Code Pro-13\")\n",
    "demo-result": "nil"
  },
  {
    "name": "set-file-modes",
    "demo-src": "(let ((file (make-temp-file \"elisp-demos-\")))\n  (unwind-protect\n      (progn (set-file-modes file #o644)\n             (format \"%o\" (file-modes file)))\n    (delete-file file)))\n",
    "demo-result": "\"644\""
  },
  {
    "name": "set-keymap-parent",
    "demo-src": "(let ((map (make-sparse-keymap)))\n  (set-keymap-parent map special-mode-map)\n  map)\n",
    "demo-result": ""
  },
  {
    "name": "set-process-plist",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(set-process-plist (get-process \"shell\") '(foo 123 bar 456))\n\n(process-plist (get-process \"shell\"))\n",
    "demo-result": "(foo 123 bar 456)"
  },
  {
    "name": "set-process-query-on-exit-flag",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(set-process-query-on-exit-flag (get-process \"shell\") nil)\n",
    "demo-result": "nil"
  },
  {
    "name": "set-process-sentinel",
    "demo-src": "(set-process-sentinel\n (start-process \"sleep\" nil \"sleep\" \"3\")\n (lambda (process event)\n   (message \"Process: %s had the event '%s'\" process event)))\n",
    "demo-result": "(lambda\n  (process event)\n  (message \"Process: %s had the event '%s'\" process event))"
  },
  {
    "name": "set-syntax-table",
    "demo-src": "(with-temp-buffer\n  (vector\n   (string (char-syntax ?\\{))\n   (progn\n     ;; {} is not a pair of parens in Emacs Lisp\n     (set-syntax-table emacs-lisp-mode-syntax-table)\n     (string (char-syntax ?\\{)))))\n",
    "demo-result": "[\"(\" \"_\"]"
  },
  {
    "name": "set-transient-map",
    "demo-src": "(set-transient-map\n (let ((map (make-sparse-keymap)))\n   (define-key map \"a\" (lambda () (interactive) (message \"=> a\")))\n   (define-key map \"b\" (lambda () (interactive) (message \"=> b\")))\n   map))\n",
    "demo-result": "(defun counter ()\n  (interactive)\n  (let* ((i 0)\n         (msg (lambda () (message \"Use <up> and <down> to adjust: i = %d\" i))))\n    (funcall msg)\n    (set-transient-map\n     (let ((map (make-sparse-keymap)))\n       (define-key map [up] (lambda () (interactive) (cl-incf i) (funcall msg)))\n       (define-key map [down] (lambda () (interactive) (cl-decf i) (funcall msg)))\n       map)\n     (lambda ()\n       (member (this-command-keys-vector) '([up] [down])))\n     (lambda ()\n       (message \"Exiting: i = %d\" i)))))\n"
  },
  {
    "name": "set-window-margins",
    "demo-src": "(set-window-margins (selected-window) 40 40)\n",
    "demo-result": "t"
  },
  {
    "name": "setcar",
    "demo-src": "(let ((x (cons 1 2)))\n  (setcar x 100)\n  x)\n",
    "demo-result": "(100 . 2)"
  },
  {
    "name": "setcdr",
    "demo-src": "(let ((x (cons 1 2)))\n  (setcdr x 200)\n  x)\n",
    "demo-result": "(1 . 200)"
  },
  {
    "name": "setenv",
    "demo-src": "(setenv \"EMACS_VERSION\" emacs-version)\n",
    "demo-result": "\"26.1\""
  },
  {
    "name": "setf",
    "demo-src": "(let ((numbers (list 1 2 3)))\n  (setf (elt numbers 1) 200)\n  numbers)\n\n",
    "demo-result": "(1 200 3)"
  },
  {
    "name": "setplist",
    "demo-src": "(setplist 'foo '(a 1 b (2 3) c nil))\n",
    "demo-result": "(a 1 b\n   (2 3)\n   c nil)"
  },
  {
    "name": "setq",
    "demo-src": "(let ((x 0))\n  (setq x 42)\n  x)\n",
    "demo-result": "42"
  },
  {
    "name": "sha1",
    "demo-src": "(sha1 \"hello\")\n",
    "demo-result": "\"aaf4c61ddcc5e8a2dabede0f3b482cd9aea9434d\""
  },
  {
    "name": "shell-command-to-string",
    "demo-src": "(shell-command-to-string \"echo hello world\")\n",
    "demo-result": "\"hello world\\n\""
  },
  {
    "name": "shell-quote-argument",
    "demo-src": "(shell-quote-argument \"Library/Application Support\")\n",
    "demo-result": "\"Library/Application\\\\ Support\""
  },
  {
    "name": "should",
    "demo-src": "(should (= (expt 2 10) 1024))\n",
    "demo-result": "t"
  },
  {
    "name": "should-error",
    "demo-src": "(should-error (/ 1 0) :type 'arith-error)\n",
    "demo-result": "(arith-error)"
  },
  {
    "name": "signal",
    "demo-src": "(signal 'wrong-type-argument '(numberp \"string\"))\n",
    "demo-result": ""
  },
  {
    "name": "signal-process",
    "demo-src": ";; Start the shell process if not already\n(shell)\n\n(signal-process (get-process \"shell\") 'SIGHUP)\n",
    "demo-result": ""
  },
  {
    "name": "sin",
    "demo-src": "(sin (/ float-pi 2))\n",
    "demo-result": "1.0"
  },
  {
    "name": "sit-for",
    "demo-src": "(sit-for 3)\n",
    "demo-result": "t"
  },
  {
    "name": "sleep-for",
    "demo-src": "(sleep-for 3)\n",
    "demo-result": "nil"
  },
  {
    "name": "slot-boundp",
    "demo-src": "(defclass person ()\n  ((name :initarg :name\n         :initform user-full-name)\n   (birthday :initarg :birthday))\n  \"A person class.\")\n\n(list (slot-boundp (person) :name)\n      (slot-boundp (person) :birthday))\n",
    "demo-result": "(t nil)"
  },
  {
    "name": "slot-exists-p",
    "demo-src": "(defclass circle ()\n  ((radius :initarg :radius))\n  \"A circle class.\")\n\n(list (slot-exists-p 'circle 'radius)\n      (slot-exists-p (circle :radius 10) 'radius))\n",
    "demo-result": "(0 0)"
  },
  {
    "name": "sort",
    "demo-src": "(let ((num '(1 3 2 6 5 4 0)))\n  (sort num #'<))\n",
    "demo-result": "(0 1 2 3 4 5 6)"
  },
  {
    "name": "sort-regexp-fields",
    "demo-src": "(with-temp-buffer\n  (insert \"d, a, c, b,\")\n  (sort-regexp-fields nil \".,\" \"\\\\&\" (point-min) (point-max))\n  (buffer-string))\n",
    "demo-result": "\"a, b, c, d,\""
  },
  {
    "name": "soundex",
    "demo-src": "(soundex \"Rubin\")\n",
    "demo-result": "\"R150\""
  },
  {
    "name": "special-form-p",
    "demo-src": "(list\n :if   (special-form-p 'if)\n :when (special-form-p 'when))\n",
    "demo-result": "(:if t :when nil)"
  },
  {
    "name": "special-variable-p",
    "demo-src": "(special-variable-p 'emacs-version)\n",
    "demo-result": "t"
  },
  {
    "name": "split-string",
    "demo-src": "(split-string \"The   quick brown fox.\" \" +\")\n",
    "demo-result": "(\"The\" \"quick\" \"brown\" \"fox.\")"
  },
  {
    "name": "split-string-and-unquote",
    "demo-src": "(split-string-and-unquote \"-o \\\"foo bar.txt\\\"\")\n",
    "demo-result": "(\"-o\" \"foo bar.txt\")"
  },
  {
    "name": "sqrt",
    "demo-src": "(sqrt 4)\n",
    "demo-result": "2.0"
  },
  {
    "name": "start-process",
    "demo-src": "(start-process \"sleep\" \"*sleep*\" \"sleep\" \"5\")\n",
    "demo-result": "#<process sleep>"
  },
  {
    "name": "start-process-shell-command",
    "demo-src": "(start-process-shell-command \"sleep\" \"*sleep*\" \"sleep 5 && echo wake\")\n",
    "demo-result": "#<process sleep>"
  },
  {
    "name": "stem-english",
    "demo-src": "(stem-english \"mesmerizing\")\n",
    "demo-result": "(\"mesmer\" \"mesmeriz\" \"mesmerize\" \"mesmerizing\")"
  },
  {
    "name": "store-substring",
    "demo-src": "(let ((a-str \"hello\"))\n  (store-substring a-str 0 ?H)\n  a-str)\n",
    "demo-result": "\"Hello\""
  },
  {
    "name": "stream",
    "demo-src": "(stream-first (stream '(1 2 3)))\n",
    "demo-result": "1"
  },
  {
    "name": "stream-append",
    "demo-src": "(seq-into (stream-append (stream '(1 2 3)) (stream '(4 5 6)))\n          'list)\n",
    "demo-result": "(1 2 3 4 5 6)"
  },
  {
    "name": "stream-concatenate",
    "demo-src": "(let ((stream1 (stream '(1 2 3)))\n      (stream2 (stream '(4 5 6))))\n  (seq-into (stream-concatenate (stream (list stream1 stream2)))\n            'list))\n",
    "demo-result": "(1 2 3 4 5 6)"
  },
  {
    "name": "stream-cons",
    "demo-src": "(cl-labels ((fib (a b) (stream-cons a (fib b (+ a b)))))\n  (let ((stream (fib 0 1)))\n    (seq-into (seq-take stream 11) 'list)))\n",
    "demo-result": "(0 1 1 2 3 5 8 13 21 34 55)"
  },
  {
    "name": "stream-empty-p",
    "demo-src": "(stream-empty-p (stream-rest (stream '(1))))\n",
    "demo-result": "t"
  },
  {
    "name": "stream-first",
    "demo-src": "(stream-first (stream '(1 2 3)))\n",
    "demo-result": "1"
  },
  {
    "name": "stream-flush",
    "demo-src": "(let ((i 0))\n  (cl-labels ((fun\n               ()\n               (stream-make\n                (when (< i 10)\n                  (setq i (1+ i))\n                  ;; do some side effects\n                  (message \"=> %d\" i)\n                  (cons nil (fun))))))\n    (stream-flush (fun))))\n",
    "demo-result": ""
  },
  {
    "name": "stream-from-iterator",
    "demo-src": "(let* ((iter-fn (iter-lambda ()\n                  (let ((a 0)\n                        (b 1))\n                    (while t\n                      (iter-yield a)\n                      (cl-psetq a b\n                                b (+ a b))))))\n       (iter (funcall iter-fn))\n       (stream (stream-from-iterator iter)))\n  (seq-into (seq-take stream 11) 'list))\n",
    "demo-result": "(0 1 1 2 3 5 8 13 21 34 55)"
  },
  {
    "name": "stream-iterate-function",
    "demo-src": "(seq-into (seq-take (stream-iterate-function #'1+ 0)\n                    10)\n          'list)\n",
    "demo-result": "(0 1 2 3 4 5 6 7 8 9)"
  },
  {
    "name": "stream-of-directory-files",
    "demo-src": ";; How many Emacs Lisp files do I have in ~/.emacs.d?\n(seq-length\n (stream-of-directory-files\n  user-emacs-directory nil nil\n  (lambda (dir)\n    (let ((basename (file-name-nondirectory dir)))\n      (not (or (member basename '(\".git\" \"var\" \"etc\" \".cask\" \"el-get\"))\n               ;; elpa-26.1, elpa-26.2\n               (string-prefix-p \"elpa\" basename)))))\n  nil\n  (lambda (file)\n    (equal \"el\" (file-name-extension file)))))\n",
    "demo-result": "80"
  },
  {
    "name": "stream-pop",
    "demo-src": "(let ((stream (stream-range 1 10))\n      result)\n  (while (not (stream-empty-p stream))\n    (push (stream-pop stream) result))\n  (nreverse result))\n",
    "demo-result": "(1 2 3 4 5 6 7 8 9)"
  },
  {
    "name": "stream-range",
    "demo-src": "(let ((stream (stream-range 0))\n      result)\n  (dotimes (_ 10 (nreverse result))\n    (push (stream-first stream) result)\n    (setq stream (stream-rest stream))))\n",
    "demo-result": "(0 1 2 3 4 5 6 7 8 9)"
  },
  {
    "name": "stream-regexp",
    "demo-src": "(with-temp-buffer\n  (insert \"<2018-11-30>\")\n  (goto-char (point-min))\n  (let ((stream (stream-regexp (current-buffer) \"[0-9]+\")))\n    (seq-into (seq-map (lambda (match)\n                         (apply #'buffer-substring match))\n                       stream)\n              'list)))\n",
    "demo-result": "(\"2018\" \"11\" \"30\")"
  },
  {
    "name": "stream-rest",
    "demo-src": "(stream-first (stream-rest (stream '(1 2 3))))\n",
    "demo-result": "2"
  },
  {
    "name": "stream-scan",
    "demo-src": ";; (* 1 2 3 4 5)\n;; (* (* (* (* (* 1 1) 2) 3) 4) 5)\n(seq-elt (stream-scan #'* 1 (stream-range 1))\n         5)\n",
    "demo-result": "120"
  },
  {
    "name": "streamp",
    "demo-src": "(streamp (stream '(1 2 3)))\n",
    "demo-result": "t"
  },
  {
    "name": "string",
    "demo-src": "(string ?a ?b ?c)\n",
    "demo-result": "\"abc\""
  },
  {
    "name": "string-as-multibyte",
    "demo-src": "(string-as-multibyte (string-as-unibyte \"λ\"))\n",
    "demo-result": "\"λ\""
  },
  {
    "name": "string-as-unibyte",
    "demo-src": "(mapcar #'identity (string-as-unibyte \"λ\"))\n",
    "demo-result": "(206 187)"
  },
  {
    "name": "string-blank-p",
    "demo-src": "(string-blank-p \" \")\n",
    "demo-result": "0"
  },
  {
    "name": "string-bytes",
    "demo-src": ";; #x3bb, #xCE #xBB\n(string-bytes \"λ\")\n",
    "demo-result": "2"
  },
  {
    "name": "string-distance",
    "demo-src": "(string-distance \"kitten\" \"sitting\")\n",
    "demo-result": "3"
  },
  {
    "name": "string-empty-p",
    "demo-src": "(string-empty-p \"\")\n",
    "demo-result": "t"
  },
  {
    "name": "string-join",
    "demo-src": "(string-join '(\"a\" \"b\" \"c\") \"-\")\n",
    "demo-result": "\"a-b-c\""
  },
  {
    "name": "string-match",
    "demo-src": "(let ((string \"Today is <2018-11-07>.\"))\n  (when (string-match \"<\\\\([-0-9]+\\\\)>\" string)\n    (match-string 1 string)))\n",
    "demo-result": "\"2018-11-07\""
  },
  {
    "name": "string-match-p",
    "demo-src": "(list (string-match-p \"world\" \"hello world\")\n      (string-match-p \"12345\" \"hello world\"))\n",
    "demo-result": "(6 nil)"
  },
  {
    "name": "string-or-null-p",
    "demo-src": "(mapcar #'string-or-null-p '(\"\" nil 42 t))\n",
    "demo-result": "(t t nil nil)"
  },
  {
    "name": "string-prefix-p",
    "demo-src": "(string-prefix-p \"Sat\" \"Saturday night plans\")\n",
    "demo-result": "t"
  },
  {
    "name": "string-remove-prefix",
    "demo-src": "(string-remove-prefix \"=> \" \"=> Hello <=\")\n",
    "demo-result": "\"Hello <=\""
  },
  {
    "name": "string-remove-suffix",
    "demo-src": "(string-remove-suffix \" <=\" \"=> Hello <=\")\n",
    "demo-result": "\"=> Hello\""
  },
  {
    "name": "string-suffix-p",
    "demo-src": "(string-suffix-p \"!\" \"Cats are the best!\")\n",
    "demo-result": "t"
  },
  {
    "name": "string-to-char",
    "demo-src": "(string-to-char \"abc\")\n",
    "demo-result": "97"
  },
  {
    "name": "string-to-list",
    "demo-src": "(string-to-list \"abc\")\n",
    "demo-result": "(97 98 99)"
  },
  {
    "name": "string-to-multibyte",
    "demo-src": ";; λ, #x3bb, #xCE #xBB\n(string-to-multibyte \"\\u03BB\")\n",
    "demo-result": "\"λ\""
  },
  {
    "name": "string-to-number",
    "demo-src": "(string-to-number \"42\")\n",
    "demo-result": "42"
  },
  {
    "name": "string-to-syntax",
    "demo-src": "(string-to-syntax \"()\")\n",
    "demo-result": "(4 . 41)"
  },
  {
    "name": "string-to-unibyte",
    "demo-src": ";; FIXME: I don't understand this function\n",
    "demo-result": ""
  },
  {
    "name": "string-to-vector",
    "demo-src": "(string-to-vector \"hello\")\n",
    "demo-result": "[104 101 108 108 111]"
  },
  {
    "name": "string-trim",
    "demo-src": "(string-trim \" hello \")\n",
    "demo-result": "\"hello\""
  },
  {
    "name": "string-trim-left",
    "demo-src": "(string-trim-left \" hello \")\n",
    "demo-result": "\"hello \""
  },
  {
    "name": "string-trim-right",
    "demo-src": "(string-trim-right \" hello \")\n",
    "demo-result": "\" hello\""
  },
  {
    "name": "string-version-lessp",
    "demo-src": "(string-version-lessp \"foo2.png\" \"foo12.png\")\n",
    "demo-result": "t"
  },
  {
    "name": "string-width",
    "demo-src": "(string-width \"你好，世界！\")\n",
    "demo-result": "12"
  },
  {
    "name": "string<",
    "demo-src": "(string< \"abc\" \"abd\")\n",
    "demo-result": "t"
  },
  {
    "name": "string=",
    "demo-src": "(string= \"foo\" \"foo\")\n",
    "demo-result": "t"
  },
  {
    "name": "string>",
    "demo-src": "(string> \"abd\" \"abc\")\n",
    "demo-result": "t"
  },
  {
    "name": "stringp",
    "demo-src": "(stringp \"\")\n",
    "demo-result": "t"
  },
  {
    "name": "subr-arity",
    "demo-src": "(subr-arity (symbol-function 'message))\n",
    "demo-result": "(1 . many)"
  },
  {
    "name": "subrp",
    "demo-src": "(subrp (symbol-function 'message))\n",
    "demo-result": "t"
  },
  {
    "name": "subst-char-in-region",
    "demo-src": "(with-temp-buffer\n  (insert \"/Users/xcy/.emacs.d/init.el\")\n  (subst-char-in-region (point-min) (point-max) ?/ ?!)\n  (buffer-string))\n",
    "demo-result": "\"!Users!xcy!.emacs.d!init.el\""
  },
  {
    "name": "subst-char-in-string",
    "demo-src": "(subst-char-in-string ?/ ?! \"/Users/xcy/.emacs.d/init.el\")\n",
    "demo-result": "\"!Users!xcy!.emacs.d!init.el\""
  },
  {
    "name": "substitute-command-keys",
    "demo-src": "(substitute-command-keys \"To save a file, type \\\\[save-buffer].\")\n",
    "demo-result": "\"To save a file, type C-x C-s.\""
  },
  {
    "name": "substitute-in-file-name",
    "demo-src": "(substitute-in-file-name \"$HOME/.vimrc\")\n",
    "demo-result": "\"/Users/xcy/.vimrc\""
  },
  {
    "name": "substring",
    "demo-src": "(substring \"abcdefg\" 0 3)\n",
    "demo-result": "\"abc\""
  },
  {
    "name": "substring-no-properties",
    "demo-src": "(substring-no-properties (propertize \"hello\" 'face 'italic))\n",
    "demo-result": "\"hello\""
  },
  {
    "name": "suspend-emacs",
    "demo-src": ";; Emacs -> Vim -> Emacs\n(suspend-emacs \"vim ; fg\")\n",
    "demo-result": ""
  },
  {
    "name": "svg-circle",
    "demo-src": "(let ((svg (svg-create 100 100)))\n  (svg-circle svg 50 50 50 :fill-color \"red\")\n  svg)\n",
    "demo-result": "(svg\n ((width . 100)\n  (height . 100)\n  (version . \"1.1\")\n  (xmlns . \"http://www.w3.org/2000/svg\"))\n (circle\n  ((cx . 50)\n   (cy . 50)\n   (r . 50)\n   (fill . \"red\"))))\n"
  },
  {
    "name": "svg-create",
    "demo-src": "(svg-create 100 100)\n",
    "demo-result": "(svg\n ((width . 100)\n  (height . 100)\n  (version . \"1.1\")\n  (xmlns . \"http://www.w3.org/2000/svg\")))"
  },
  {
    "name": "svg-gradient",
    "demo-src": "(let ((svg (svg-create 400 400)))\n  (svg-gradient svg \"gradient1\" 'linear '((0 . \"red\") (100 . \"blue\")))\n  (svg-circle svg 200 200 100 :gradient \"gradient1\")\n  svg)\n",
    "demo-result": "(svg\n ((width . 400)\n  (height . 400)\n  (version . \"1.1\")\n  (xmlns . \"http://www.w3.org/2000/svg\"))\n (defs nil\n   (linearGradient\n    ((id . \"gradient1\")\n     (x1 . 0)\n     (x2 . 0)\n     (y1 . 0)\n     (y2 . 1))\n    (stop\n     ((offset . \"0%\")\n      (stop-color . \"red\")))\n    (stop\n     ((offset . \"100%\")\n      (stop-color . \"blue\")))))\n (circle\n  ((cx . 200)\n   (cy . 200)\n   (r . 100)\n   (x1 . 0)\n   (x2 . 0)\n   (y1 . 0)\n   (y2 . 1)\n   (fill . \"url(#gradient1)\"))))\n"
  },
  {
    "name": "svg-image",
    "demo-src": "(svg-image (svg-create 100 100))\n",
    "demo-result": "(image :type svg :data \"<svg width=\\\"100\\\" height=\\\"100\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"></svg>\" :scale 1)"
  },
  {
    "name": "svg-insert-image",
    "demo-src": "(let ((svg (svg-create 300 200)))\n  (svg-rectangle svg 0 0 \"100%\" \"100%\" :fill-color \"red\")\n  (svg-circle svg 150 100 80 :fill-color \"green\")\n  (svg-text svg \"SVG\"\n            :font-size 60\n            :text-anchor \"middle\"\n            :x 150\n            :y 125\n            :fill-color \"white\")\n  (with-current-buffer (generate-new-buffer \"*SVG*\")\n    (svg-insert-image svg)\n    (display-buffer (current-buffer)))\n  nil)\n",
    "demo-result": "nil"
  },
  {
    "name": "svg-line",
    "demo-src": "(let ((svg (svg-create 100 100)))\n  (svg-line svg 0 0 100 100 :stroke-color \"red\")\n  svg)\n",
    "demo-result": "(svg\n ((width . 100)\n  (height . 100)\n  (version . \"1.1\")\n  (xmlns . \"http://www.w3.org/2000/svg\"))\n (line\n  ((x1 . 0)\n   (x2 . 100)\n   (y1 . 0)\n   (y2 . 100)\n   (stroke . \"red\"))))\n"
  },
  {
    "name": "svg-print",
    "demo-src": "(with-temp-buffer\n  (svg-print (svg-create 100 100))\n  (buffer-string))\n",
    "demo-result": "\"<svg width=\\\"100\\\" height=\\\"100\\\" version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"></svg>\""
  },
  {
    "name": "svg-rectangle",
    "demo-src": "(let ((svg (svg-create 100 100)))\n  (svg-rectangle svg 0 0 \"100%\" \"100%\" :fill-color \"red\")\n  svg)\n",
    "demo-result": "(svg\n ((width . 100)\n  (height . 100)\n  (version . \"1.1\")\n  (xmlns . \"http://www.w3.org/2000/svg\"))\n (rect\n  ((width . \"100%\")\n   (height . \"100%\")\n   (x . 0)\n   (y . 0)\n   (fill . \"red\"))))\n"
  },
  {
    "name": "svg-remove",
    "demo-src": "(let ((svg (svg-create 100 100)))\n  (svg-line svg 0 0 100 100 :stroke-color \"red\" :id \"line1\")\n  (svg-remove svg \"line1\")\n  svg)\n",
    "demo-result": "(svg\n ((width . 100)\n  (height . 100)\n  (version . \"1.1\")\n  (xmlns . \"http://www.w3.org/2000/svg\")))"
  },
  {
    "name": "svg-text",
    "demo-src": "(let ((svg (svg-create 300 200)))\n  (svg-text\n   svg \"SVG\"\n   :font-size 60\n   :text-anchor \"middle\"\n   :x 150\n   :y 125\n   :fill-color \"white\")\n  svg)\n",
    "demo-result": "(svg\n ((width . 300)\n  (height . 200)\n  (version . \"1.1\")\n  (xmlns . \"http://www.w3.org/2000/svg\"))\n (text\n  ((y . 125)\n   (x . 150)\n   (text-anchor . \"middle\")\n   (font-size . 60)\n   (fill . \"white\"))\n  \"SVG\"))\n"
  },
  {
    "name": "symbol-file",
    "demo-src": "(symbol-file 'pcase)\n",
    "demo-result": "\"/Users/xcy/src/emacs-mac/lisp/emacs-lisp/pcase.elc\""
  },
  {
    "name": "symbol-function",
    "demo-src": "(symbol-function '+)\n",
    "demo-result": "#<subr +>"
  },
  {
    "name": "symbol-name",
    "demo-src": "(symbol-name 'foo)\n",
    "demo-result": "\"foo\""
  },
  {
    "name": "symbol-plist",
    "demo-src": "(symbol-plist 'arith-error)\n",
    "demo-result": "(error-conditions\n (arith-error error)\n error-message \"Arithmetic error\")"
  },
  {
    "name": "symbol-value",
    "demo-src": "(symbol-value (intern \"emacs-version\"))\n",
    "demo-result": "\"26.1\""
  },
  {
    "name": "symbolp",
    "demo-src": "(symbolp 'foo)\n",
    "demo-result": "t"
  },
  {
    "name": "syntax-after",
    "demo-src": "(with-temp-buffer\n  (insert \"()\")\n  ;; the temporarily buffer uses standard-syntax-table\n  (syntax-after (point-min)))\n\n;; (string-to-syntax \"()\")\n;; => (4 . 41)\n",
    "demo-result": "(4 . 41)"
  },
  {
    "name": "syntax-class",
    "demo-src": "(with-temp-buffer\n  (insert \"()\")\n  (syntax-class (syntax-after (point-min))))\n\n;; (string-to-syntax \"(\")\n;; => (4)\n",
    "demo-result": "4"
  },
  {
    "name": "system-name",
    "demo-src": "(system-name)\n",
    "demo-result": "\"Chunyangs-MacBook-Air.local\""
  },
  {
    "name": "tan",
    "demo-src": "(tan (/ float-pi 4))\n",
    "demo-result": "0.9999999999999999"
  },
  {
    "name": "temporary-file-directory",
    "demo-src": "(list :local\n      (temporary-file-directory)\n      :remote\n      (let ((default-directory \"/ssh:root@192.168.8.1:\"))\n        (temporary-file-directory)))\n",
    "demo-result": "(:local \"/var/folders/7f/s191h4q97p90374yw15ssrs00000gn/T/\" :remote \"/ssh:root@192.168.8.1:/tmp\")"
  },
  {
    "name": "terminal-list",
    "demo-src": "(terminal-list)\n",
    "demo-result": "(#<terminal 1 on Mac>)"
  },
  {
    "name": "terminal-name",
    "demo-src": "(terminal-name)\n",
    "demo-result": "\"Mac\""
  },
  {
    "name": "terpri",
    "demo-src": "(terpri)\n",
    "demo-result": "\"\\n\""
  },
  {
    "name": "test-completion",
    "demo-src": "(test-completion \"bar\" '(\"foo\" \"bar\" \"baz\"))\n",
    "demo-result": "t"
  },
  {
    "name": "text-property-any",
    "demo-src": "(let ((s (propertize\n          (concat (propertize \"alice\" 'sender t)\n                  (propertize \" => \" 'separator t)\n                  (propertize \"bob\" 'receiver t))\n          'message t)))\n  (text-property-any 0 (length s) 'separator t s))\n",
    "demo-result": "5"
  },
  {
    "name": "text-property-not-all",
    "demo-src": "(let ((s (propertize\n          (concat (propertize \"alice\" 'sender t)\n                  (propertize \" => \" 'separator t)\n                  (propertize \"bob\" 'receiver t))\n          'message t)))\n  (text-property-not-all 0 (length s) 'sender t s))\n",
    "demo-result": "5"
  },
  {
    "name": "text-property-search-backward",
    "demo-src": "(with-temp-buffer\n  (insert (format \"<< %s, %s, %s >>\"\n                  (propertize \"foo\" 'face 'bold)\n                  (propertize \"bar\" 'face 'italic)\n                  (propertize \"baz\" 'face 'bold)))\n  (cl-loop with match\n           while (setq match (text-property-search-backward 'face 'bold t))\n           collect (buffer-substring (prop-match-beginning match)\n                                     (prop-match-end match))))\n",
    "demo-result": "(#(\"baz\" 0 3\n   (face bold))\n #(\"foo\" 0 3\n   (face bold)))"
  },
  {
    "name": "text-property-search-forward",
    "demo-src": "(with-temp-buffer\n  (insert\n   (replace-regexp-in-string\n    (rx (or \"bold\" \"italic\"))\n    (lambda (s)\n      (pcase s\n        (\"bold\" (propertize \"bold\" 'face 'bold))\n        (\"italic\" (propertize \"italic\" 'face 'italic))))\n    \"This is a bold and here's bolditalic and this is the end.\"))\n  (goto-char (point-min))\n  (cl-loop with match\n           while (setq match (text-property-search-forward 'face nil nil))\n           collect (buffer-substring (prop-match-beginning match)\n                                     (prop-match-end match))))\n",
    "demo-result": "(#(\"bold\" 0 4\n   (face bold))\n #(\"bold\" 0 4\n   (face bold))\n #(\"italic\" 0 6\n   (face italic)))"
  },
  {
    "name": "thing-at-point",
    "demo-src": "(thing-at-point 'symbol)\n",
    "demo-result": ""
  },
  {
    "name": "thing-at-point-looking-at",
    "demo-src": "(with-temp-buffer\n  (insert \"Today is <2019-10-30>.\")\n  ;;       123456789abcdef\n  (goto-char #xf)\n  (when (thing-at-point-looking-at\n         (rx (+ (in \"0-9-\")))\n         ;; limit to current line\n         (max (- (point) (line-beginning-position))\n              (- (line-end-position) (point))))\n    (match-string 0)))\n",
    "demo-result": "\"2019-10-30\""
  },
  {
    "name": "thread-first",
    "demo-src": "(thread-first 5\n  (+ 20)\n  (/ 25)\n  -\n  (+ 40))\n",
    "demo-result": "39"
  },
  {
    "name": "thread-join",
    "demo-src": "(thread-join\n (make-thread\n  (lambda ()\n    (sit-for 3))))\n",
    "demo-result": "nil"
  },
  {
    "name": "thread-last",
    "demo-src": "(thread-last 5\n  (+ 20)\n  (/ 25)\n  -\n  (+ 40))\n",
    "demo-result": "39"
  },
  {
    "name": "threadp",
    "demo-src": "(threadp (current-thread))\n",
    "demo-result": "t"
  },
  {
    "name": "thunk-delay",
    "demo-src": "(let ((delayed (thunk-delay (message \"this message is delayed\"))))\n  (thunk-force delayed))\n",
    "demo-result": "\"this message is delayed\""
  },
  {
    "name": "thunk-evaluated-p",
    "demo-src": "(let ((delayed (thunk-delay (message \"this message is delayed\"))))\n  (thunk-force delayed)\n  (thunk-evaluated-p delayed))\n",
    "demo-result": "t"
  },
  {
    "name": "thunk-force",
    "demo-src": "(let ((x 1))\n  (let ((delayed (thunk-delay (setq x (1+ x)))))\n    (list x\n          (thunk-force delayed)\n          (thunk-force delayed)\n          (thunk-force delayed))))\n",
    "demo-result": "(1 2 2 2)"
  },
  {
    "name": "thunk-let",
    "demo-src": "(thunk-let ((x (/ 1 0)))\n  42)\n",
    "demo-result": "42"
  },
  {
    "name": "time-add",
    "demo-src": "(time-add nil 3600)\n",
    "demo-result": "(23532 41872 521709 0)"
  },
  {
    "name": "time-convert",
    "demo-src": "(time-convert (current-time) 'integer)\n",
    "demo-result": "1577874377"
  },
  {
    "name": "time-equal-p",
    "demo-src": "(time-equal-p\n (encode-time '(29 31 17 30 4 2019 2 t 7200))\n '(23752 27217))\n",
    "demo-result": "t"
  },
  {
    "name": "time-less-p",
    "demo-src": "(time-less-p before-init-time after-init-time)\n",
    "demo-result": "t"
  },
  {
    "name": "time-subtract",
    "demo-src": "(let ((t1 (current-time)))\n  (sit-for 1)\n  (message \"Elapsed time: %fs\"\n           (float-time (time-subtract nil t1))))\n",
    "demo-result": "\"Elapsed time: 1.006051s\""
  },
  {
    "name": "time-to-day-in-year",
    "demo-src": "(time-to-day-in-year (current-time))\n",
    "demo-result": "319"
  },
  {
    "name": "time-to-days",
    "demo-src": "(time-to-days (current-time))\n",
    "demo-result": "737013"
  },
  {
    "name": "time-to-seconds",
    "demo-src": "(time-to-seconds)\n",
    "demo-result": "1542230349.328713"
  },
  {
    "name": "timerp",
    "demo-src": "(timerp (car timer-list))\n",
    "demo-result": "t"
  },
  {
    "name": "tooltip-show",
    "demo-src": "(tooltip-show \"Emacs is addictive!\")\n",
    "demo-result": "nil"
  },
  {
    "name": "tq-close",
    "demo-src": "(let ((tq (tq-create (start-process \"cat\" \"*cat*\" \"cat\"))))\n  (tq-close tq))\n",
    "demo-result": "t"
  },
  {
    "name": "tq-create",
    "demo-src": "(tq-create (start-process \"cat\" \"*cat*\" \"cat\"))\n",
    "demo-result": "(nil #<process cat> . #<buffer  tq-temp-cat>)"
  },
  {
    "name": "tq-enqueue",
    "demo-src": "(let ((tq (tq-create (start-process \"upcase\" \"*upcase*\" \"tr\" \"a-z\" \"A-Z\"))))\n  (tq-enqueue tq\n              (concat user-full-name \"\\n\")\n              \"^$\"\n              nil\n              (lambda (_ response)\n                (message \"Result: %s\" response)))\n  (sit-for .1)\n  (tq-close tq))\n",
    "demo-result": ""
  },
  {
    "name": "translate-region",
    "demo-src": "(with-temp-buffer\n  (insert \"Hello World\")\n  ;; Reverse case, a -> A and A -> a\n  (translate-region\n   (point-min)\n   (point-max)\n   (apply #'string\n          (mapcar (lambda (char)\n                    (cond ((<= ?a char ?z) (- char 32))\n                          ((<= ?A char ?Z) (+ char 32))\n                          (t char)))\n                  ;; ASCII code range\n                  (number-sequence 0 255))))\n  (buffer-string))\n",
    "demo-result": "\"hELLO wORLD\""
  },
  {
    "name": "transpose-regions",
    "demo-src": "(with-temp-buffer\n  (let (beg1 end1 beg2 end2)\n    (insert \"hello\" ?\\n\n            \"world\" ?\\n)\n    (goto-char (point-min))\n    (setq beg1 (line-beginning-position)\n          end1 (line-end-position))\n\n    (forward-line 1)\n    (setq beg2 (line-beginning-position)\n          end2 (line-end-position))\n    (transpose-regions beg1 end1\n                       beg2 end2)\n    (buffer-string)))\n",
    "demo-result": "\"world\\nhello\\n\""
  },
  {
    "name": "truncate",
    "demo-src": "(truncate 1.2)\n",
    "demo-result": "1"
  },
  {
    "name": "truncate-string-to-width",
    "demo-src": "(truncate-string-to-width \"magit-diff: elisp-demos\" 18 nil nil t)\n",
    "demo-result": "\"magit-diff: eli...\""
  },
  {
    "name": "try-completion",
    "demo-src": "(try-completion \"b\" '(\"foo\" \"baz\" \"bar\"))\n",
    "demo-result": "\"ba\""
  },
  {
    "name": "type-of",
    "demo-src": "(type-of 42)\n",
    "demo-result": "integer"
  },
  {
    "name": "ucs-names",
    "demo-src": "(hash-table-count (ucs-names))\n",
    "demo-result": "43519"
  },
  {
    "name": "ucs-normalize-NFC-string",
    "demo-src": ";; (string ?e 769) -> (string ?é)\n(ucs-normalize-NFC-string (string ?e 769))\n",
    "demo-result": "\"é\""
  },
  {
    "name": "ucs-normalize-NFD-string",
    "demo-src": ";; (string ?c ?a ?f ?é) -> (string ?c ?a ?f ?e 769)\n(ucs-normalize-NFD-string \"café\")\n",
    "demo-result": "\"café\""
  },
  {
    "name": "ucs-normalize-NFKC-string",
    "demo-src": "(ucs-normalize-NFKC-string \"ﬃ\")\n",
    "demo-result": "\"ffi\""
  },
  {
    "name": "ucs-normalize-NFKD-string",
    "demo-src": "(ucs-normalize-NFKD-string \"⁵\")\n",
    "demo-result": "\"5\""
  },
  {
    "name": "unibyte-string",
    "demo-src": ";; λ, #x3bb, #xCE #xBB\n(string-as-multibyte (unibyte-string #xCE #xBB))\n",
    "demo-result": "\"λ\""
  },
  {
    "name": "unintern",
    "demo-src": "(let ((a-obarray (make-vector 3 0)))\n  (intern \"foo\" a-obarray)\n  (unintern \"foo\" a-obarray))\n",
    "demo-result": "t"
  },
  {
    "name": "unless",
    "demo-src": "(unless nil 123)\n",
    "demo-result": "123"
  },
  {
    "name": "unwind-protect",
    "demo-src": "(let ((buffer (get-buffer-create \"*temp*\")))\n  (with-current-buffer buffer\n    (unwind-protect\n        (foo-bar-baz-aux)\n      (kill-buffer buffer))))\n",
    "demo-result": ""
  },
  {
    "name": "upcase",
    "demo-src": "(upcase \"Hello World\")\n",
    "demo-result": "\"HELLO WORLD\""
  },
  {
    "name": "upcase-initials",
    "demo-src": "(upcase-initials \"The CAT in the hAt\")\n",
    "demo-result": "\"The CAT In The HAt\""
  },
  {
    "name": "url-build-query-string",
    "demo-src": "(url-build-query-string '((name \"tom\") (age 3)))\n",
    "demo-result": "\"name=tom&age=3\""
  },
  {
    "name": "url-copy-file",
    "demo-src": "(url-copy-file \"http://example.com\" \"index.html\")\n",
    "demo-result": "t"
  },
  {
    "name": "url-encode-url",
    "demo-src": "(url-encode-url \"HTTPS://Google.com?q=hello world\")\n",
    "demo-result": "\"https://google.com?q=hello%20world\""
  },
  {
    "name": "url-file-directory",
    "demo-src": "(url-file-directory\n \"https://www.google.com/webhp?hl=en&sa=X&ved=0ahUKEwj_5qqF0sngAhXlw4sBHUT3DYcQPAgH\")\n",
    "demo-result": "\"https://www.google.com/\""
  },
  {
    "name": "url-file-extension",
    "demo-src": "(url-file-extension \"https://github.com/rejeep/evm/blob/master/README.md?rel=xuchunyang\")\n",
    "demo-result": "\".md\""
  },
  {
    "name": "url-file-nondirectory",
    "demo-src": "(url-file-nondirectory\n \"https://www.google.com/webhp?hl=en&sa=X&ved=0ahUKEwj_5qqF0sngAhXlw4sBHUT3DYcQPAgH\")\n",
    "demo-result": "\"webhp\""
  },
  {
    "name": "url-filename",
    "demo-src": "(url-filename (url-generic-parse-url \"http://localhost:8000/pkg/io/#CopyN\"))\n",
    "demo-result": "\"/pkg/io/\""
  },
  {
    "name": "url-generic-parse-url",
    "demo-src": "(url-generic-parse-url \"https://www.gnu.org/software/emacs/\")\n",
    "demo-result": "#s(url \"https\" nil nil \"www.gnu.org\" nil \"/software/emacs/\" nil nil t nil t t)"
  },
  {
    "name": "url-hexify-string",
    "demo-src": "(url-hexify-string \"hello world\")\n",
    "demo-result": "\"hello%20world\""
  },
  {
    "name": "url-host",
    "demo-src": "(url-host (url-generic-parse-url \"http://example.com/index.html\"))\n",
    "demo-result": "\"example.com\""
  },
  {
    "name": "url-http-user-agent-string",
    "demo-src": "(url-http-user-agent-string)\n",
    "demo-result": "\"User-Agent: URL/Emacs Emacs/26.2 (nil; x86_64-apple-darwin18.5.0)\r\\n\""
  },
  {
    "name": "url-insert-file-contents",
    "demo-src": "(with-temp-buffer\n  ;; (info \"(url) Disk Caching\") is breaking `url-insert-file-contents', so\n  ;; disable cache\n  (let ((url-request-extra-headers '((\"Pragma\" . \"no-cache\"))))\n    (url-insert-file-contents \"http://example.com\"))\n  (re-search-forward (rx \"<title>\" (group (1+ anything)) \"</title>\"))\n  (match-string 1))\n",
    "demo-result": "\"Example Domain\""
  },
  {
    "name": "url-parse-query-string",
    "demo-src": "(url-parse-query-string \"name=tom&age=3\")\n",
    "demo-result": "((\"age\" \"3\")\n (\"name\" \"tom\"))"
  },
  {
    "name": "url-path-and-query",
    "demo-src": "(url-path-and-query\n (url-generic-parse-url\n  \"https://www.google.com/webhp?hl=en&sa=X&ved=0ahUKEwj_5qqF0sngAhXlw4sBHUT3DYcQPAgH\"))\n",
    "demo-result": "(\"/webhp\" . \"hl=en&sa=X&ved=0ahUKEwj_5qqF0sngAhXlw4sBHUT3DYcQPAgH\")"
  },
  {
    "name": "url-queue-retrieve",
    "demo-src": "(url-queue-retrieve \"http://example.com/\"\n                    (lambda (status)\n                      (message \"Status: %s\" status)\n                      (display-buffer (current-buffer))))\n",
    "demo-result": "[nil 0 1 0 1 url-queue-check-progress nil idle 0]"
  },
  {
    "name": "url-recreate-url",
    "demo-src": "(url-recreate-url (url-generic-parse-url \"https://www.gnu.org/software/emacs/\"))\n",
    "demo-result": "\"https://www.gnu.org/software/emacs/\""
  },
  {
    "name": "url-retrieve",
    "demo-src": "(url-retrieve \"http://example.com\"\n              (lambda (status start-time)\n                (message \"The request is completed in %f seconds\"\n                         (float-time (time-subtract nil start-time)))\n                (display-buffer (current-buffer)))\n              `(,(current-time))\n              'silent\n              'inhibit-cookies)\n",
    "demo-result": "#<buffer  *http example.com:80*-426008>"
  },
  {
    "name": "url-retrieve-synchronously",
    "demo-src": "(url-retrieve-synchronously \"http://example.com/\")\n",
    "demo-result": "#<buffer  *http example.com:80*-771275>"
  },
  {
    "name": "url-target",
    "demo-src": "(url-target\n (url-generic-parse-url \"http://localhost:8000/pkg/io/#CopyN\"))\n",
    "demo-result": "\"CopyN\""
  },
  {
    "name": "url-unhex-string",
    "demo-src": "(url-unhex-string \"hello%20world\")\n",
    "demo-result": "\"hello world\""
  },
  {
    "name": "user-error",
    "demo-src": "(user-error \"It's all your fault, not mime\")\n",
    "demo-result": ""
  },
  {
    "name": "user-full-name",
    "demo-src": "(let ((user-full-name \"Hello Kitty\"))\n  (user-full-name))\n",
    "demo-result": "\"Hello Kitty\""
  },
  {
    "name": "user-login-name",
    "demo-src": "(user-login-name)\n",
    "demo-result": "\"xcy\""
  },
  {
    "name": "user-real-login-name",
    "demo-src": "(user-real-login-name)\n",
    "demo-result": "\"xcy\""
  },
  {
    "name": "user-real-uid",
    "demo-src": "(user-real-uid)\n",
    "demo-result": "501"
  },
  {
    "name": "user-uid",
    "demo-src": "(user-uid)\n",
    "demo-result": "501"
  },
  {
    "name": "vconcat",
    "demo-src": "(vconcat '(a b) \"cd\" [e f])\n",
    "demo-result": "[a b 99 100 e f]"
  },
  {
    "name": "vector",
    "demo-src": "(vector 1 2 3)\n",
    "demo-result": "[1 2 3]"
  },
  {
    "name": "vectorp",
    "demo-src": "(vectorp [1 2 3])\n",
    "demo-result": "t"
  },
  {
    "name": "verify-visited-file-modtime",
    "demo-src": "(verify-visited-file-modtime)\n",
    "demo-result": "t"
  },
  {
    "name": "version-to-list",
    "demo-src": "(version-to-list \"26.1\")\n",
    "demo-result": "(26 1)"
  },
  {
    "name": "version<",
    "demo-src": "(version< \"24.5\" \"26.1\")\n",
    "demo-result": "t"
  },
  {
    "name": "version<=",
    "demo-src": "(version<= \"24.5\" \"26.1\")\n",
    "demo-result": "t"
  },
  {
    "name": "version=",
    "demo-src": "(version= \"24.5\" \"24.5\")\n",
    "demo-result": "t"
  },
  {
    "name": "visible-frame-list",
    "demo-src": "(visible-frame-list)\n",
    "demo-result": "(#<frame /Users/xcy/src/elisp-demos/elisp-demos.org 0x1049a21e8>)"
  },
  {
    "name": "websocket-open",
    "demo-src": "(websocket-open\n \"wss://echo.websocket.org/\"\n :on-open\n (lambda (ws)\n   (message \"Connected\")\n   (websocket-send-text ws \"Hello, WebSocket!\"))\n :on-message\n (lambda (ws frame)\n   (message \"Receive: %s\" (websocket-frame-text frame))\n   (websocket-close ws))\n :on-close\n (lambda (ws)\n   (message \"Closed\")))\n",
    "demo-result": ""
  },
  {
    "name": "websocket-server",
    "demo-src": "(let ((wss\n       (websocket-server\n        8888\n        :on-open\n        (lambda (ws)\n          (message \"[Server] on-open\"))\n        :on-message\n        (lambda (ws frame)\n          (message \"[Server] on-message\")\n          (message \"[Server] Received %S from client\" (websocket-frame-text frame))\n          (message \"[Server] Sending %S to client\" (upcase (websocket-frame-text frame)))\n          (websocket-send-text ws (upcase (websocket-frame-text frame))))\n        :on-close\n        (lambda (ws)\n          (message \"[Server] on-close\")))))\n  (websocket-open\n   \"ws://localhost:8888/\"\n   :on-open\n   (lambda (ws)\n     (message \"[Client] on-open\")\n     (message \"[Client] Sending %S to server\" \"Hello, WebSocket!\")\n     (websocket-send-text ws \"Hello, WebSocket!\"))\n   :on-message\n   (lambda (ws frame)\n     (message \"[Client] Received %S from server\" (websocket-frame-text frame))\n     ;; Close the client\n     (websocket-close ws))\n   :on-close\n   (lambda (ws)\n     (message \"[Client] on-close\")))\n  (run-with-idle-timer\n   1 nil\n   (lambda ()\n     (message \"Cleanup, closing the server\")\n     (websocket-server-close wss))))\n",
    "demo-result": ""
  },
  {
    "name": "when",
    "demo-src": "(when t 123)\n",
    "demo-result": "123"
  },
  {
    "name": "when-let",
    "demo-src": "(when-let ((match-index (string-match \"d\" \"abcd\")))\n  (+ match-index 2))\n",
    "demo-result": "5"
  },
  {
    "name": "when-let*",
    "demo-src": "(when-let* ((match-index (string-match \"d\" \"abcd\")))\n  (+ match-index 2))\n",
    "demo-result": "5"
  },
  {
    "name": "where-is-internal",
    "demo-src": "(where-is-internal 'save-buffer)\n",
    "demo-result": "([24 19]\n [menu-bar file save-buffer])"
  },
  {
    "name": "while",
    "demo-src": "(let ((i 1)\n      (sum 0))\n  (while (<= i 100)\n    (setq sum (+ sum i))\n    (setq i (+ i 1)))\n  sum)\n",
    "demo-result": "5050"
  },
  {
    "name": "widen",
    "demo-src": "(with-temp-buffer\n  (insert \"hello world\")\n  (narrow-to-region 1 6)\n  `(:narrowed\n    ,(buffer-string)\n    ,@(widen)\n    :widened\n    ,(buffer-string)))\n",
    "demo-result": "(:narrowed \"hello\" :widened \"hello world\")"
  },
  {
    "name": "window-frame",
    "demo-src": "(window-frame)\n",
    "demo-result": "#<frame /Users/xcy/src/elisp-demos/elisp-demos.org 0x10495b9c8>"
  },
  {
    "name": "window-list",
    "demo-src": "(window-list)\n",
    "demo-result": "(#<window 111 on elisp-demos.org> #<window 119 on *scratch*>)"
  },
  {
    "name": "window-live-p",
    "demo-src": "(window-live-p (selected-window))\n",
    "demo-result": "t"
  },
  {
    "name": "window-margins",
    "demo-src": "(window-margins)\n",
    "demo-result": "(nil)"
  },
  {
    "name": "window-minibuffer-p",
    "demo-src": "(window-minibuffer-p (minibuffer-window))\n",
    "demo-result": "t"
  },
  {
    "name": "window-parent",
    "demo-src": "(window-parent)\n",
    "demo-result": "#<window 43>"
  },
  {
    "name": "window-valid-p",
    "demo-src": "(window-valid-p (selected-window))\n",
    "demo-result": "t"
  },
  {
    "name": "windowp",
    "demo-src": "(windowp (selected-window))\n",
    "demo-result": "t"
  },
  {
    "name": "with-current-buffer",
    "demo-src": "(with-current-buffer \"*Messages*\"\n  (current-buffer))\n",
    "demo-result": "#<buffer *Messages*>"
  },
  {
    "name": "with-demoted-errors",
    "demo-src": "(with-demoted-errors \"Error: %S\"\n  (/ 1 0))\n",
    "demo-result": "nil"
  },
  {
    "name": "with-eval-after-load",
    "demo-src": "(with-eval-after-load 'dired\n  (require 'dired-x))\n",
    "demo-result": "dired-x"
  },
  {
    "name": "with-help-window",
    "demo-src": "(with-help-window \"*My Help Window*\"\n  (princ \"Used keymap is help-mode-map:\")\n  (terpri)\n  (terpri)\n  (prin1 help-mode-map)\n  (terpri))\n",
    "demo-result": "t"
  },
  {
    "name": "with-output-to-string",
    "demo-src": "(with-output-to-string\n  (princ \"Hello World\"))\n",
    "demo-result": "\"Hello World\""
  },
  {
    "name": "with-silent-modifications",
    "demo-src": "(with-temp-buffer\n  (insert \"hello\")\n  (set-buffer-modified-p nil)\n  (with-silent-modifications\n    (add-text-properties (point-min) (point-max) '(display \"world\")))\n  (buffer-modified-p))\n",
    "demo-result": "nil"
  },
  {
    "name": "with-slots",
    "demo-src": "(defclass my-color ()\n  ((alpha) (red) (green) (blue))\n  \"A color class.\")\n\n(let ((c (my-color)))\n  (with-slots (red green blue (a alpha)) c\n    (setq red   #x41\n          green #x69\n          blue  #xE1\n          a 1.0))\n  c)\n",
    "demo-result": "#s(my-color 1.0 65 105 225)"
  },
  {
    "name": "with-syntax-table",
    "demo-src": "(list\n (with-syntax-table emacs-lisp-mode-syntax-table\n   ;; Comment starters: ‘<’\n   (string (char-syntax ?\\;)))\n\n (with-syntax-table text-mode-syntax-table\n   ;; Punctuation characters: ‘.’\n   (string (char-syntax ?\\;))))\n",
    "demo-result": "(\"<\" \".\")"
  },
  {
    "name": "with-temp-buffer",
    "demo-src": "(with-temp-buffer\n  (insert \"hello\")\n  (insert \"world\")\n  (buffer-string))\n",
    "demo-result": "\"helloworld\""
  },
  {
    "name": "with-temp-file",
    "demo-src": "(with-temp-file (make-temp-file \"elisp-demos-\")\n  (insert \"This will be inserted to the file.\\n\")\n  (insert \"Peace.\\n\")\n  42)\n",
    "demo-result": "42"
  },
  {
    "name": "with-temp-message",
    "demo-src": "(progn (message \"The original message\")\n       (sit-for 3)\n       (with-temp-message \"Hello World\"\n         (sit-for 3)))\n",
    "demo-result": "t"
  },
  {
    "name": "with-timeout",
    "demo-src": "(with-timeout (3 (message \"You've not type any key\"))\n  (read-char \"Type some key in 3 seconds\"))\n",
    "demo-result": "\"You've not type any key\""
  },
  {
    "name": "write-char",
    "demo-src": "(write-char ?a)\n",
    "demo-result": "\"a\""
  },
  {
    "name": "write-region",
    "demo-src": "(write-region \"Hello World\\n\" nil \"/tmp/tmp.txt\")\n",
    "demo-result": "nil"
  },
  {
    "name": "ws-start",
    "demo-src": "(require 'web-server)\n\n;; http://localhost:8888\n(ws-start\n (lambda (request)\n   (process-send-string\n    (oref request process)\n    (let ((body \"Hello, World!\\n\"))\n      (concat \"HTTP/1.1 200 OK\\r\\n\"\n              \"Content-Type: text/plain; charset=UTF-8\\r\\n\"\n              (format \"Content-Length: %d\\r\\n\" (string-bytes body))\n              \"\\r\\n\"\n              body))))\n 8888)\n",
    "demo-result": ""
  },
  {
    "name": "x-display-list",
    "demo-src": "(x-display-list)\n",
    "demo-result": "(\"Mac\")"
  },
  {
    "name": "x-popup-dialog",
    "demo-src": "(x-popup-dialog (selected-frame) '(\"Are you ready?\" (\"Yes\" . :yes) (\"No\" . :no)))\n",
    "demo-result": ":yes"
  },
  {
    "name": "x-popup-menu",
    "demo-src": "(x-popup-menu\n t\n (list \"What action?\"\n       (cons \"\"\n             '((\"Copy here\" . copy)\n               (\"Move here\" . move)\n               (\"Link here\" . link)\n               \"--\"\n               (\"Cancel\" . nil)))))\n",
    "demo-result": "copy"
  },
  {
    "name": "x-server-vendor",
    "demo-src": "(x-server-vendor)\n",
    "demo-result": "\"Apple Inc.\""
  },
  {
    "name": "x-server-version",
    "demo-src": "(x-server-version)\n",
    "demo-result": "(10 14 5)"
  },
  {
    "name": "xml-get-children",
    "demo-src": "(with-temp-buffer\n  (insert\n   \"<info>\"\n   \"<user id=\\\"1\\\"><name>Bob</name></user>\"\n   \"<user id=\\\"2\\\"><name>Joe</name></user>\"\n   \"</info>\")\n  (let ((x (xml-parse-region)))\n    (xml-get-children (assq 'info x) 'user)))\n",
    "demo-result": "((user\n  ((id . \"1\"))\n  (name nil \"Bob\"))\n (user\n  ((id . \"2\"))\n  (name nil \"Joe\")))"
  },
  {
    "name": "xml-node-attributes",
    "demo-src": "(xml-node-attributes\n '(user\n   ((id . \"1\"))\n   (name nil \"Bob\")))\n",
    "demo-result": "((id . \"1\"))"
  },
  {
    "name": "xml-node-children",
    "demo-src": "(xml-node-children\n '(user\n   ((id . \"1\"))\n   (name nil \"Bob\")))\n",
    "demo-result": "((name nil \"Bob\"))"
  },
  {
    "name": "xml-node-name",
    "demo-src": "(xml-node-name\n '(user\n   ((id . \"1\"))\n   (name nil \"Bob\")))\n",
    "demo-result": "user"
  },
  {
    "name": "xml-parse-file",
    "demo-src": "(let ((file (make-temp-file \"elisp-demos-\")))\n  (write-region \"<note>hello world!</note>\" nil file)\n  (unwind-protect\n      (xml-parse-file file)\n    (delete-file file)))\n",
    "demo-result": "((note nil \"hello world!\"))"
  },
  {
    "name": "xml-parse-region",
    "demo-src": "(with-temp-buffer\n  (insert \"\\\n<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\n<note>\n  <to>Tove</to>\n  <from>Jani</from>\n  <heading>Reminder</heading>\n  <body>Don't forget me this weekend!</body>\n</note>\")\n  (xml-parse-region))\n",
    "demo-result": "((note nil \"\\n  \"\n       (to nil \"Tove\")\n       \"\\n  \"\n       (from nil \"Jani\")\n       \"\\n  \"\n       (heading nil \"Reminder\")\n       \"\\n  \"\n       (body nil \"Don't forget me this weekend!\")\n       \"\\n\"))"
  },
  {
    "name": "xmlgen",
    "demo-src": "((lambda (string)\n   \"Prettify HTML in STRING.\"\n   (with-temp-buffer\n     (insert string)\n     (html-mode)\n     (sgml-pretty-print (point-min) (point-max))\n     (buffer-string)))\n (xmlgen '(html\n           (head\n            (title \"Example Domain\")\n            (meta :charset \"utf-8\"))\n           (body\n            (h1 \"Example Domain\")\n            (p \"This domain...\")\n            (p (a :href \"http://www.iana.org/domains/example\" \"More information...\"))))))\n",
    "demo-result": "<html>\n  <head>\n    <title>Example Domain\n    </title>\n    <meta charset=\"utf-8\"/>\n  </head>\n  <body>\n    <h1>Example Domain\n    </h1>\n    <p>This domain...\n    </p>\n    <p>\n      <a href=\"http://www.iana.org/domains/example\">More information...\n      </a>\n    </p>\n  </body>\n</html>\n"
  },
  {
    "name": "xor",
    "demo-src": "(list (xor nil t)\n      (xor t nil)\n      (xor nil nil)\n      (xor t t))\n",
    "demo-result": "(t t nil nil)"
  },
  {
    "name": "xr",
    "demo-src": "(xr \"\\\\.\\\\(?:mp4\\\\|mp3\\\\)\\\\'\")\n",
    "demo-result": "(seq \".\"\n     (or \"mp4\" \"mp3\")\n     eos)"
  },
  {
    "name": "y-or-n-p",
    "demo-src": "(y-or-n-p \"Are you ready? \")\n",
    "demo-result": "t"
  },
  {
    "name": "y-or-n-p-with-timeout",
    "demo-src": "(y-or-n-p-with-timeout \"Are you ready? \" 3 'default)\n",
    "demo-result": "default"
  },
  {
    "name": "yes-or-no-p",
    "demo-src": "(yes-or-no-p \"Are you ready? \")\n",
    "demo-result": "t"
  },
  {
    "name": "zerop",
    "demo-src": "(zerop 0)\n",
    "demo-result": "t"
  },
  {
    "name": "zlib-available-p",
    "demo-src": "(zlib-available-p)\n",
    "demo-result": "t"
  },
  {
    "name": "zlib-decompress-region",
    "demo-src": "(with-temp-buffer\n  (set-buffer-multibyte nil)\n  (let ((coding-system-for-read 'binary)\n        (coding-system-for-write 'binary))\n    (call-process-region \"hello\" nil \"gzip\" nil t))\n  (when (zlib-decompress-region (point-min) (point-max))\n    (buffer-string)))\n",
    "demo-result": "\"hello\""
  }
]